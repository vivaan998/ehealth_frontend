[{"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\index.js":"1","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\reportWebVitals.js":"2","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\App\\index.js":"3","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\App\\AppClient.js":"4","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\layout\\default.js":"5","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\index.js":"6","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\index.js":"7","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\layout\\components\\DefaultNavbar.js":"8","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\layout\\components\\DefaultSidebar.js":"9","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Content\\index.js":"10","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Pages\\Login\\index.js":"11","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\layout\\components\\NavbarUser.js":"12","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\services\\MenuListingService.js":"13","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\services\\AuthenticationService.js":"14","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\config\\Config.js":"15","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\components\\LogoThemed\\LogoThemed.js":"16","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\components\\Sidebar\\SidebarTopA.js":"17","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\components\\Sidebar\\SidebarBottomA.js":"18","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\layout\\components\\SidebarMiddleNav.js":"19","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Layout\\index.js":"20","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Theme\\index.js":"21","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Nav\\index.js":"22","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Navbar\\index.js":"23","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Sidebar\\index.js":"24","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\SidebarTrigger\\index.js":"25","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Avatar\\index.js":"26","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\ExtendedDropdown\\index.js":"27","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\IconWithBadge\\index.js":"28","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\InputGroupAddon\\index.js":"29","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\SidebarMenu\\index.js":"30","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\UncontrolledPopover\\index.js":"31","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\CustomInput\\index.js":"32","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\EmptyLayout\\index.js":"33","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\UncontrolledModal\\index.js":"34","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Card\\index.js":"35","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\CardHeader\\index.js":"36","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\FloatGrid\\index.js":"37","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Progress\\index.js":"38","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Content\\Appointments.js":"39","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Content\\DashboardGeneral.js":"40","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Content\\Immunizations.js":"41","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Content\\MedicalReport.js":"42","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Content\\Patients.js":"43","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Content\\Practitioners.js":"44","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Content\\Providers.js":"45","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Content\\Vaccines.js":"46","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\config\\Endpoint.js":"47","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Pages\\Login\\Login.js":"48","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\utilities.js":"49","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\components\\FooterText.js":"50","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\components\\VersionSelector.js":"51","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\components\\Pages\\FooterAuth.js":"52","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Layout\\LayoutContent.js":"53","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Layout\\LayoutNavbar.js":"54","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Layout\\LayoutSidebar.js":"55","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Layout\\withPageConfig.js":"56","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Layout\\setupPage.js":"57","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Layout\\PageConfigContext.js":"58","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Theme\\ThemeClass.js":"59","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Theme\\ThemeProvider.js":"60","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Theme\\ThemeContext.js":"61","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Nav\\nav.js":"62","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Navbar\\navbar.js":"63","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Sidebar\\Sidebar.js":"64","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Sidebar\\SidebarSection.js":"65","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Sidebar\\SidebarClose.js":"66","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Sidebar\\SidebarMobileFluid.js":"67","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Sidebar\\SidebarShowSlim.js":"68","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Sidebar\\SidebarHideSlim.js":"69","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\SidebarTrigger\\SidebarTrigger.js":"70","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Avatar\\Avatar.js":"71","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Avatar\\AvatarFont.js":"72","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Avatar\\AvatarImage.js":"73","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Avatar\\AvatarAddonBadge.js":"74","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Avatar\\AvatarAddonIcon.js":"75","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\ExtendedDropdown\\ExtendedDropdown.js":"76","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\ExtendedDropdown\\ExtendedDropdownSection.js":"77","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\ExtendedDropdown\\ExtendedDropdownLink.js":"78","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\IconWithBadge\\IconWithBadge.js":"79","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\InputGroupAddon\\InputGroupAddon.js":"80","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\UncontrolledPopover\\UncontrolledPopover.js":"81","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\CustomInput\\CustomInput.js":"82","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\EmptyLayout\\EmptyLayout.js":"83","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\components\\HeaderMain.js":"84","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Progress\\Progress.js":"85","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\FloatGrid\\Ready.js":"86","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\SidebarMenu\\SidebarMenu.js":"87","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\SidebarMenu\\SidebarMenuItem.js":"88","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\CardHeader\\CardHeader.js":"89","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Card\\Card.js":"90","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\UncontrolledModal\\UncontrolledModalSave.js":"91","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\UncontrolledModal\\UncontrolledModalClose.js":"92","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\UncontrolledModal\\UncontrolledModal.js":"93","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\EmptyLayout\\EmptyLayoutSection.js":"94","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Theme\\ThemeSelector.js":"95","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\FloatGrid\\Grid.js":"96","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\FloatGrid\\Col.js":"97","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\FloatGrid\\Row.js":"98","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Layout\\Layout.js":"99","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\components\\Pages\\HeaderAuth.js":"100","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\ReCharts.js":"101","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Tables\\ExtendedTable\\components\\VaccinesTable.js":"102","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Tables\\ExtendedTable\\components\\ProvidersTable.js":"103","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Tables\\ExtendedTable\\components\\AppointmentsTable.js":"104","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Tables\\ExtendedTable\\components\\ImmunizationsTable.js":"105","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Tables\\ExtendedTable\\components\\PatientsTable.js":"106","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Sidebar\\SidebarContent.js":"107","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\FloatGrid\\floatGridContext.js":"108","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\SidebarMenu\\MenuContext.js":"109","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\UncontrolledModal\\context.js":"110","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\common.js":"111","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Tables\\ExtendedTable\\components\\PractitionersTable.js":"112","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Tables\\ExtendedTable\\components\\CustomPaginationTotal.js":"113","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Tables\\ExtendedTable\\components\\CustomSizePerPageButton.js":"114","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Tables\\ExtendedTable\\components\\CustomPaginationPanel.js":"115","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Tables\\ExtendedTable\\components\\CustomSearch.js":"116","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\services\\ProvidersService.js":"117","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Tables\\ExtendedTable\\components\\CustomExportButton.js":"118","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\OuterClick\\index.js":"119","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\services\\VaccinesService.js":"120","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\services\\PatientsService.js":"121","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\services\\PractitionersService.js":"122","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\services\\ImmunizationsService.js":"123","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Tables\\ExtendedTable\\filters\\index.js":"124","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\OuterClick\\OuterClick.js":"125","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Tables\\ExtendedTable\\filters\\numberFilter.js":"126","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Tables\\ExtendedTable\\filters\\textFilter.js":"127","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Tables\\ExtendedTable\\filters\\selectFilter.js":"128","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\services\\AppointmentsService.js":"129","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\components\\TinyDonutChart.js":"130","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\components\\TinyPieChart.js":"131","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\components\\TinyBarChart.js":"132","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\components\\TinyAreaChart.js":"133","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\components\\VerticalComposedChart.js":"134","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\components\\TinyLineChart.js":"135","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\components\\SimpleRadialBarChart.js":"136","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\components\\SpecifiedDomainRadarChart.js":"137","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\components\\PieChartWithPaddingAngleHalf.js":"138","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\components\\PieChartWithPaddingAngle.js":"139","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\components\\PieChartWithCustomizedLabel.js":"140","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\components\\StraightAnglePieChart.js":"141","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\components\\LineBarAreaComposedChart.js":"142","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\components\\TwoLevelPieChart.js":"143","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\components\\AreaChartFillByValue.js":"144","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\components\\PercentAreaChart.js":"145","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\components\\StackedAreaChart.js":"146","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\components\\SimpleAreaChart.js":"147","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\components\\CustomizedLabelLineChart.js":"148","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\components\\VerticalLineChart.js":"149","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\components\\DashedLineChart.js":"150","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\components\\SimpleLineChart.js":"151","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\components\\BarChartHasBackground.js":"152","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\components\\BarChartStackedBySign.js":"153","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\components\\PositiveAndNegativeBarChart.js":"154","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\components\\MixBarChart.js":"155","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\components\\StackedBarChart.js":"156","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\components\\SimpleBarChart.js":"157","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\components\\HeaderDemo.js":"158","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\colors.js":"159","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\recharts.js":"160","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Recharts\\Legend.js":"161","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Recharts\\Tooltip.js":"162","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Recharts\\config.js":"163","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Recharts\\DefAreaValueColor.js":"164","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Recharts\\ValueLabel.js":"165","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Recharts\\PieValueLabel.js":"166","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Recharts\\PolarAngleAxis.js":"167","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Recharts\\PolarRadiusAxis.js":"168","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Recharts\\ZAxis.js":"169","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Recharts\\YAxis.js":"170","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Recharts\\XAxis.js":"171","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Recharts\\PolarGrid.js":"172","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Recharts\\CartesianGrid.js":"173","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\layout\\components\\NavbarActivityFeed.js":"174","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\layout\\components\\NavbarMessages.js":"175","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\components\\Sidebar\\SidebarTopB.js":"176","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\components\\Sidebar\\SidebarBottomB.js":"177","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\config.js":"178","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\services\\MedicalReportService.js":"179","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Tables\\ExtendedTable\\components\\MedicalReportTable.js":"180","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\services\\ChartsService.js":"181","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Tables\\ExtendedTable\\components\\ProviderImmunizationsChartTable.js":"182"},{"size":642,"mtime":1613326998596,"results":"183","hashOfConfig":"184"},{"size":375,"mtime":1612332730250,"results":"185","hashOfConfig":"184"},{"size":65,"mtime":1612332730182,"results":"186","hashOfConfig":"184"},{"size":518,"mtime":1612332730181,"results":"187","hashOfConfig":"184"},{"size":2216,"mtime":1613326999050,"results":"188","hashOfConfig":"184"},{"size":1527,"mtime":1613326999735,"results":"189","hashOfConfig":"184"},{"size":2748,"mtime":1613326998242,"results":"190","hashOfConfig":"184"},{"size":1646,"mtime":1613220001207,"results":"191","hashOfConfig":"184"},{"size":3662,"mtime":1613327962008,"results":"192","hashOfConfig":"184"},{"size":503,"mtime":1612422598691,"results":"193","hashOfConfig":"184"},{"size":53,"mtime":1612430415646,"results":"194","hashOfConfig":"184"},{"size":927,"mtime":1613220029865,"results":"195","hashOfConfig":"184"},{"size":885,"mtime":1612701460529,"results":"196","hashOfConfig":"184"},{"size":1239,"mtime":1613189190964,"results":"197","hashOfConfig":"184"},{"size":415,"mtime":1613200966715,"results":"198","hashOfConfig":"184"},{"size":1641,"mtime":1613326999178,"results":"199","hashOfConfig":"184"},{"size":2141,"mtime":1613326999307,"results":"200","hashOfConfig":"184"},{"size":1985,"mtime":1612422598694,"results":"201","hashOfConfig":"184"},{"size":3977,"mtime":1613327787673,"results":"202","hashOfConfig":"184"},{"size":654,"mtime":1612982718427,"results":"203","hashOfConfig":"184"},{"size":160,"mtime":1612332730189,"results":"204","hashOfConfig":"184"},{"size":53,"mtime":1612353098756,"results":"205","hashOfConfig":"184"},{"size":60,"mtime":1612353098757,"results":"206","hashOfConfig":"184"},{"size":516,"mtime":1613120807478,"results":"207","hashOfConfig":"184"},{"size":84,"mtime":1613120807187,"results":"208","hashOfConfig":"184"},{"size":431,"mtime":1612353098733,"results":"209","hashOfConfig":"184"},{"size":326,"mtime":1612353098737,"results":"210","hashOfConfig":"184"},{"size":83,"mtime":1612353098738,"results":"211","hashOfConfig":"184"},{"size":88,"mtime":1612353098740,"results":"212","hashOfConfig":"184"},{"size":170,"mtime":1613120808179,"results":"213","hashOfConfig":"184"},{"size":99,"mtime":1612422598669,"results":"214","hashOfConfig":"184"},{"size":77,"mtime":1612430577009,"results":"215","hashOfConfig":"184"},{"size":182,"mtime":1612430624462,"results":"216","hashOfConfig":"184"},{"size":329,"mtime":1612864259540,"results":"217","hashOfConfig":"184"},{"size":54,"mtime":1613222713046,"results":"218","hashOfConfig":"184"},{"size":72,"mtime":1613222289746,"results":"219","hashOfConfig":"184"},{"size":332,"mtime":1613221538676,"results":"220","hashOfConfig":"184"},{"size":68,"mtime":1613223160337,"results":"221","hashOfConfig":"184"},{"size":648,"mtime":1613114227667,"results":"222","hashOfConfig":"184"},{"size":778,"mtime":1613331020573,"results":"223","hashOfConfig":"184"},{"size":654,"mtime":1613114227667,"results":"224","hashOfConfig":"184"},{"size":2305,"mtime":1613329346096,"results":"225","hashOfConfig":"184"},{"size":568,"mtime":1612983666282,"results":"226","hashOfConfig":"184"},{"size":662,"mtime":1612962557201,"results":"227","hashOfConfig":"184"},{"size":629,"mtime":1613114227669,"results":"228","hashOfConfig":"184"},{"size":946,"mtime":1613114227670,"results":"229","hashOfConfig":"184"},{"size":1629,"mtime":1613359859895,"results":"230","hashOfConfig":"184"},{"size":8924,"mtime":1613364063855,"results":"231","hashOfConfig":"184"},{"size":343,"mtime":1612422598698,"results":"232","hashOfConfig":"184"},{"size":446,"mtime":1612431530145,"results":"233","hashOfConfig":"184"},{"size":4940,"mtime":1612422598697,"results":"234","hashOfConfig":"184"},{"size":372,"mtime":1612429962977,"results":"235","hashOfConfig":"184"},{"size":329,"mtime":1612982718370,"results":"236","hashOfConfig":"184"},{"size":463,"mtime":1612982718422,"results":"237","hashOfConfig":"184"},{"size":657,"mtime":1612982718424,"results":"238","hashOfConfig":"184"},{"size":401,"mtime":1613323518377,"results":"239","hashOfConfig":"184"},{"size":942,"mtime":1612982718494,"results":"240","hashOfConfig":"184"},{"size":119,"mtime":1612982718425,"results":"241","hashOfConfig":"184"},{"size":651,"mtime":1612332730188,"results":"242","hashOfConfig":"184"},{"size":1191,"mtime":1612332730188,"results":"243","hashOfConfig":"184"},{"size":119,"mtime":1612414588309,"results":"244","hashOfConfig":"184"},{"size":546,"mtime":1612353098756,"results":"245","hashOfConfig":"184"},{"size":1639,"mtime":1612353098758,"results":"246","hashOfConfig":"184"},{"size":1103,"mtime":1613120807262,"results":"247","hashOfConfig":"184"},{"size":634,"mtime":1613120807474,"results":"248","hashOfConfig":"184"},{"size":272,"mtime":1613120807463,"results":"249","hashOfConfig":"184"},{"size":482,"mtime":1613326998110,"results":"250","hashOfConfig":"184"},{"size":469,"mtime":1613120807476,"results":"251","hashOfConfig":"184"},{"size":469,"mtime":1613120807467,"results":"252","hashOfConfig":"184"},{"size":888,"mtime":1613326998112,"results":"253","hashOfConfig":"184"},{"size":2354,"mtime":1612353098728,"results":"254","hashOfConfig":"184"},{"size":1699,"mtime":1612353098732,"results":"255","hashOfConfig":"184"},{"size":1684,"mtime":1613139723779,"results":"256","hashOfConfig":"184"},{"size":509,"mtime":1612353098730,"results":"257","hashOfConfig":"184"},{"size":689,"mtime":1613139193872,"results":"258","hashOfConfig":"184"},{"size":469,"mtime":1612353098734,"results":"259","hashOfConfig":"184"},{"size":836,"mtime":1612353098736,"results":"260","hashOfConfig":"184"},{"size":695,"mtime":1612353098735,"results":"261","hashOfConfig":"184"},{"size":730,"mtime":1612353098738,"results":"262","hashOfConfig":"184"},{"size":1030,"mtime":1612353098739,"results":"263","hashOfConfig":"184"},{"size":2023,"mtime":1612422598669,"results":"264","hashOfConfig":"184"},{"size":495,"mtime":1612430577005,"results":"265","hashOfConfig":"184"},{"size":1197,"mtime":1612430624352,"results":"266","hashOfConfig":"184"},{"size":687,"mtime":1612794781086,"results":"267","hashOfConfig":"184"},{"size":695,"mtime":1613223160316,"results":"268","hashOfConfig":"184"},{"size":358,"mtime":1613221538634,"results":"269","hashOfConfig":"184"},{"size":5278,"mtime":1613120807797,"results":"270","hashOfConfig":"184"},{"size":5305,"mtime":1613120808178,"results":"271","hashOfConfig":"184"},{"size":871,"mtime":1613222289604,"results":"272","hashOfConfig":"184"},{"size":806,"mtime":1613222713013,"results":"273","hashOfConfig":"184"},{"size":796,"mtime":1612864242600,"results":"274","hashOfConfig":"184"},{"size":758,"mtime":1613217999487,"results":"275","hashOfConfig":"184"},{"size":1771,"mtime":1613217994858,"results":"276","hashOfConfig":"184"},{"size":1024,"mtime":1612430624419,"results":"277","hashOfConfig":"184"},{"size":6810,"mtime":1612332730189,"results":"278","hashOfConfig":"184"},{"size":3742,"mtime":1613221538632,"results":"279","hashOfConfig":"184"},{"size":2667,"mtime":1613221538629,"results":"280","hashOfConfig":"184"},{"size":7973,"mtime":1613221538671,"results":"281","hashOfConfig":"184"},{"size":10018,"mtime":1613326998039,"results":"282","hashOfConfig":"184"},{"size":1103,"mtime":1613195225570,"results":"283","hashOfConfig":"184"},{"size":8310,"mtime":1613363757282,"results":"284","hashOfConfig":"184"},{"size":15816,"mtime":1613327150704,"results":"285","hashOfConfig":"184"},{"size":15894,"mtime":1613327150701,"results":"286","hashOfConfig":"184"},{"size":27738,"mtime":1613367700038,"results":"287","hashOfConfig":"184"},{"size":29926,"mtime":1613367587379,"results":"288","hashOfConfig":"184"},{"size":33771,"mtime":1613367459513,"results":"289","hashOfConfig":"184"},{"size":2169,"mtime":1613120807465,"results":"290","hashOfConfig":"184"},{"size":86,"mtime":1613221538674,"results":"291","hashOfConfig":"184"},{"size":176,"mtime":1613120807795,"results":"292","hashOfConfig":"184"},{"size":129,"mtime":1612855989229,"results":"293","hashOfConfig":"184"},{"size":114,"mtime":1612353098720,"results":"294","hashOfConfig":"184"},{"size":32215,"mtime":1613367343374,"results":"295","hashOfConfig":"184"},{"size":365,"mtime":1612961238251,"results":"296","hashOfConfig":"184"},{"size":1265,"mtime":1613327259074,"results":"297","hashOfConfig":"184"},{"size":1218,"mtime":1612965224827,"results":"298","hashOfConfig":"184"},{"size":1783,"mtime":1613046217945,"results":"299","hashOfConfig":"184"},{"size":3144,"mtime":1613146517781,"results":"300","hashOfConfig":"184"},{"size":592,"mtime":1612794781076,"results":"301","hashOfConfig":"184"},{"size":72,"mtime":1613120808608,"results":"302","hashOfConfig":"184"},{"size":3161,"mtime":1613146517781,"results":"303","hashOfConfig":"184"},{"size":3213,"mtime":1613146517732,"results":"304","hashOfConfig":"184"},{"size":4251,"mtime":1613146517779,"results":"305","hashOfConfig":"184"},{"size":5156,"mtime":1613327150725,"results":"306","hashOfConfig":"184"},{"size":95,"mtime":1612794781083,"results":"307","hashOfConfig":"184"},{"size":2370,"mtime":1613120808602,"results":"308","hashOfConfig":"184"},{"size":4356,"mtime":1612794781084,"results":"309","hashOfConfig":"184"},{"size":2321,"mtime":1612794781086,"results":"310","hashOfConfig":"184"},{"size":2528,"mtime":1612794781085,"results":"311","hashOfConfig":"184"},{"size":4387,"mtime":1613327150707,"results":"312","hashOfConfig":"184"},{"size":918,"mtime":1613221468810,"results":"313","hashOfConfig":"184"},{"size":883,"mtime":1613221468816,"results":"314","hashOfConfig":"184"},{"size":545,"mtime":1613221468808,"results":"315","hashOfConfig":"184"},{"size":641,"mtime":1613221468806,"results":"316","hashOfConfig":"184"},{"size":1681,"mtime":1613221468823,"results":"317","hashOfConfig":"184"},{"size":800,"mtime":1613221468813,"results":"318","hashOfConfig":"184"},{"size":1435,"mtime":1613221468791,"results":"319","hashOfConfig":"184"},{"size":1733,"mtime":1613363692477,"results":"320","hashOfConfig":"184"},{"size":1136,"mtime":1613221468779,"results":"321","hashOfConfig":"184"},{"size":1071,"mtime":1613221468777,"results":"322","hashOfConfig":"184"},{"size":1104,"mtime":1613221468775,"results":"323","hashOfConfig":"184"},{"size":986,"mtime":1613221468804,"results":"324","hashOfConfig":"184"},{"size":1961,"mtime":1613221468768,"results":"325","hashOfConfig":"184"},{"size":1421,"mtime":1613287880269,"results":"326","hashOfConfig":"184"},{"size":1434,"mtime":1613221468753,"results":"327","hashOfConfig":"184"},{"size":1387,"mtime":1613221468774,"results":"328","hashOfConfig":"184"},{"size":1387,"mtime":1613221468796,"results":"329","hashOfConfig":"184"},{"size":1160,"mtime":1613221468785,"results":"330","hashOfConfig":"184"},{"size":1533,"mtime":1613221468763,"results":"331","hashOfConfig":"184"},{"size":1561,"mtime":1613221468825,"results":"332","hashOfConfig":"184"},{"size":1610,"mtime":1613221468766,"results":"333","hashOfConfig":"184"},{"size":2038,"mtime":1613221468789,"results":"334","hashOfConfig":"184"},{"size":1292,"mtime":1613221468757,"results":"335","hashOfConfig":"184"},{"size":1392,"mtime":1613221468759,"results":"336","hashOfConfig":"184"},{"size":1378,"mtime":1613221468783,"results":"337","hashOfConfig":"184"},{"size":1381,"mtime":1613221468770,"results":"338","hashOfConfig":"184"},{"size":1250,"mtime":1613287201295,"results":"339","hashOfConfig":"184"},{"size":1449,"mtime":1613361107592,"results":"340","hashOfConfig":"184"},{"size":931,"mtime":1613283035367,"results":"341","hashOfConfig":"184"},{"size":298,"mtime":1613283340552,"results":"342","hashOfConfig":"184"},{"size":1365,"mtime":1613223458771,"results":"343","hashOfConfig":"184"},{"size":232,"mtime":1613223439601,"results":"344","hashOfConfig":"184"},{"size":238,"mtime":1613223439656,"results":"345","hashOfConfig":"184"},{"size":1228,"mtime":1613287696355,"results":"346","hashOfConfig":"184"},{"size":1139,"mtime":1613223439581,"results":"347","hashOfConfig":"184"},{"size":435,"mtime":1613223439659,"results":"348","hashOfConfig":"184"},{"size":1084,"mtime":1613223439648,"results":"349","hashOfConfig":"184"},{"size":279,"mtime":1613223439650,"results":"350","hashOfConfig":"184"},{"size":285,"mtime":1613223439654,"results":"351","hashOfConfig":"184"},{"size":227,"mtime":1613223439664,"results":"352","hashOfConfig":"184"},{"size":225,"mtime":1613223439662,"results":"353","hashOfConfig":"184"},{"size":225,"mtime":1613223439660,"results":"354","hashOfConfig":"184"},{"size":277,"mtime":1613223439652,"results":"355","hashOfConfig":"184"},{"size":297,"mtime":1613223439543,"results":"356","hashOfConfig":"184"},{"size":3649,"mtime":1612353098830,"results":"357","hashOfConfig":"184"},{"size":3981,"mtime":1612353098832,"results":"358","hashOfConfig":"184"},{"size":2580,"mtime":1612422598696,"results":"359","hashOfConfig":"184"},{"size":5209,"mtime":1613326999272,"results":"360","hashOfConfig":"184"},{"size":1141,"mtime":1613326998355,"results":"361","hashOfConfig":"184"},{"size":4151,"mtime":1613327150726,"results":"362","hashOfConfig":"184"},{"size":64021,"mtime":1613328466256,"results":"363","hashOfConfig":"184"},{"size":1683,"mtime":1613359841146,"results":"364","hashOfConfig":"184"},{"size":3228,"mtime":1613362930280,"results":"365","hashOfConfig":"184"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"368","usedDeprecatedRules":"369"},"15voz50",{"filePath":"370","messages":"371","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"378","usedDeprecatedRules":"369"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"381","usedDeprecatedRules":"369"},{"filePath":"382","messages":"383","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"388","usedDeprecatedRules":"369"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"395","usedDeprecatedRules":"369"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"398","usedDeprecatedRules":"369"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"401","usedDeprecatedRules":"369"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"404","messages":"405","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"406","messages":"407","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"408","usedDeprecatedRules":"369"},{"filePath":"409","messages":"410","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"411","usedDeprecatedRules":"369"},{"filePath":"412","messages":"413","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"414","usedDeprecatedRules":"369"},{"filePath":"415","messages":"416","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"417","messages":"418","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"419","messages":"420","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"421","messages":"422","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"423","messages":"424","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"425","messages":"426","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"427","messages":"428","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"429","messages":"430","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"431","messages":"432","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"433","messages":"434","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"435","messages":"436","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"437","messages":"438","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"439","messages":"440","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"441","messages":"442","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"443","messages":"444","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"445","messages":"446","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"447","messages":"448","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"449","messages":"450","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"451","messages":"452","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"453","messages":"454","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"455","messages":"456","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"457","usedDeprecatedRules":"369"},{"filePath":"458","messages":"459","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"460","messages":"461","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"462","usedDeprecatedRules":"369"},{"filePath":"463","messages":"464","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"465","usedDeprecatedRules":"369"},{"filePath":"466","messages":"467","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"468","messages":"469","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"470","messages":"471","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"472","messages":"473","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"474","messages":"475","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"476","usedDeprecatedRules":"369"},{"filePath":"477","messages":"478","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"479","messages":"480","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"481","messages":"482","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"483","usedDeprecatedRules":"369"},{"filePath":"484","messages":"485","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"486","messages":"487","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"488","messages":"489","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"490","messages":"491","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"492","messages":"493","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"494","messages":"495","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"496","messages":"497","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"498","messages":"499","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"500","messages":"501","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"502","messages":"503","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"504","messages":"505","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"506","messages":"507","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"508","messages":"509","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"510","messages":"511","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"512","messages":"513","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"514","messages":"515","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"516","messages":"517","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"518","messages":"519","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"520","messages":"521","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"522","messages":"523","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"524","messages":"525","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"526","messages":"527","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"528","messages":"529","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"530","usedDeprecatedRules":"369"},{"filePath":"531","messages":"532","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"533","messages":"534","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"535","messages":"536","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"537","messages":"538","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"539","messages":"540","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"541","messages":"542","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"543","messages":"544","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"545","messages":"546","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"547","messages":"548","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"549","usedDeprecatedRules":"369"},{"filePath":"550","messages":"551","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"552","messages":"553","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"554","messages":"555","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"556","messages":"557","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"558","messages":"559","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"560","usedDeprecatedRules":"369"},{"filePath":"561","messages":"562","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"563","messages":"564","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"565","messages":"566","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"567","messages":"568","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"569","messages":"570","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"571","messages":"572","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"573","messages":"574","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"575","messages":"576","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"577","usedDeprecatedRules":"369"},{"filePath":"578","messages":"579","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"580","usedDeprecatedRules":"369"},{"filePath":"581","messages":"582","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"583","messages":"584","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"585","messages":"586","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"587","messages":"588","errorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"589","messages":"590","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"591","usedDeprecatedRules":"369"},{"filePath":"592","messages":"593","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"594","usedDeprecatedRules":"369"},{"filePath":"595","messages":"596","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"597"},{"filePath":"598","messages":"599","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"600","usedDeprecatedRules":"369"},{"filePath":"601","messages":"602","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"603","usedDeprecatedRules":"369"},{"filePath":"604","messages":"605","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"606","messages":"607","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"608","messages":"609","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"610","messages":"611","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"612","messages":"613","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"614","messages":"615","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"616","usedDeprecatedRules":"369"},{"filePath":"617","messages":"618","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"619","messages":"620","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"621","messages":"622","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"623","messages":"624","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"625","messages":"626","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"627","usedDeprecatedRules":"369"},{"filePath":"628","messages":"629","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"630","messages":"631","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"632","messages":"633","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"634","usedDeprecatedRules":"369"},{"filePath":"635","messages":"636","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"637","usedDeprecatedRules":"369"},{"filePath":"638","messages":"639","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"640","usedDeprecatedRules":"369"},{"filePath":"641","messages":"642","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"643","usedDeprecatedRules":"369"},{"filePath":"644","messages":"645","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"646","messages":"647","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"648","messages":"649","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"650","usedDeprecatedRules":"369"},{"filePath":"651","messages":"652","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"653","messages":"654","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"655","messages":"656","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"657","usedDeprecatedRules":"369"},{"filePath":"658","messages":"659","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"660","messages":"661","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"662","messages":"663","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"664","messages":"665","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"666","messages":"667","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"668","messages":"669","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"670","messages":"671","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"672","messages":"673","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"674","messages":"675","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"676","messages":"677","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"678","messages":"679","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"680","messages":"681","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"682","messages":"683","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"684","messages":"685","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"686","usedDeprecatedRules":"369"},{"filePath":"687","messages":"688","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"689","messages":"690","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"691","messages":"692","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"693","messages":"694","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"695","messages":"696","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"697","messages":"698","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"699","messages":"700","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"701","messages":"702","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"703","messages":"704","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"705","messages":"706","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"707","messages":"708","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"709","messages":"710","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"711","messages":"712","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"713","usedDeprecatedRules":"369"},{"filePath":"714","messages":"715","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"716","usedDeprecatedRules":"369"},{"filePath":"717","messages":"718","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"719","messages":"720","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"721","messages":"722","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"723","messages":"724","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"725","messages":"726","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"727","messages":"728","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"729","usedDeprecatedRules":"369"},{"filePath":"730","messages":"731","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"732","messages":"733","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"734","messages":"735","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"736","usedDeprecatedRules":"369"},{"filePath":"737","messages":"738","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"739","messages":"740","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"741","messages":"742","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"743","messages":"744","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"745","messages":"746","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"747","messages":"748","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"749","messages":"750","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"751","messages":"752","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"753"},{"filePath":"754","messages":"755","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"753"},{"filePath":"756","messages":"757","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"753"},{"filePath":"758","messages":"759","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"753"},{"filePath":"760","messages":"761","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"369"},{"filePath":"762","messages":"763","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"764","usedDeprecatedRules":"369"},{"filePath":"765","messages":"766","errorCount":0,"warningCount":37,"fixableErrorCount":0,"fixableWarningCount":0,"source":"767","usedDeprecatedRules":"369"},{"filePath":"768","messages":"769","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"770","usedDeprecatedRules":"369"},{"filePath":"771","messages":"772","errorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"773","usedDeprecatedRules":"369"},"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\index.js",["774","775"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { render } from 'react-dom';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// render(\r\n//   <App />,\r\n//   document.getElementById('root')\r\n// );\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n// reportWebVitals();\r\n",["776","777"],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\reportWebVitals.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\App\\index.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\App\\AppClient.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\layout\\default.js",["778","779"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {\r\n    Layout,\r\n    ThemeSelector,\r\n    ThemeProvider,\r\n    PageConfigConsumer,\r\n} from './../components';\r\n\r\nimport './../styles/bootstrap.scss';\r\nimport './../styles/main.scss';\r\nimport './../styles/plugins/plugins.scss';\r\nimport './../styles/plugins/plugins.css';\r\n\r\nimport {\r\n    RoutedNavbars,\r\n    RoutedSidebars,\r\n} from './../routes';\r\n\r\nconst favIcons = [\r\n    {rel: 'icon', type: 'image/png', href: './../images/logos/eHealth.png'},\r\n\r\n    { rel: 'apple-touch-icon', sizes: '180x180', href: './../images/logos/eHealth.png'},\r\n\r\n    { rel: 'icon', type: 'image/png', sizes: '32x32', href: './../images/logos/eHealth.png' },\r\n    { rel: 'icon', type: 'image/png', sizes: '16x16', href: './../images/logos/eHealth.png' }\r\n];\r\n\r\nclass AppLayout extends React.Component {\r\n    static propTypes = {\r\n        children: PropTypes.node.isRequired\r\n    }\r\n\r\n    render() {\r\n        const { children } = this.props;\r\n        // console.log(favIcons)\r\n        \r\n        return (\r\n            <ThemeProvider initialStyle=\"light\" initialColor=\"primary\">\r\n                <Layout sidebarSlim favIcons={ favIcons }>\r\n                    { /* --------- Navbar ----------- */ }\r\n                    <Layout.Navbar>\r\n                        <RoutedNavbars />\r\n                    </Layout.Navbar>\r\n                    { /* -------- Sidebar ------------*/ }\r\n                    <Layout.Sidebar>\r\n                        <RoutedSidebars />\r\n                    </Layout.Sidebar>\r\n\r\n                    { /* -------- Content ------------*/ }\r\n                    <Layout.Content>\r\n                        { children }\r\n                    </Layout.Content>\r\n\r\n                    { /* -- Theme Selector (DEMO) ----*/ }\r\n                    {/* <PageConfigConsumer>\r\n                    {\r\n                        ({ sidebarHidden, navbarHidden }) => (\r\n                            <ThemeSelector styleDisabled={ sidebarHidden && navbarHidden } />\r\n                        )\r\n                    }\r\n                    </PageConfigConsumer> */}\r\n                </Layout>\r\n            </ThemeProvider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AppLayout;\r\n","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\index.js",["780","781"],"import React from \"react\";\r\nimport { Route, Switch, Redirect } from \"react-router\";\r\nimport DefaultNavbar from \"./../layout/components/DefaultNavbar\";\r\nimport DefaultSidebar from \"./../layout/components/DefaultSidebar\";\r\nimport Login from './Pages/Login';\r\n\r\n\r\nimport { SidebarANavbar } from './../layout/components/SidebarANavbar';\r\nimport { SidebarASidebar } from './../layout/components/SidebarASidebar';\r\n\r\nimport NavbarOnly from './Layouts/NavbarOnly';\r\nimport SidebarWithNavbar from './Layouts/SidebarWithNavbar';\r\n\r\nimport {\r\n    Appointments,\r\n    DashboardGeneral,\r\n    Immunizations,\r\n    MedicalReport,\r\n    Patients,\r\n    Practitioners,\r\n    Providers,\r\n    Vaccines\r\n} from './Content'\r\n\r\nexport const RoutedContent = () => {\r\n  return (\r\n    <Switch>\r\n      <Redirect from=\"/\" to=\"/dashboard\" exact />\r\n\r\n      <Route path=\"/dashboard\" exact component={DashboardGeneral} />\r\n\r\n      <Route path='/mymedicalreport' exact component={MedicalReport} />\r\n\r\n      <Route path='/appointments' exact component={Appointments} />\r\n\r\n      <Route path='/immunizations' exact component={Immunizations} />\r\n\r\n      <Route path='/patients' exact component={Patients} />\r\n\r\n      <Route path='/providers' exact component={Providers} />\r\n\r\n      <Route path='/vaccines' exact component={Vaccines} />\r\n\r\n      <Route path='/practitioners' exact component={Practitioners} />\r\n\r\n      <Route component={ Login } path=\"/login\" />\r\n\r\n\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport const RoutedNavbars = () => {\r\n  return (\r\n    <Switch>\r\n        { /* Other Navbars: */}\r\n        {/* <Route\r\n            component={ SidebarANavbar }\r\n            path=\"/layouts/sidebar-a\"\r\n        /> */}\r\n        <Route\r\n            component={ NavbarOnly.Navbar }\r\n        />\r\n        {/* <Route\r\n            component={ SidebarWithNavbar.Navbar }\r\n        /> */}\r\n        { /* Default Navbar: */}\r\n        {/* <Route\r\n            component={ DefaultNavbar }\r\n        /> */}\r\n    </Switch> \r\n  );\r\n};\r\n\r\nexport const RoutedSidebars = () => {\r\n  return (\r\n    <Switch>\r\n        { /* Other Sidebars: */}\r\n        <Route\r\n            component={ SidebarASidebar }\r\n            path=\"/layouts/sidebar-a\"\r\n        />\r\n        <Route\r\n            component={ SidebarWithNavbar.Sidebar }\r\n            path=\"/layouts/sidebar-with-navbar\"\r\n        />\r\n        { /* Default Sidebar: */}\r\n        <Route\r\n            component={ DefaultSidebar }\r\n        />\r\n    </Switch>\r\n  );\r\n};\r\n","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\index.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\layout\\components\\DefaultNavbar.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\layout\\components\\DefaultSidebar.js",["782","783","784"],"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport MenuListingService from '../../services/MenuListingService'\r\nimport AuthenticationService from '../../services/AuthenticationService';\r\nimport {\r\n    Sidebar,\r\n    SidebarTrigger,\r\n} from './../../components';\r\n\r\nimport SidebarMiddleNav from './SidebarMiddleNav';\r\n\r\nimport SidebarTopA from '../../routes/components/Sidebar/SidebarTopA'\r\nimport { SidebarBottomA } from '../../routes/components/Sidebar/SidebarBottomA'\r\nimport { LogoThemed } from '../../routes/components/LogoThemed/LogoThemed';\r\nimport Config from './../../config/Config';\r\n\r\nclass DefaultSidebar extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            profileData: 'Default User',\r\n            menuItems: '',\r\n            menuList: '',\r\n            isDataGetting: false,\r\n        }\r\n    }\r\n    getMenu = async () => {\r\n        try{\r\n            this.setState({\r\n                isDataGetting: true\r\n            });\r\n            const response = await MenuListingService.getMenu();\r\n            if (response.status == true){\r\n                this.setState({\r\n                    profileData: response.data.data,\r\n                    menuItems: response.data.menu,\r\n                    isLoading: false,\r\n                    isDataGetting: false                    \r\n                });\r\n                Config.setProfileData(this.state.profileData);\r\n                let menu;\r\n                var temp = this.state.menuItems;\r\n                menu = (temp).map(o => o.title);\r\n                    this.setState({\r\n                        menuList: menu\r\n                });\r\n\r\n            }\r\n        }\r\n        catch(e){\r\n            console.log('error >>>', e);\r\n            console.log(e, e.data);\r\n        }\r\n    }\r\n\r\n    componentDidMount = async () => { \r\n        if (AuthenticationService.getUser()){\r\n            console.log('getting menu did mount' );\r\n            this.getMenu();            \r\n        }\r\n        else{\r\n            this.props.history.push({\r\n                pathname: \"/login\",\r\n            })\r\n        }\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <Sidebar>\r\n                { /* START SIDEBAR-OVERLAY: Close (x) */ }\r\n                <Sidebar.Close>\r\n                    <SidebarTrigger tag={ 'a' } href=\"javascript:;\">\r\n                        <i className=\"fa fa-times-circle fa-fw\"></i>\r\n                    </SidebarTrigger>\r\n                </Sidebar.Close>\r\n                { /* START SIDEBAR-OVERLAY: Close (x) */ }\r\n                \r\n                { /* START SIDEBAR: Only for Desktop */ }\r\n                <Sidebar.HideSlim>\r\n                    <Sidebar.Section>\r\n                        <Link to=\"/\" className=\"sidebar__brand\">\r\n                            <LogoThemed checkBackground />\r\n                        </Link>\r\n                    </Sidebar.Section>\r\n                </Sidebar.HideSlim>\r\n                { /* END SIDEBAR: Only for Desktop */ }\r\n\r\n                { /* START SIDEBAR: Only for Mobile */ }\r\n                \r\n                <Sidebar.MobileFluid>\r\n                    <SidebarTopA data={this.state} {...this.props}/>\r\n                    {this.state.isDataGetting ? 'Loading menu...': ''}\r\n                    <Sidebar.Section fluid cover>\r\n                        { /* SIDEBAR: Menu */ }\r\n                        <SidebarMiddleNav {...this.props} data={this.state}/>\r\n                    </Sidebar.Section>\r\n\r\n                </Sidebar.MobileFluid>\r\n                { /* END SIDEBAR: Only for Mobile */ }\r\n            </Sidebar>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DefaultSidebar;","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Content\\index.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Pages\\Login\\index.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\layout\\components\\NavbarUser.js",["785","786"],"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport AuthenticationService from '../../services/AuthenticationService'\r\nimport {\r\n    NavItem,\r\n    NavLink\r\n} from './../../components';\r\nimport { constant } from 'lodash';\r\n\r\nclass NavbarUser extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            isLoading: false\r\n        }\r\n    }\r\n\r\n    doLogout(){\r\n        AuthenticationService.deleteToken();\r\n        this.props.history.push({\r\n            pathname: \"/login\",\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <NavItem>\r\n                <NavLink tag={ Link } disabled={this.state.isLoading} onClick={() => this.doLogout()}>\r\n                    <i className=\"fa fa-power-off\"></i>\r\n                </NavLink>\r\n            </NavItem>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default NavbarUser;\r\n","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\services\\MenuListingService.js",["787"],"import axios from 'axios';\r\nimport paths from '../config/Endpoint';\r\nimport AuthenticationService from './AuthenticationService';\r\n\r\n\r\nconst getMenu = async (data) => {\r\n    const config = {\r\n        headers: {\r\n            'accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Access-Control-Allow-Origin': '*',\r\n            'Authorization': 'Bearer ' + AuthenticationService.getToken(),\r\n        }\r\n    }\r\n    var response;\r\n    const res = await axios.get(paths.menu, config)\r\n        .then(function (res){\r\n            response = {status: true, data: res.data}\r\n        })\r\n        .catch(function (err) {\r\n            console.log(err.response);\r\n            response = { status: false, data: err.response };\r\n        });\r\n    return response;\r\n}\r\n\r\n\r\nconst MenuListingService = {\r\n    getMenu: getMenu,\r\n}\r\nexport default MenuListingService;","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\services\\AuthenticationService.js",["788"],"import axios from 'axios';\r\nimport paths from '../config/Endpoint';\r\n\r\nconst getUser = () => {\r\n    return getCredentials();\r\n}\r\n\r\n\r\nconst doLogin = async (data) => {\r\n    const config = {\r\n        headers: {\r\n            'accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Access-Control-Allow-Origin': '*'\r\n        }\r\n    }\r\n    var response;\r\n    const res = await axios.post(paths.login, data, config)\r\n        .then(function (res){\r\n            response = {status: true, data: res.data}\r\n        })\r\n        .catch(function (err) {\r\n            console.log(err.response);\r\n            response = { status: false, data: err.response };\r\n        });\r\n    return response;\r\n}\r\n\r\nconst setCredentials = (data) => {\r\n    localStorage.setItem('access_token', data);\r\n}\r\n\r\nconst getCredentials = () => {\r\n    var access_token;\r\n    access_token = localStorage.getItem('access_token');\r\n    return access_token\r\n}\r\n\r\nconst deleteCredentials = () => {\r\n    localStorage.clear()\r\n}\r\n\r\n\r\nconst AuthenticationService = {\r\n    Login: doLogin,\r\n    setToken: setCredentials,\r\n    getToken: getCredentials,\r\n    deleteToken: deleteCredentials,\r\n    getUser: getUser,\r\n}\r\nexport default AuthenticationService;","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\config\\Config.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\components\\LogoThemed\\LogoThemed.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\components\\Sidebar\\SidebarTopA.js",["789","790","791","792","793"],"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { \r\n    Sidebar,\r\n    UncontrolledButtonDropdown,\r\n    Avatar,\r\n    AvatarAddOn,\r\n    DropdownToggle,\r\n    DropdownMenu,\r\n    DropdownItem\r\n} from './../../../components';\r\nimport { randomAvatar } from './../../../utilities';\r\n\r\nconst avatarImg = randomAvatar();\r\n\r\nclass SidebarTopA extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n    render(){\r\n        return(\r\n            <React.Fragment>\r\n                { /* START: Sidebar Default */ }\r\n                <Sidebar.HideSlim>\r\n                    <Sidebar.Section className=\"pt-0\">\r\n                        <Link to=\"/\" className=\"d-block\">\r\n                            <Sidebar.HideSlim>\r\n                                <Avatar.Image\r\n                                    size=\"lg\"\r\n                                />\r\n                            </Sidebar.HideSlim>\r\n                        </Link>\r\n                        \r\n                        <UncontrolledButtonDropdown>\r\n                            <DropdownToggle color=\"link\" className=\"pl-0 pb-0 btn-profile sidebar__link\">\r\n                                harshil\r\n                                {/* <i className=\"fa fa-angle-down ml-2\"></i> */}\r\n                            </DropdownToggle>\r\n                        </UncontrolledButtonDropdown>\r\n                        <div className=\"small sidebar__link--muted\">\r\n                            designation\r\n                        </div>\r\n                    </Sidebar.Section>\r\n                </Sidebar.HideSlim>\r\n                { /* END: Sidebar Default */ }\r\n\r\n                { /* START: Sidebar Slim */ }\r\n                <Sidebar.ShowSlim>\r\n                    <Sidebar.Section>\r\n                        <Avatar.Image\r\n                            size=\"sm\"\r\n                        />\r\n                    </Sidebar.Section>\r\n                </Sidebar.ShowSlim>\r\n                { /* END: Sidebar Slim */ }\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SidebarTopA;\r\n","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\components\\Sidebar\\SidebarBottomA.js",["794"],"import React from 'react';\r\n\r\nimport {\r\n    Button,\r\n    Sidebar,\r\n    UncontrolledPopover,\r\n    PopoverBody\r\n} from './../../../components';\r\n\r\nimport { FooterAuth } from '../Pages/FooterAuth';\r\nimport { FooterText } from '../FooterText';\r\nimport { VersionSelector } from '../VersionSelector';\r\n\r\nconst SidebarBottomA = () => (\r\n    <React.Fragment>\r\n        { /* START Desktop */ }\r\n        <Sidebar.HideSlim>\r\n            <span>Sidebar Bottom A</span>\r\n            {/* <Sidebar.Section className=\"pb-0\">\r\n                <VersionSelector sidebar dashboard=\"Airframe\" />\r\n            </Sidebar.Section>\r\n            <Sidebar.Section>\r\n                <FooterAuth className=\"text-muted\" />\r\n            </Sidebar.Section> */}\r\n        </Sidebar.HideSlim>\r\n        { /* END Desktop */ }\r\n\r\n        { /* START Slim Only */ }\r\n        <Sidebar.ShowSlim>\r\n            <Sidebar.Section className=\"text-center\">\r\n                { /* Slim Version Selector */ }\r\n                <VersionSelector\r\n                    dashboard=\"Airframe\"\r\n                    sidebar\r\n                    compact\r\n                    render={() => (\r\n                        <i className=\"fa fa-fw fa-toggle-on\"></i>\r\n                    )}\r\n                />\r\n\r\n                { /* Footer Text as Tooltip */ }\r\n                <Button\r\n                    id=\"UncontrolledSidebarPopoverFooter\"\r\n                    color=\"link\"\r\n                    className=\"sidebar__link p-0 mt-3\"\r\n                >\r\n                    <i className=\"fa fa-fw fa-question-circle-o\"></i>\r\n                </Button>\r\n                <UncontrolledPopover placement=\"left-end\" target=\"UncontrolledSidebarPopoverFooter\">\r\n                    <PopoverBody>\r\n                        <FooterText />\r\n                    </PopoverBody>\r\n                </UncontrolledPopover>\r\n            </Sidebar.Section>\r\n        </Sidebar.ShowSlim>\r\n        { /* END Slim Only */ }\r\n    </React.Fragment>\r\n)\r\n\r\nexport { SidebarBottomA };\r\n","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\layout\\components\\SidebarMiddleNav.js",["795","796","797"],"import React from 'react';\r\nimport MenuListingService from '../../services/MenuListingService'\r\nimport { SidebarMenu } from './../../components';\r\nimport AuthenticationService from '../../services/AuthenticationService';\r\nimport FlatList from 'flatlist-react';\r\n\r\nclass SidebarMiddleNav extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        console.log('props in middleNav>>>', this.props);\r\n    }\r\n\r\n\r\n    dashboard() {\r\n        if ((this.props.data.menuList).includes('Dashboard')) {\r\n            return (<SidebarMenu.Item\r\n                icon={<i className=\"fa fa-fw fa-home\"></i>}\r\n                title=\"Dashboard\"\r\n                to='/dashboard'\r\n                exact\r\n            />);\r\n        }\r\n        else {\r\n            return (<></>);\r\n        }\r\n    }\r\n    mymedicalreport() {\r\n        if ((this.props.data.menuList).includes('My Medical Record')) {\r\n            return (<SidebarMenu.Item\r\n                icon={<i className=\"fa fa-fw fa-heartbeat\"></i>}\r\n                title=\"My Medical Report\"\r\n                to='/mymedicalreport'\r\n                exact\r\n            />);\r\n        }\r\n        else {\r\n            return (<></>);\r\n        }\r\n\r\n\r\n    }\r\n    appointments() {\r\n        if ((this.props.data.menuList).includes('Appointments')) {\r\n            return (<SidebarMenu.Item\r\n                icon={<i className=\"fa fa-fw fa-calendar\"></i>}\r\n                title=\"Appointments\"\r\n                to='/appointments'\r\n                exact\r\n            />);\r\n        }\r\n        else {\r\n            return (<></>);\r\n        }\r\n    }\r\n    patients() {\r\n        if ((this.props.data.menuList).includes('Patients')) {\r\n            return (<SidebarMenu.Item\r\n                icon={<i className=\"fa fa-fw fa-users\"></i>}\r\n                title=\"Patients\"\r\n                to='/patients'\r\n                exact\r\n            />);\r\n        }\r\n        else {\r\n            return (<></>);\r\n        }\r\n\r\n    }\r\n    immunizations() {\r\n        if ((this.props.data.menuList).includes('Immunizations')) {\r\n            return (<SidebarMenu.Item\r\n                icon={<i className=\"fa fa-fw fa-plus-square\"></i>}\r\n                title=\"Immunizations\"\r\n                to='/immunizations'\r\n                exact\r\n            />);\r\n        }\r\n        else {\r\n            return (<></>);\r\n        }\r\n\r\n    }\r\n\r\n    practitioners() {\r\n        if ((this.props.data.menuList).includes('Practitioners')) {\r\n            return (<SidebarMenu.Item\r\n                icon={<i className=\"fa fa-fw fa-stethoscope\"></i>}\r\n                title=\"Practitioners\"\r\n                to='/practitioners'\r\n                exact\r\n            />);\r\n        }\r\n        else {\r\n            return (<></>);\r\n        }\r\n\r\n    }\r\n    providers() {\r\n        if ((this.props.data.menuList).includes('Providers')) {\r\n            return (<SidebarMenu.Item\r\n                icon={<i className=\"fa fa-fw fa-medkit\"></i>}\r\n                title=\"Providers\"\r\n                to='/providers'\r\n                exact\r\n            />);\r\n        }\r\n        else {\r\n            return (<></>);\r\n        }\r\n    }\r\n    vaccines() {\r\n        if ((this.props.data.menuList).includes('Vaccines')) {\r\n            return (<SidebarMenu.Item\r\n                icon={<i className=\"fa fa-fw fa-eyedropper\"></i>}\r\n                title=\"Vaccines\"\r\n                to='/vaccines'\r\n                exact\r\n            />);\r\n        }\r\n        return (<></>);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            \r\n            <SidebarMenu>\r\n                \r\n                {this.dashboard()}\r\n                {this.mymedicalreport()}\r\n                {this.appointments()}\r\n                {this.patients()}\r\n                {this.immunizations()}\r\n                {this.practitioners()}\r\n                {this.providers()}\r\n                {this.vaccines()}\r\n\r\n                <SidebarMenu.Item />\r\n\r\n            </SidebarMenu >\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default SidebarMiddleNav;\r\n","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Layout\\index.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Theme\\index.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Nav\\index.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Navbar\\index.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Sidebar\\index.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\SidebarTrigger\\index.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Avatar\\index.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\ExtendedDropdown\\index.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\IconWithBadge\\index.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\InputGroupAddon\\index.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\SidebarMenu\\index.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\UncontrolledPopover\\index.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\CustomInput\\index.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\EmptyLayout\\index.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\UncontrolledModal\\index.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Card\\index.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\CardHeader\\index.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\FloatGrid\\index.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Progress\\index.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Content\\Appointments.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Content\\DashboardGeneral.js",["798","799","800","801"],"import React from 'react';\r\nimport Config from '../../config/Config'\r\nimport AuthenticationService from '../../services/AuthenticationService'\r\nimport { Container } from './../../components';\r\nimport { HeaderMain } from './../components/HeaderMain';\r\nimport ReCharts from './../Graphs/ReCharts/ReCharts';\r\nclass DashboardGeneral extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n    componentDidMount(){\r\n        if (AuthenticationService.getUser()){\r\n            console.log('succeed');\r\n        }\r\n        else{\r\n            this.props.history.push({\r\n                pathname: \"/login\",\r\n            })\r\n        }\r\n    }\r\n    \r\n    render(){\r\n        return (\r\n            <ReCharts/>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default DashboardGeneral;","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Content\\Immunizations.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Content\\MedicalReport.js",["802","803"],"import React from 'react';\r\nimport { Container } from './../../components';\r\nimport { HeaderMain } from './../components/HeaderMain';\r\nimport MedicalReportService from './../../services/MedicalReportService';\r\nimport AuthenticationService from './../../services/AuthenticationService';\r\nimport Config from './../../config/Config';\r\nimport MedicalReportTable from '../Tables/ExtendedTable/components/MedicalReportTable';\r\n\r\nclass MedicalReport extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        console.log(\"Medical report props>>>\", this.props);\r\n        this.state = {\r\n            patient_detail: '',\r\n            isGettingPatientDetails: false\r\n        }\r\n    }\r\n\r\n    async getNameandEmailOfPatient(){\r\n        try {\r\n            this.setState({\r\n                isGettingPatientDetails: false\r\n            });\r\n            const response = await MedicalReportService.getPatient(this.props.location.patient_id);\r\n            console.log('response data >>>', response);\r\n            if (response.status == true && (response.data.result).length > 0) {\r\n                this.setState({\r\n                    patient_detail: response.data.result[0],\r\n                    isGettingPatientDetails: true\r\n                });\r\n            }\r\n\r\n        }\r\n        catch (e) {\r\n            console.log('error >>>', e);\r\n            console.log(e, e.data);\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n        if (AuthenticationService.getUser()) {\r\n            console.log('profile', Config.getProfileData());\r\n            this.getNameandEmailOfPatient();\r\n        }\r\n        else {\r\n            this.props.history.push({\r\n                pathname: \"/login\",\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container>\r\n                \r\n                <h5><strong>Patient Name:</strong> {this.state.isGettingPatientDetails ? this.state.patient_detail.first_name+\" \"+this.state.patient_detail.last_name : 'No name'}</h5>\r\n                <h5><strong>Patient Email:</strong> {this.state.isGettingPatientDetails ? this.state.patient_detail.email_tx : 'No email Id available'} </h5> <br/><br/>\r\n                <MedicalReportTable {...this.props} />\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MedicalReport;","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Content\\Patients.js",["804"],"import React from 'react';\r\nimport PatientsTable from \"./../Tables/ExtendedTable/components/PatientsTable\";\r\nimport { Container } from \"./../../components\";\r\nimport { HeaderMain } from \"./../components/HeaderMain\";\r\n\r\n\r\nclass Patients extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n    render(){\r\n        return(\r\n            <Container>\r\n                <HeaderMain title=\"Patients\" className=\"mb-5 mt-4\" />\r\n                <PatientsTable {...this.props} />\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Patients;","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Content\\Practitioners.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Content\\Providers.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Content\\Vaccines.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\config\\Endpoint.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Pages\\Login\\Login.js",["805","806","807","808","809"],"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport validator from 'validator';\r\nimport AuthenticationService from '../../../services/AuthenticationService'\r\nimport Config from '../../../config/Config'\r\nimport {\r\n    Form,\r\n    FormGroup,\r\n    FormText,\r\n    Input,\r\n    InputGroup,\r\n    CustomInput,\r\n    Button,\r\n    Label,\r\n    EmptyLayout,\r\n    ThemeConsumer,\r\n    InputGroupAddon,\r\n} from './../../../components';\r\n\r\nimport { HeaderAuth } from \"../../components/Pages/HeaderAuth\";\r\nimport { FooterAuth } from \"../../components/Pages/FooterAuth\";\r\n\r\nclass Login extends React.Component {\r\n    \r\n    constructor(props){\r\n        super();\r\n        this.state = {\r\n            emailId: '',\r\n            password: '',\r\n            emailId_errorMessage: '',\r\n            password_errorMessage: '',\r\n            authenticationMessage: '',\r\n            hidePassword: true,\r\n            color: \"black\",\r\n            isLoading: false,\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        if (AuthenticationService.getUser()){\r\n            console.log('succeed');\r\n            this.props.history.push({\r\n                pathname: \"/dashboard\",\r\n            })\r\n        }\r\n        else{\r\n            this.props.history.push({\r\n                pathname: \"/login\",\r\n            })\r\n        }\r\n    }\r\n\r\n    async Authenticate() {\r\n        this.setState(({\r\n            isLoading: true,\r\n            authenticationMessage: '',\r\n        }))\r\n        if (this.state.emailId == ''){\r\n            this.setState({\r\n                emailId_errorMessage: \"Enter email ID\",\r\n                isLoading: false\r\n            });\r\n            return\r\n        }\r\n        else{\r\n            if (validator.isEmail(this.state.emailId)){\r\n                this.setState({\r\n                    emailId_errorMessage: \"\"\r\n                });\r\n            }\r\n            else{\r\n                this.setState({\r\n                    emailId_errorMessage: \"Enter a valid email ID\",\r\n                    isLoading: false\r\n                })\r\n                return \r\n            }\r\n            \r\n        }\r\n        if (this.state.password == ''){\r\n            this.setState({\r\n                password_errorMessage: \"Enter password\",\r\n                isLoading: false\r\n            });\r\n            return\r\n        }\r\n        else{\r\n            this.setState({\r\n                password_errorMessage: \"\"\r\n            });\r\n            const postData = {\r\n                email: this.state.emailId,\r\n                password: this.state.password\r\n            }\r\n            try{\r\n                const response = await AuthenticationService.Login(postData);\r\n                if (response.status == true) {\r\n                    console.log(response.data);\r\n                    this.setState({\r\n                        color: \"success\",\r\n                        authenticationMessage: \"Login successful\",\r\n                        isLoading: false,\r\n                    });\r\n\r\n                    AuthenticationService.setToken(response.data.access_token);\r\n                    // Config.access_token = response.data.access_token;\r\n                    // Config.role_id = 100;\r\n                    \r\n                    this.props.history.replace({\r\n                        pathname: \"/dashboard\",\r\n                        state: {\r\n                            id: 7,\r\n                            color: 'green'\r\n                        }\r\n                    })  \r\n                    \r\n                    \r\n                }\r\n                else{\r\n                    this.setState({\r\n                        color: \"danger\",\r\n                        isLoading: false,\r\n                        authenticationMessage: response.data.data.error\r\n                    });\r\n                }\r\n            }\r\n            catch (e){\r\n                console.log(e, e.data)      \r\n            }\r\n        }\r\n\r\n    }\r\n    onChangeEmail(value){\r\n        this.setState({\r\n            emailId: value\r\n        });\r\n    }\r\n\r\n    onChangePassword(value){\r\n        this.setState({\r\n            password: value\r\n        })\r\n    }\r\n\r\n    secureEntry(){\r\n        this.setState({\r\n            hidePassword: !this.state.hidePassword,\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <EmptyLayout>\r\n                <EmptyLayout.Section center>\r\n                    { /* START Header */}\r\n                    <HeaderAuth \r\n                        title=\"Login\"\r\n                    />\r\n                    { /* END Header */}\r\n                    { /* START Form */}\r\n                    <Form className=\"mb-3\">\r\n                        <FormGroup>\r\n                            <Label for=\"emailAdress\">\r\n                                Email Address\r\n                            </Label>\r\n                            <InputGroup>\r\n                                    <InputGroupAddon addonType=\"prepend\">\r\n                                        <i className=\"fa fa-fw fa-envelope\"></i>\r\n                                    </InputGroupAddon>\r\n                                    <Input \r\n                                        type=\"email\"\r\n                                        name=\"emailId\" \r\n                                        id=\"emailId\"\r\n                                        placeholder=\"user@example.com\" \r\n                                        className=\"bg-white\"\r\n                                        value={this.state.emailId}\r\n                                        onChange={e => this.onChangeEmail(e.target.value)}\r\n                                        \r\n                                    />\r\n                            </InputGroup>\r\n                            \r\n                            <FormText color=\"danger\">\r\n                                {this.state.emailId_errorMessage}\r\n                            </FormText>\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <Label for=\"password\">\r\n                                Password\r\n                            </Label>\r\n                            <InputGroup>\r\n                                    <InputGroupAddon addonType=\"prepend\">\r\n                                        <i className=\"fa fa-fw fa-lock\"></i>\r\n                                    </InputGroupAddon>\r\n                                    <Input \r\n                                        type={(this.state.hidePassword) ? ('password') : ('text')}\r\n                                        name=\"password\" \r\n                                        id=\"password\"\r\n                                        placeholder=\"Password\" \r\n                                        className=\"bg-white\"\r\n                                        value={this.state.password}\r\n                                        onChange={e => this.onChangePassword(e.target.value)}\r\n                                    />\r\n                                    {(this.state.hidePassword) ?\r\n                                        <InputGroupAddon addonType=\"append\" onClick={() => this.secureEntry()}>\r\n                                            <i className=\"fa fa-fw fa-eye-slash\"></i>\r\n                                        </InputGroupAddon>  \r\n                                        :\r\n                                        <InputGroupAddon addonType=\"append\" onClick={() => this.secureEntry()}>\r\n                                            <i className=\"fa fa-fw fa-eye\"></i>\r\n                                        </InputGroupAddon>  \r\n                                    }\r\n\r\n                            </InputGroup>\r\n                            \r\n                            <FormText color=\"danger\">\r\n                                {this.state.password_errorMessage}\r\n                            </FormText>\r\n                        </FormGroup>\r\n                        <ThemeConsumer>\r\n                        {\r\n                            ({ color }) => (\r\n                                <Button \r\n                                    color={ color } \r\n                                    block \r\n                                    tag={ Link } \r\n                                    onClick={() => this.Authenticate()}\r\n                                    disabled={this.state.isLoading}\r\n                                >\r\n                                {this.state.isLoading ? ('Logging In...') : ('Login')}\r\n                                </Button>\r\n                            )\r\n                        }\r\n                        </ThemeConsumer>\r\n\r\n                        <FormText color={this.state.color}>\r\n                            {this.state.authenticationMessage}\r\n                        </FormText>\r\n                        \r\n                    </Form>\r\n                    <FooterAuth />\r\n                </EmptyLayout.Section>\r\n            </EmptyLayout>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Login;\r\n","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\utilities.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\components\\FooterText.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\components\\VersionSelector.js",["810"],"import React from 'react';\r\nimport fetch from 'node-fetch';\r\nimport classNames from 'classnames';\r\nimport _ from 'lodash';\r\nimport moment from 'moment';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n    UncontrolledButtonDropdown,\r\n    DropdownMenu,\r\n    DropdownItem,\r\n    DropdownToggle\r\n} from './../../components';\r\n\r\nconst SERVICE_URL = \"http://dashboards.webkom.co:8000\";\r\n\r\nexport class VersionSelector extends React.Component {\r\n    static propTypes = {\r\n        dashboard: PropTypes.string,\r\n        down: PropTypes.bool,\r\n        compact: PropTypes.bool,\r\n        render: PropTypes.func,\r\n        className: PropTypes.string,\r\n        sidebar: PropTypes.bool\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            versions: [],\r\n            isError: false,\r\n            render: null\r\n        };\r\n    }\r\n\r\n    async fetchVersions() {\r\n        const { dashboard } = this.props;\r\n        let versions;\r\n        try {\r\n            versions = await fetch(`${SERVICE_URL}/dashboards/versions`)\r\n                .then(response => response.json());\r\n        } catch(exc) {\r\n            this.setState({ isError: true })\r\n        }\r\n        const targetVersions = _.filter(versions, { dashboardName: dashboard });\r\n        \r\n        this.setState({ versions: targetVersions });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchVersions();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.dashboard !== this.props.dashboard) {\r\n            this.fetchVersions();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { down, render, className, sidebar } = this.props;\r\n        const { versions } = this.state;\r\n        const currentVersion = _.find(versions, { label: \"React\" });\r\n\r\n        return (\r\n            <UncontrolledButtonDropdown direction={ down ? \"down\" : \"up\" } className={ className }>\r\n                <DropdownToggle\r\n                    disabled={ _.isEmpty(versions) }\r\n                    tag=\"a\"\r\n                    href=\"javascript:;\"\r\n                    className={classNames(\r\n                        'btn-switch-version',\r\n                        {\r\n                            'sidebar__link': sidebar,\r\n                        }\r\n                    )}\r\n                >\r\n                    {\r\n                        currentVersion ? (\r\n                            render ? render(currentVersion) : (\r\n                                <React.Fragment>\r\n                                    React {currentVersion.version} <i className={`fa ${down ? \"fa-angle-down\" : \"fa-angle-up\"} ml-2`}></i>\r\n                                    <br />\r\n                                    <span className={ classNames('small', { 'sidebar__link--muted': sidebar }) }>\r\n                                        { moment(currentVersion.date).format(\"ddd, MMM DD, YYYY h:mm:ss A\") }\r\n                                    </span>\r\n                                </React.Fragment>\r\n                            )\r\n                        ) : (\r\n                            <span>Loading...</span>\r\n                        )\r\n                    }\r\n                </DropdownToggle>\r\n                {\r\n                    (!_.isEmpty(versions)) && (\r\n                        <DropdownMenu>\r\n                            <DropdownItem header>\r\n                                Bootstrap 4 Versions:\r\n                            </DropdownItem>\r\n                            {\r\n                                _.map(versions, (version, index) => (\r\n                                    <DropdownItem\r\n                                        key={ index }\r\n                                        href={ version.demoUrl }\r\n                                        className=\"d-flex\"\r\n                                        active={ version === currentVersion }\r\n                                    >\r\n                                        <span>\r\n                                            { version.label } { version.version }\r\n                                            <br />\r\n                                            <span className=\"small\">\r\n                                                { moment(version.date).format(\"ddd, MMM DD, YYYY h:mm:ss A\") }\r\n                                            </span>\r\n                                        </span>\r\n                                        {\r\n                                            (version === currentVersion) && (\r\n                                                <i className=\"fa fa-fw fa-check text-success ml-auto align-self-center pl-3\" />\r\n                                            )\r\n                                        }\r\n                                    </DropdownItem>\r\n                                ))\r\n                            }\r\n                        </DropdownMenu>\r\n                    )\r\n                }\r\n            </UncontrolledButtonDropdown>\r\n        );\r\n    }\r\n}","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\components\\Pages\\FooterAuth.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Layout\\LayoutContent.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Layout\\LayoutNavbar.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Layout\\LayoutSidebar.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Layout\\withPageConfig.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Layout\\setupPage.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Layout\\PageConfigContext.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Theme\\ThemeClass.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Theme\\ThemeProvider.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Theme\\ThemeContext.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Nav\\nav.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Navbar\\navbar.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Sidebar\\Sidebar.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Sidebar\\SidebarSection.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Sidebar\\SidebarClose.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Sidebar\\SidebarMobileFluid.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Sidebar\\SidebarShowSlim.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Sidebar\\SidebarHideSlim.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\SidebarTrigger\\SidebarTrigger.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Avatar\\Avatar.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Avatar\\AvatarFont.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Avatar\\AvatarImage.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Avatar\\AvatarAddonBadge.js",["811"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport { Badge } from 'reactstrap';\r\n\r\nconst AvatarAddonBadge = (props) => {\r\n    const { children, ...badgeProps } = props;\r\n\r\n    return (\r\n        <Badge {...badgeProps}>\r\n            { children }\r\n        </Badge>\r\n    );\r\n};\r\nAvatarAddonBadge.propTypes = {\r\n    children: PropTypes.node,\r\n    className: PropTypes.string\r\n};\r\nAvatarAddonBadge.addOnId = \"avatar--badge\";\r\n\r\nexport { AvatarAddonBadge };","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Avatar\\AvatarAddonIcon.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\ExtendedDropdown\\ExtendedDropdown.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\ExtendedDropdown\\ExtendedDropdownSection.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\ExtendedDropdown\\ExtendedDropdownLink.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\IconWithBadge\\IconWithBadge.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\InputGroupAddon\\InputGroupAddon.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\UncontrolledPopover\\UncontrolledPopover.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\CustomInput\\CustomInput.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\EmptyLayout\\EmptyLayout.js",["812"],"import React from 'react';\r\nimport _ from 'lodash';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport {\r\n    withPageConfig\r\n} from './../../components/Layout';\r\n\r\nclass EmptyLayout extends React.Component {\r\n    static propTypes = {\r\n        pageConfig: PropTypes.object.isRequired,\r\n        children: PropTypes.node.isRequired,\r\n        className: PropTypes.string\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.props.pageConfig.setElementsVisibility({\r\n            navbarHidden: true,\r\n            sidebarHidden: true,\r\n            footerHidden: true \r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.pageConfig.setElementsVisibility({\r\n            navbarHidden: false,\r\n            sidebarHidden: false,\r\n            footerHidden: false \r\n        });\r\n    }\r\n\r\n    render() {\r\n        const emptyLayoutClass = classNames('fullscreen', this.props.className);\r\n\r\n        return (\r\n            <div className={ emptyLayoutClass }>\r\n                { this.props.children }\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nconst PageConfigEmptyLayout = withPageConfig(EmptyLayout);\r\n\r\nexport {\r\n    PageConfigEmptyLayout as EmptyLayout\r\n};\r\n","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\components\\HeaderMain.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Progress\\Progress.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\FloatGrid\\Ready.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\SidebarMenu\\SidebarMenu.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\SidebarMenu\\SidebarMenuItem.js",["813","814"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\nimport classNames from 'classnames';\r\nimport uuid from 'uuid/v4';\r\n\r\nimport { MenuContext } from './MenuContext';\r\n\r\n/**\r\n * Renders a collapse trigger or a ReactRouter Link \r\n */\r\nconst SidebarMenuItemLink = (props) => (\r\n    (props.to || props.href) ? (\r\n        props.to ? (\r\n            <Link to={ props.to } className={`${props.classBase}__entry__link`}>\r\n                { props.children }\r\n            </Link>\r\n        ) : (\r\n            <a\r\n                href={ props.href }\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n                className={`${props.classBase}__entry__link`}\r\n            >\r\n                { props.children }\r\n            </a>\r\n        )\r\n        \r\n    ) : (\r\n        <a\r\n            href=\"javascript:;\"\r\n            className={`${props.classBase}__entry__link`}\r\n            onClick={ () => props.onToggle() }\r\n        >\r\n            { props.children }\r\n        </a>\r\n    )\r\n)\r\nSidebarMenuItemLink.propTypes = {\r\n    to: PropTypes.string,\r\n    href: PropTypes.string,\r\n    active: PropTypes.bool,\r\n    onToggle: PropTypes.func,\r\n    children: PropTypes.node,\r\n    classBase: PropTypes.string\r\n}\r\n\r\n/**\r\n * The main menu entry component\r\n */\r\nexport class SidebarMenuItem extends React.Component {\r\n    static propTypes = {\r\n        // MenuContext props\r\n        addEntry: PropTypes.func,\r\n        updateEntry: PropTypes.func,\r\n        removeEntry: PropTypes.func,\r\n        entries: PropTypes.object,\r\n        // Provided props\r\n        parentId: PropTypes.string,\r\n        children: PropTypes.node,\r\n        isSubNode: PropTypes.bool,\r\n        currentUrl: PropTypes.string,\r\n        slim: PropTypes.bool,\r\n        // User props\r\n        icon: PropTypes.node,\r\n        title: PropTypes.oneOfType([\r\n            PropTypes.string,\r\n            PropTypes.node\r\n        ]),\r\n        to: PropTypes.string,\r\n        href: PropTypes.string,\r\n        exact: PropTypes.bool,\r\n        noCaret: PropTypes.bool,\r\n    }\r\n\r\n    static defaultProps = {\r\n        exact: true\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.id = uuid();\r\n    }\r\n\r\n    componentDidMount() {\r\n        const entry = {\r\n            id: this.id,\r\n            parentId: this.props.parentId,\r\n            exact: !!this.props.exact\r\n        };\r\n        \r\n        if (this.props.to) {\r\n            entry.url = this.props.to;\r\n        }\r\n\r\n        this.props.addEntry(entry);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.removeEntry(this.id);\r\n    }\r\n\r\n    getEntry() {\r\n        return this.props.entries[this.id];\r\n    }\r\n\r\n    toggleNode() {\r\n        const entry = this.getEntry();\r\n\r\n        this.props.updateEntry(this.id, { open: !entry.open });\r\n    }\r\n\r\n    render() {\r\n        const entry = this.getEntry();\r\n        const classBase = this.props.isSubNode ? \"sidebar-submenu\" : \"sidebar-menu\";\r\n        const itemClass = classNames(`${classBase}__entry`, {\r\n            [`${classBase}__entry--nested`]: !!this.props.children,\r\n            'open': entry && entry.open,\r\n            'active': entry && entry.active\r\n        });\r\n\r\n        return (\r\n            <li\r\n                className={classNames(itemClass, {\r\n                    'sidebar-menu__entry--no-caret': this.props.noCaret,\r\n                })}\r\n            >\r\n                <SidebarMenuItemLink\r\n                    to={ this.props.to || null }\r\n                    href={ this.props.href || null }\r\n                    onToggle={ this.toggleNode.bind(this) }\r\n                    classBase={ classBase }\r\n                >\r\n                    {\r\n                        this.props.icon && React.cloneElement(this.props.icon, {\r\n                            className: classNames(\r\n                                this.props.icon.props.className,\r\n                                `${classBase}__entry__icon`\r\n                            )\r\n                        })\r\n                    }\r\n                    {\r\n                        typeof this.props.title === 'string' ?\r\n                            <span>{ this.props.title }</span> :\r\n                            this.props.title\r\n                    }\r\n                </SidebarMenuItemLink>\r\n                {\r\n                    this.props.children && (\r\n                        <ul className=\"sidebar-submenu\">\r\n                        {\r\n                            React.Children.map(this.props.children, (child) => (\r\n                                <MenuContext.Consumer>\r\n                                {\r\n                                    (ctx) => React.cloneElement(child, {\r\n                                        isSubNode: true,\r\n                                        parentId: this.id,\r\n                                        currentUrl: this.props.currentUrl,\r\n                                        slim: this.props.slim,\r\n                                        ...ctx\r\n                                    })\r\n                                }\r\n                                </MenuContext.Consumer>\r\n                            ))\r\n                        }\r\n                        </ul>\r\n                    )\r\n                }\r\n            </li>\r\n        );\r\n    }\r\n}\r\n","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\CardHeader\\CardHeader.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Card\\Card.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\UncontrolledModal\\UncontrolledModalSave.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\UncontrolledModal\\UncontrolledModalClose.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\UncontrolledModal\\UncontrolledModal.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\EmptyLayout\\EmptyLayoutSection.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Theme\\ThemeSelector.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\FloatGrid\\Grid.js",["815"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\nimport { Container } from 'reactstrap';\r\nimport { FloatGridContext } from './floatGridContext';\r\nimport './../../styles/components/float-grid.scss';\r\n\r\nexport class Grid extends React.Component {\r\n    static propTypes = {\r\n        active: PropTypes.bool,\r\n        children: PropTypes.node,\r\n        fluid: PropTypes.bool,\r\n        rowHeight: PropTypes.number,\r\n        className: PropTypes.string\r\n    }\r\n\r\n    static defaultProps = {\r\n        active: true,\r\n        fluid: false,\r\n        rowHeight: 100\r\n    }\r\n\r\n    state = {\r\n        gridSize: { w: 0, h: 0 },\r\n        gridReady: false,\r\n    }\r\n    _gridRef = React.createRef();\r\n    _resizeDebounceTimeout = 0;\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            gridSize: {\r\n                w: this._gridRef.current.clientWidth,\r\n                h: this._gridRef.current.clientHeight\r\n            }\r\n        });\r\n\r\n        if (typeof window !== 'undefined') {\r\n            window.addEventListener('resize', this._resizeHandler);\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(nextProps) {\r\n        // HACK\r\n        if (\r\n            typeof window !== 'undefined' &&\r\n            nextProps.fluid !== this.props.fluid\r\n        ) {\r\n            window.dispatchEvent(new Event('resize'));\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (typeof window !== 'undefined') {\r\n            window.removeEventListener('resize', this._resizeHandler);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { active, children, fluid, className, rowHeight, ...otherProps } = this.props;\r\n        const { gridSize } = this.state;\r\n        const modifiedChildren = React.Children.map(children, child => (\r\n            React.cloneElement(child, {\r\n                ...otherProps,\r\n                active,\r\n                gridSize\r\n            })\r\n        ));\r\n\r\n        const floatWrapClasses = classNames({\r\n            ['float-grid-parent__static']: !fluid\r\n        }, className, 'float-grid-parent');\r\n\r\n        return(\r\n            <FloatGridContext.Provider\r\n                value={{\r\n                    gridUnitsToPx: (w, h) => {\r\n                        return {\r\n                            wPx: w / 12 * gridSize.w,\r\n                            hPx: h * rowHeight\r\n                        }\r\n                    },\r\n                    active,\r\n                    gridReady: this.state.gridReady,\r\n                    setGridReady: () => { this.setState({ gridReady: true }) }\r\n                }}\r\n            >\r\n                {\r\n                    active ? (\r\n                        <div\r\n                            className={ floatWrapClasses }\r\n                            ref={ this._gridRef }\r\n                        >\r\n                            { modifiedChildren }\r\n                        </div>\r\n                    ) : (\r\n                        <div ref={ this._gridRef }>\r\n                            <Container fluid={ fluid } className={ className } { ...otherProps }>\r\n                                { modifiedChildren }\r\n                            </Container>\r\n                        </div>\r\n                    )\r\n                }\r\n                \r\n            </FloatGridContext.Provider>\r\n        );\r\n    }\r\n\r\n    _resizeHandler = () => {\r\n        clearInterval(this._resizeDebounceTimeout);\r\n\r\n        this._resizeDebounceTimeout = setTimeout(() => {\r\n            this.setState({\r\n                gridSize: {\r\n                    w: this._gridRef.current.clientWidth,\r\n                    h: this._gridRef.current.clientHeight\r\n                }\r\n            });\r\n        }, 1000 / 60 * 10); //Every 10 frames debounce\r\n    }\r\n}\r\n","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\FloatGrid\\Col.js",["816"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport _ from 'lodash';\r\nimport classNames from 'classnames';\r\n\r\nimport { Col as BootstrapCol } from 'reactstrap';\r\n\r\n// Twice Smaller than Bootstrap breakpoints\r\nconst breakPoints = [\r\n    { id: 'xl', min: 600 },\r\n    { id: 'lg', min: 496, max: 600 },\r\n    { id: 'md', min: 384, max: 496 },\r\n    { id: 'sm', min: 288, max: 384 },\r\n    { id: 'xs', max: 288 }\r\n];\r\n\r\nconst getCurrentbreakPoint = (width, breakPoints) => {\r\n    let output = 'xl';\r\n    for (let bp of breakPoints) {\r\n        if (\r\n            (_.isUndefined(bp.min) || bp.min <= width) &&\r\n            (_.isUndefined(bp.max) || bp.max > width)\r\n        ) {\r\n            output = bp.id;\r\n        }\r\n    }\r\n    return output;\r\n};\r\n\r\nexport class Col extends React.Component {\r\n    static propTypes = {\r\n        active: PropTypes.bool,\r\n\r\n        lg: PropTypes.number,\r\n        md: PropTypes.number,\r\n        sm: PropTypes.number,\r\n        xs: PropTypes.number,\r\n        xl: PropTypes.number,\r\n\r\n        xlH: PropTypes.number,\r\n        lgH: PropTypes.number,\r\n        mdH: PropTypes.number,\r\n        smH: PropTypes.number,\r\n        xsH: PropTypes.number,\r\n\r\n        xlX: PropTypes.number,\r\n        lgX: PropTypes.number,\r\n        mdX: PropTypes.number,\r\n        smX: PropTypes.number,\r\n        xsX: PropTypes.number,\r\n\r\n        xlY: PropTypes.number,\r\n        lgY: PropTypes.number,\r\n        mdY: PropTypes.number,\r\n        smY: PropTypes.number,\r\n        xsY: PropTypes.number, \r\n\r\n        trueSize: PropTypes.object,\r\n        children: PropTypes.node,\r\n        className: PropTypes.string\r\n    }\r\n\r\n    static defaultProps = {\r\n        active: true\r\n    }\r\n\r\n    render() {\r\n        const { active, children, className, trueSize } = this.props;\r\n        const bsColumnProps = _.pick(this.props, ['xl', 'lg', 'md', 'sm', 'xs']);\r\n        const otherProps = _.omit(this.props, [..._.keys(Col.propTypes),\r\n            'minW', 'maxW', 'minH', 'maxH', 'moved', 'static', 'isDraggable', 'isResizable']);\r\n        const floatColBpId = trueSize ? getCurrentbreakPoint(trueSize.wPx, breakPoints) : 'xl';\r\n        const floatColClasses = classNames(className, 'float-col',\r\n            'float-column', `float-column--size-${floatColBpId}`);\r\n\r\n        return active ? (\r\n            <div { ...otherProps } className={ floatColClasses }>\r\n                { children }\r\n            </div>\r\n        ) : (\r\n            <BootstrapCol\r\n                { ...(_.extend(bsColumnProps, otherProps)) }\r\n                className={ classNames(className, 'pb-3') }\r\n            >\r\n                { children }\r\n            </BootstrapCol>\r\n        );\r\n    }\r\n}\r\n","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\FloatGrid\\Row.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Layout\\Layout.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\components\\Pages\\HeaderAuth.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\ReCharts.js",["817","818","819","820","821","822","823","824","825","826","827","828","829","830","831","832","833","834","835","836","837","838","839","840","841","842","843","844","845","846","847"],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Tables\\ExtendedTable\\components\\VaccinesTable.js",["848","849","850","851","852","853","854","855","856","857","858","859","860","861","862"],"import React from \"react\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\r\nimport filterFactory, {\r\n    Comparator,\r\n    dateFilter,\r\n} from \"react-bootstrap-table2-filter\";\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\nimport _ from \"lodash\";\r\nimport moment from \"moment\";\r\n\r\nimport {\r\n  Button,\r\n  ButtonGroup,\r\n  UncontrolledModal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  Col,\r\n  Input,\r\n  InputGroup,\r\n  InputGroupAddon,\r\n  FormText,\r\n  ModalFooter,\r\n  Label,\r\n  CustomInput,\r\n  Form,\r\n  FormGroup,\r\n} from \"../../../../components\";\r\nimport { CustomExportCSV } from \"./CustomExportButton\";\r\nimport { CustomSearch } from \"./CustomSearch\";\r\nimport { CustomPaginationPanel } from \"./CustomPaginationPanel\";\r\nimport { CustomSizePerPageButton } from \"./CustomSizePerPageButton\";\r\nimport { CustomPaginationTotal } from \"./CustomPaginationTotal\";\r\n\r\nimport VaccinesService from './../../../../services/VaccinesService';\r\nimport AuthenticationService from './../../../../services/AuthenticationService';\r\n\r\nconst sortCaret = (order) => {\r\n    if (!order) return <i className=\"fa fa-fw fa-sort text-muted\"></i>;\r\n    if (order) return <i className={`fa fa-fw text-muted fa-sort-${order}`}></i>;\r\n};\r\n\r\nexport default class VaccinesTable extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      vaccinesList: [],\r\n      name: \"\",\r\n      dose: 1,\r\n      description: \"\",\r\n      name_errorMessage: \"\",\r\n      description_errorMessage: \"\",\r\n      authenticationMessage: \"\",\r\n      color: \"black\",\r\n      isLoading: false,\r\n      nextPage: \"\",\r\n      previousPage: \"\",\r\n      archiveMessage: \"\",\r\n      isArchiving: false,\r\n      isGettingData: false\r\n    };\r\n\r\n    this.headerCheckboxRef = React.createRef();\r\n  }\r\n  componentDidMount = async () => {\r\n    if (AuthenticationService.getUser()) {\r\n      this.getList();\r\n    } else {\r\n      this.props.history.push({\r\n        pathname: \"/login\",\r\n      });\r\n    }\r\n  };\r\n\r\n  getList = async (page = null, search = null) => {\r\n    try {\r\n      this.setState({\r\n        isGettingData: true\r\n      });\r\n      const paramData = {\r\n        page: page,\r\n        search: search,\r\n      };\r\n      const response = await VaccinesService.getVaccines(paramData);\r\n      if (response.status == true) {\r\n        this.setState({\r\n          vaccinesList: response.data.result,\r\n          nextPage: response.data.next_page,\r\n          previousPage: response.data.previous_page,\r\n          isGettingData: false\r\n        });\r\n      }\r\n    } catch (e) {\r\n      console.log(\"error >>>\", e);\r\n      console.log(e, e.data);\r\n    }\r\n  };\r\n\r\n  handleAdministered(cell, row) {\r\n    console.log(\"vaccine handle\", row.vaccine_id);\r\n    this.props.history.push({\r\n      pathname: \"/immunizations\",\r\n      vaccine_id: row.vaccine_id,\r\n    });\r\n  }\r\n\r\n  async handleArchive(cell, row) {\r\n    console.log(\r\n      \"Archive button clicked, active flag:\",\r\n      row.active_fl,\r\n      row.vaccine_id\r\n    );\r\n    const data = {\r\n      vaccine_id: row.vaccine_id,\r\n    };\r\n    try {\r\n      this.setState({\r\n        isArchiving: true,\r\n      });\r\n      const response = await VaccinesService.archiveVaccine(data);\r\n      if (response.status == true) {\r\n        console.log(response.data);\r\n        this.setState({\r\n          archiveMessage: \"Vaccine archived successfully\",\r\n          isArchiving: false,\r\n        });\r\n        this.getList();\r\n      } else {\r\n        this.setState({\r\n          archiveMessage: response.data.data.error,\r\n          isArchiving: false,\r\n        });\r\n      }\r\n      console.log(\"archive vaccine>>>\", this.state.archiveMessage);\r\n    } catch (e) {\r\n      console.log(e, e.data);\r\n    }\r\n  }\r\n\r\n  actionButton = (cell, row) => {\r\n    return (\r\n      <ButtonGroup>\r\n        <Button\r\n          size=\"sm\"\r\n          outline\r\n          color=\"indigo\"\r\n          onClick={() => this.handleAdministered(cell, row)}\r\n        >\r\n          Administered to\r\n        </Button>\r\n        <Button\r\n          size=\"sm\"\r\n          color=\"danger\"\r\n          outline\r\n          onClick={() => this.handleArchive(cell, row)}\r\n          disabled={this.state.isArchiving}\r\n        >\r\n          {this.state.isArchiving ? \"Archiving...\" : \"Archive\"}\r\n        </Button>\r\n      </ButtonGroup>\r\n    );\r\n  };\r\n\r\n  createColumnDefinitions() {\r\n    return [\r\n      {\r\n        dataField: \"vaccine_id\",\r\n        hidden: true,\r\n        isKey: true,\r\n      },\r\n      {\r\n        dataField: \"name_tx\",\r\n        text: \"Vaccine Name\",\r\n        sort: true,\r\n        // align: \"center\",\r\n        sortCaret,\r\n        formatter: (cell) => <span className=\"text-inverse\">{cell}</span>,\r\n      },\r\n      {\r\n        dataField: \"doses_required\",\r\n        text: \"Dose Required\",\r\n        sort: true,\r\n        // align: \"center\",\r\n        sortCaret,\r\n        formatter: (cell) => <span className=\"text-inverse\">{cell}</span>,\r\n        // ...buildCustomTextFilter({\r\n        //   placeholder: \"Enter Vaccine name...\",\r\n        //   getFilter: (filter) => {\r\n        //     this.nameFilter = filter;\r\n        //   },\r\n        // }),\r\n      },\r\n      {\r\n        dataField: \"created_dt\",\r\n        text: \"Date Added\",\r\n        formatter: (cell) => moment(cell).format(\"DD/MM/YYYY\"),\r\n        sort: true,\r\n        sortCaret,\r\n      },\r\n      {\r\n        text: \"Action\",\r\n\r\n        // events: {\r\n        //   onClick: (e, column, row, rowIndex) => {console.log(rowIndex)}\r\n        // },\r\n\r\n        formatter: this.actionButton,\r\n      },\r\n    ];\r\n  }\r\n\r\n  onChangeName(value) {\r\n    this.setState({\r\n      name: value,\r\n    });\r\n  }\r\n\r\n  onChangeDose(value) {\r\n    this.setState({\r\n      dose: parseInt(value),\r\n    });\r\n  }\r\n\r\n  onChangeDescription(value) {\r\n    this.setState({\r\n      description: value,\r\n    });\r\n  }\r\n\r\n  async addVaccine() {\r\n    this.setState({\r\n      isLoading: true,\r\n      authenticationMessage: \"\",\r\n    });\r\n    if (this.state.name == \"\") {\r\n      this.setState({\r\n        name_errorMessage: \"Enter vaccine name\",\r\n        isLoading: false,\r\n      });\r\n      return;\r\n    } else {\r\n      this.setState({\r\n        name_errorMessage: \"\",\r\n      });\r\n    }\r\n\r\n    if (this.state.description == \"\") {\r\n      this.setState({\r\n        description_errorMessage: \"Enter vaccine description\",\r\n        isLoading: false,\r\n      });\r\n      return;\r\n    } else {\r\n      this.setState({\r\n        description_errorMessage: \"\",\r\n      });\r\n      const postData = {\r\n        name_tx: this.state.name,\r\n        doses_required: this.state.dose,\r\n        description_tx: this.state.description,\r\n      };\r\n      try {\r\n        console.log(\"postData >>>\", postData);\r\n        const response = await VaccinesService.createVaccine(postData);\r\n        if (response.status == true) {\r\n          console.log(response.data);\r\n          this.setState({\r\n            color: \"success\",\r\n            authenticationMessage: response.data.message,\r\n            isLoading: false,\r\n          });\r\n          this.getList();\r\n        } else {\r\n          this.setState({\r\n            color: \"danger\",\r\n            isLoading: false,\r\n            authenticationMessage: response.data.data.error,\r\n          });\r\n        }\r\n      } catch (e) {\r\n        console.log(e, e.data);\r\n      }\r\n    }\r\n  }\r\n  handleCallback = async (childData) => {\r\n    this.getList(null, childData);\r\n  };\r\n\r\n  render() {\r\n    const columnDefs = this.createColumnDefinitions();\r\n\r\n    return (\r\n      <ToolkitProvider\r\n        keyField=\"id\"\r\n        data={this.state.vaccinesList}\r\n        columns={columnDefs}\r\n        search\r\n        exportCSV\r\n      >\r\n        {(props) => (\r\n          <React.Fragment>\r\n            <div className=\"d-flex justify-content-end align-items-center mb-2\">\r\n              {/* <h6 className=\"my-0\">\r\n                                AdvancedTable A\r\n                            </h6> */}\r\n              <div className=\"d-flex ml-auto\">\r\n                <CustomSearch\r\n                  className=\"mr-2\"\r\n                  {...props.searchProps}\r\n                  parentCallBack={this.handleCallback}\r\n                />\r\n                <ButtonGroup>\r\n                  <Button size=\"sm\" outline id=\"modalDefault301\">\r\n                    <i className=\"fa fa-fw fa-plus\"></i>\r\n                  </Button>\r\n                  <UncontrolledModal\r\n                    target=\"modalDefault301\"\r\n                    className=\"modal-outline-primary\"\r\n                  >\r\n                    <ModalHeader tag=\"h5\">New Vaccine</ModalHeader>\r\n                    <ModalBody>\r\n                      <Form>\r\n                        {/* START Input */}\r\n                        <FormGroup row>\r\n                          <Label for=\"name\" sm={4}>\r\n                            Vaccine Name\r\n                          </Label>\r\n                          <Col sm={8}>\r\n                            <Input\r\n                              type=\"text\"\r\n                              name=\"name\"\r\n                              id=\"name\"\r\n                              placeholder=\"Vaccine name\"\r\n                              value={this.state.name}\r\n                              onChange={(e) =>\r\n                                this.onChangeName(e.target.value)\r\n                              }\r\n                            />\r\n                            <FormText color=\"danger\">\r\n                              {this.state.name_errorMessage}\r\n                            </FormText>\r\n                          </Col>\r\n                        </FormGroup>\r\n                        {/* END Input */}\r\n                        {/* START Radios */}\r\n                        <FormGroup row>\r\n                          <Label for=\"doses_required\" sm={4} className=\"pt-0\">\r\n                            Doses Required\r\n                          </Label>\r\n                          <Col sm={8}>\r\n                            <CustomInput\r\n                              type=\"radio\"\r\n                              id=\"doses_required1\"\r\n                              name=\"doses_required\"\r\n                              label=\"1\"\r\n                              inline\r\n                              defaultChecked\r\n                              value={1}\r\n                              // checked={this.state.dose === 1}\r\n                              onChange={(e) =>\r\n                                this.onChangeDose(e.target.value)\r\n                              }\r\n                            />\r\n                            <CustomInput\r\n                              type=\"radio\"\r\n                              id=\"doses_required2\"\r\n                              name=\"doses_required\"\r\n                              label=\"2\"\r\n                              inline\r\n                              value={2}\r\n                              // checked={this.state.dose === 2}\r\n                              onChange={(e) =>\r\n                                this.onChangeDose(e.target.value)\r\n                              }\r\n                            />\r\n                            <CustomInput\r\n                              type=\"radio\"\r\n                              id=\"doses_required3\"\r\n                              name=\"doses_required\"\r\n                              label=\"3\"\r\n                              inline\r\n                              value={3}\r\n                              // checked={this.state.dose === 2}\r\n                              onChange={(e) =>\r\n                                this.onChangeDose(e.target.value)\r\n                              }\r\n                            />\r\n                            <CustomInput\r\n                              type=\"radio\"\r\n                              id=\"doses_required4\"\r\n                              name=\"doses_required\"\r\n                              label=\"4\"\r\n                              inline\r\n                              value={4}\r\n                              // checked={this.state.dose === 2}\r\n                              onChange={(e) =>\r\n                                this.onChangeDose(e.target.value)\r\n                              }\r\n                            />\r\n                            <CustomInput\r\n                              type=\"radio\"\r\n                              id=\"doses_required5\"\r\n                              name=\"doses_required\"\r\n                              label=\"5\"\r\n                              inline\r\n                              value={5}\r\n                              // checked={this.state.dose === 2}\r\n                              onChange={(e) =>\r\n                                this.onChangeDose(e.target.value)\r\n                              }\r\n                            />\r\n                          </Col>\r\n                        </FormGroup>\r\n                        {/* END Radios */}\r\n                        <FormGroup row>\r\n                          <Label for=\"message-1\" sm={4}>\r\n                            Description\r\n                          </Label>\r\n                          <Col sm={8}>\r\n                            <Input\r\n                              type=\"textarea\"\r\n                              name=\"text\"\r\n                              maxLength=\"500\"\r\n                              id=\"message-1\"\r\n                              placeholder=\"Vaccine description...\"\r\n                              className=\"mb-2\"\r\n                              value={this.state.description}\r\n                              onChange={(e) =>\r\n                                this.onChangeDescription(e.target.value)\r\n                              }\r\n                            />\r\n                          </Col>\r\n                        </FormGroup>\r\n                      </Form>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                      <FormText color={this.state.color}>\r\n                        {this.state.authenticationMessage}\r\n                      </FormText>\r\n                      <UncontrolledModal.Close color=\"link\">\r\n                        Close\r\n                      </UncontrolledModal.Close>\r\n                      <Button\r\n                        color=\"primary\"\r\n                        onClick={() => this.addVaccine()}\r\n                        disabled={this.state.isLoading}\r\n                      >\r\n                        {this.state.isLoading\r\n                          ? \"Adding Vaccine...\"\r\n                          : \"Add Vaccine\"}\r\n                      </Button>\r\n                    </ModalFooter>\r\n                  </UncontrolledModal>\r\n                </ButtonGroup>\r\n              </div>\r\n            </div>\r\n            <BootstrapTable\r\n              classes=\"table-responsive-sm\"\r\n              filter={filterFactory()}\r\n              bordered={false}\r\n              responsive\r\n              noDataIndication={this.state.isGettingData ? 'Getting vaccines...' : 'No vaccines found!'}\r\n              {...props.baseProps}\r\n            />\r\n\r\n            <ButtonGroup>\r\n              <Button\r\n                size=\"sm\"\r\n                outline\r\n                onClick={() => {\r\n                  this.getList(this.state.previousPage, null);\r\n                }}\r\n                disabled={this.state.previousPage ? false : true}\r\n              >\r\n                <i className=\"fa fa-fw fa-chevron-left\"></i>\r\n              </Button>\r\n              <Button\r\n                size=\"sm\"\r\n                outline\r\n                onClick={() => {\r\n                  this.getList(this.state.nextPage, null);\r\n                }}\r\n                disabled={this.state.nextPage ? false : true}\r\n              >\r\n                <i className=\"fa fa-fw fa-chevron-right\"></i>\r\n              </Button>\r\n            </ButtonGroup>\r\n          </React.Fragment>\r\n        )}\r\n      </ToolkitProvider>\r\n    );\r\n  }\r\n}\r\n","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Tables\\ExtendedTable\\components\\ProvidersTable.js",["863","864","865","866","867","868","869","870","871","872","873","874","875","876","877","878","879","880"],"import React from \"react\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\r\nimport filterFactory, {\r\n  Comparator,\r\n  dateFilter,\r\n} from \"react-bootstrap-table2-filter\";\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\nimport _ from \"lodash\";\r\nimport moment from \"moment\";\r\nimport validator from \"validator\";\r\n\r\nimport {\r\n  // Badge,\r\n  Button,\r\n  // CustomInput,\r\n  // StarRating,\r\n  ButtonGroup,\r\n  UncontrolledModal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  Col,\r\n  Input,\r\n  InputGroup,\r\n  InputGroupAddon,\r\n  FormText,\r\n  ModalFooter,\r\n  Label,\r\n  Form,\r\n  FormGroup,\r\n} from \"../../../../components\";\r\nimport { CustomExportCSV } from \"./CustomExportButton\";\r\nimport { CustomSearch } from \"./CustomSearch\";\r\nimport { CustomPaginationPanel } from \"./CustomPaginationPanel\";\r\nimport { CustomSizePerPageButton } from \"./CustomSizePerPageButton\";\r\nimport { CustomPaginationTotal } from \"./CustomPaginationTotal\";\r\nimport { buildCustomTextFilter } from \"../filters\";\r\n\r\nimport ProvidersService from \"./../../../../services/ProvidersService\";\r\nimport AuthenticationService from \"./../../../../services/AuthenticationService\";\r\n\r\nconst sortCaret = (order) => {\r\n  if (!order) return <i className=\"fa fa-fw fa-sort text-muted\"></i>;\r\n  if (order) return <i className={`fa fa-fw text-muted fa-sort-${order}`}></i>;\r\n};\r\n\r\nexport default class ProviderTable extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      providersList: [],\r\n      name: \"\",\r\n      emailId: \"\",\r\n      password: \"\",\r\n      name_errorMessage: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      emailId_errorMessage: \"\",\r\n      password_errorMessage: \"\",\r\n      authenticationMessage: \"\",\r\n      hidePassword: true,\r\n      color: \"black\",\r\n      isLoading: false,\r\n      name: \"\",\r\n      nextPage: \"\",\r\n      previousPage: \"\",\r\n      searchValue: null,\r\n      archiveMessage: \"\",\r\n      isGettingData: false\r\n    };\r\n\r\n    this.headerCheckboxRef = React.createRef();\r\n  }\r\n\r\n  getList = async (page = null, search = null) => {\r\n    try {\r\n      this.setState({\r\n        isGettingData: true\r\n      });\r\n      const paramData = {\r\n        page: page,\r\n        search: search,\r\n      };\r\n      const response = await ProvidersService.getList(paramData);\r\n      if (response.status == true) {\r\n        this.setState({\r\n          providersList: response.data.result,\r\n          nextPage: response.data.next_page,\r\n          previousPage: response.data.previous_page,\r\n          isGettingData: false\r\n        });\r\n      }\r\n    } catch (e) {\r\n      console.log(\"error >>>\", e);\r\n      console.log(e, e.data);\r\n    }\r\n  };\r\n\r\n  componentDidMount = async () => {\r\n    if (AuthenticationService.getUser()) {\r\n      this.getList();\r\n    } else {\r\n      this.props.history.push({\r\n        pathname: \"/login\",\r\n      });\r\n    }\r\n  };\r\n\r\n  handlePractitionersOnClick(cell, row) {\r\n    console.log(\"Practitioners Button clicked, rowId:\", row.provider_id);\r\n    // console.log(this.props);\r\n    this.props.history.push({\r\n      pathname: \"/practitioners\",\r\n      provider_id: row.provider_id,\r\n    });\r\n    // return <Redirect to='/practitioners' />\r\n    // <Link to='/practitioners' />\r\n  }\r\n\r\n  handleAppointmentsOnClick(cell, row) {\r\n    console.log(\"Appointments button clicked, rowId:\", row.provider_id);\r\n    this.props.history.push({\r\n      pathname: \"/appointments\",\r\n      provider_id: row.provider_id,\r\n    });\r\n  }\r\n\r\n  async handleArchiveOnClick(cell, row) {\r\n    console.log(\r\n      \"Archive button clicked, active flag:\",\r\n      row.active_fl,\r\n      row.provider_id\r\n    );\r\n    const data = {\r\n      provider_id: row.provider_id,\r\n    };\r\n    try {\r\n      this.setState({\r\n        isArchiving: true,\r\n      });\r\n      const response = await ProvidersService.archiveProvider(data);\r\n      if (response.status == true) {\r\n        console.log(response.data);\r\n        this.setState({\r\n          archiveMessage: \"Provider archived successfully\",\r\n          isArchiving: false,\r\n        });\r\n        this.getList();\r\n      } else {\r\n        this.setState({\r\n          archiveMessage: response.data.data.error,\r\n          isArchiving: false,\r\n        });\r\n      }\r\n      console.log(\"archive provider>>>\", this.state.archiveMessage);\r\n    } catch (e) {\r\n      console.log(e, e.data);\r\n    }\r\n  }\r\n\r\n  actionColButton = (cell, row) => {\r\n    return (\r\n      <ButtonGroup>\r\n        <Button\r\n          size=\"sm\"\r\n          outline\r\n          color=\"primary\"\r\n          onClick={() => this.handlePractitionersOnClick(cell, row)}\r\n        >\r\n          Practitioners\r\n        </Button>\r\n        <Button\r\n          size=\"sm\"\r\n          outline\r\n          color=\"danger\"\r\n          onClick={() => this.handleArchiveOnClick(cell, row)}\r\n          disabled={this.state.isArchiving}\r\n        >Archive\r\n        </Button>\r\n      </ButtonGroup>\r\n    );\r\n  };\r\n\r\n  secureEntry() {\r\n    this.setState({\r\n      hidePassword: !this.state.hidePassword,\r\n    });\r\n  }\r\n\r\n  onChangeName(value) {\r\n    this.setState({\r\n      name: value,\r\n    });\r\n  }\r\n\r\n  onChangeEmail(value) {\r\n    this.setState({\r\n      emailId: value,\r\n    });\r\n  }\r\n\r\n  onChangePassword(value) {\r\n    this.setState({\r\n      password: value,\r\n    });\r\n  }\r\n\r\n  async CreateProvider() {\r\n    this.setState({\r\n      isLoading: true,\r\n      authenticationMessage: \"\",\r\n    });\r\n    if (this.state.name == \"\") {\r\n      this.setState({\r\n        name_errorMessage: \"Enter Name\",\r\n        isLoading: false,\r\n      });\r\n      return;\r\n    } else {\r\n      this.setState({\r\n        name_errorMessage: \"\",\r\n      });\r\n    }\r\n\r\n    if (this.state.emailId == \"\") {\r\n      this.setState({\r\n        emailId_errorMessage: \"Enter email ID\",\r\n        isLoading: false,\r\n      });\r\n      return;\r\n    } else {\r\n      if (validator.isEmail(this.state.emailId)) {\r\n        this.setState({\r\n          emailId_errorMessage: \"\",\r\n        });\r\n      } else {\r\n        this.setState({\r\n          emailId_errorMessage: \"Enter a valid email ID\",\r\n          isLoading: false,\r\n        });\r\n        return;\r\n      }\r\n    }\r\n    if (this.state.password == \"\") {\r\n      this.setState({\r\n        password_errorMessage: \"Enter password\",\r\n        isLoading: false,\r\n      });\r\n      return;\r\n    } else {\r\n      this.setState({\r\n        password_errorMessage: \"\",\r\n      });\r\n      const postData = {\r\n        name: this.state.name,\r\n        email: this.state.emailId,\r\n        password: this.state.password,\r\n      };\r\n      try {\r\n        console.log(\"postData >>>\", postData);\r\n        const response = await ProvidersService.createProvider(postData);\r\n        if (response.status == true) {\r\n          console.log(response.data);\r\n          this.setState({\r\n            color: \"success\",\r\n            authenticationMessage: response.data.message,\r\n            isLoading: false,\r\n          });\r\n          this.getList();\r\n        } else {\r\n          this.setState({\r\n            color: \"danger\",\r\n            isLoading: false,\r\n            authenticationMessage: response.data.data.error,\r\n          });\r\n        }\r\n      } catch (e) {\r\n        console.log(e, e.data);\r\n      }\r\n    }\r\n  }\r\n\r\n  createColumnDefinitions() {\r\n    return [\r\n      {\r\n        dataField: \"provider_id\",\r\n        hidden: true,\r\n        isKey: true,\r\n      },\r\n      {\r\n        dataField: \"name_tx\",\r\n        text: \"Provider Name\",\r\n        sort: true,\r\n        // align: \"center\",\r\n        sortCaret,\r\n        formatter: (cell) => <span className=\"text-inverse\">{cell}</span>,\r\n      },\r\n      {\r\n        dataField: \"created_dt\",\r\n        text: \"Date Added\",\r\n        formatter: (cell) => moment(cell).format(\"DD/MM/YYYY\"),\r\n        sort: true,\r\n        sortCaret,\r\n      },\r\n      {\r\n        text: \"Action\",\r\n        // sort: true,\r\n        // align: \"center\",\r\n        // sortCaret,\r\n        formatter: this.actionColButton,\r\n      },\r\n    ];\r\n  }\r\n  handleCallback = async (childData) => {\r\n    this.getList(null, childData);\r\n  };\r\n\r\n  render() {\r\n    const columnDefs = this.createColumnDefinitions();\r\n    return (\r\n      <ToolkitProvider\r\n        keyField=\"id\"\r\n        data={this.state.providersList}\r\n        columns={columnDefs}\r\n      >\r\n        {(props) => (\r\n          <React.Fragment>\r\n            <div className=\"d-flex justify-content-end align-items-center mb-2\">\r\n              <div className=\"d-flex ml-auto\">\r\n                <CustomSearch\r\n                  className=\"mr-2\"\r\n                  {...props.searchProps}\r\n                  parentCallBack={this.handleCallback}\r\n                />\r\n                <ButtonGroup>\r\n                  <Button size=\"sm\" outline id=\"modalDefault301\">\r\n                    <i className=\"fa fa-fw fa-plus\"></i>\r\n                  </Button>\r\n                  <UncontrolledModal\r\n                    target=\"modalDefault301\"\r\n                    className=\"modal-outline-primary\"\r\n                  >\r\n                    <ModalHeader tag=\"h5\">New Provider</ModalHeader>\r\n                    <ModalBody>\r\n                      <Form>\r\n                        {/* START Input */}\r\n                        <FormGroup row>\r\n                          <Label for=\"name\" sm={4}>\r\n                            Provider Name\r\n                          </Label>\r\n                          <Col sm={8}>\r\n                            <Input\r\n                              type=\"text\"\r\n                              name=\"name\"\r\n                              id=\"name\"\r\n                              placeholder=\"Full Name\"\r\n                              value={this.state.name}\r\n                              onChange={(e) =>\r\n                                this.onChangeName(e.target.value)\r\n                              }\r\n                            />\r\n                            <FormText color=\"danger\">\r\n                              {this.state.name_errorMessage}\r\n                            </FormText>\r\n                          </Col>\r\n                        </FormGroup>\r\n                        {/* END Input */}\r\n                        {/* START Input */}\r\n                        <FormGroup row>\r\n                          <Label for=\"emailId\" sm={4}>\r\n                            Email ID\r\n                          </Label>\r\n                          <Col sm={8}>\r\n                            <Input\r\n                              type=\"email\"\r\n                              name=\"emailId\"\r\n                              id=\"emailId\"\r\n                              placeholder=\"user@example.com\"\r\n                              value={this.state.emailId}\r\n                              onChange={(e) =>\r\n                                this.onChangeEmail(e.target.value)\r\n                              }\r\n                            />\r\n                            <FormText color=\"danger\">\r\n                              {this.state.emailId_errorMessage}\r\n                            </FormText>\r\n                          </Col>\r\n                        </FormGroup>\r\n                        {/* END Input */}\r\n                        {/* START Radios */}\r\n                        <FormGroup row>\r\n                          <Label for=\"password\" sm={4}>\r\n                            Password\r\n                          </Label>\r\n                          <Col sm={8}>\r\n                            <InputGroup>\r\n                              <Input\r\n                                type={\r\n                                  this.state.hidePassword ? \"password\" : \"text\"\r\n                                }\r\n                                name=\"password\"\r\n                                id=\"password\"\r\n                                placeholder=\"Password\"\r\n                                className=\"bg-white\"\r\n                                value={this.state.password}\r\n                                onChange={(e) =>\r\n                                  this.onChangePassword(e.target.value)\r\n                                }\r\n                              />\r\n                              {this.state.hidePassword ? (\r\n                                <InputGroupAddon\r\n                                  addonType=\"append\"\r\n                                  onClick={() => this.secureEntry()}\r\n                                >\r\n                                  <i className=\"fa fa-fw fa-eye-slash\"></i>\r\n                                </InputGroupAddon>\r\n                              ) : (\r\n                                <InputGroupAddon\r\n                                  addonType=\"append\"\r\n                                  onClick={() => this.secureEntry()}\r\n                                >\r\n                                  <i className=\"fa fa-fw fa-eye\"></i>\r\n                                </InputGroupAddon>\r\n                              )}\r\n                            </InputGroup>\r\n                            <FormText color=\"danger\">\r\n                              {this.state.password_errorMessage}\r\n                            </FormText>\r\n                          </Col>\r\n                        </FormGroup>\r\n                        {/* END Radios */}\r\n                      </Form>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                      <FormText color={this.state.color}>\r\n                        {this.state.authenticationMessage}\r\n                      </FormText>\r\n                      <UncontrolledModal.Close color=\"link\">\r\n                        Discard\r\n                      </UncontrolledModal.Close>\r\n                      <Button\r\n                        color=\"primary\"\r\n                        onClick={() => this.CreateProvider()}\r\n                        disabled={this.state.isLoading}\r\n                      >\r\n                        {this.state.isLoading\r\n                          ? \"Creating provider...\"\r\n                          : \"Create Provider\"}\r\n                      </Button>\r\n                    </ModalFooter>\r\n                  </UncontrolledModal>\r\n                </ButtonGroup>\r\n              </div>\r\n            </div>\r\n            <BootstrapTable\r\n              classes=\"table-responsive-lg\"\r\n              bordered={false}\r\n              responsive\r\n              noDataIndication={this.state.isGettingData ? 'Getting providers...' : 'No providers found!'}\r\n              {...props.baseProps}\r\n            />\r\n\r\n            <ButtonGroup>\r\n              <Button\r\n                size=\"sm\"\r\n                outline\r\n                onClick={() => {\r\n                  this.getList(this.state.previousPage, null);\r\n                }}\r\n                disabled={this.state.previousPage ? false : true}\r\n              >\r\n                <i className=\"fa fa-fw fa-chevron-left\"></i>\r\n              </Button>\r\n              <Button\r\n                size=\"sm\"\r\n                outline\r\n                onClick={() => {\r\n                  this.getList(this.state.nextPage, null);\r\n                }}\r\n                disabled={this.state.nextPage ? false : true}\r\n              >\r\n                <i className=\"fa fa-fw fa-chevron-right\"></i>\r\n              </Button>\r\n            </ButtonGroup>\r\n          </React.Fragment>\r\n        )}\r\n      </ToolkitProvider>\r\n    );\r\n  }\r\n}\r\n","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Tables\\ExtendedTable\\components\\AppointmentsTable.js",["881","882","883","884","885","886","887","888","889","890","891","892","893","894","895","896","897","898","899","900","901","902"],"import React from \"react\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport filterFactory, {\r\n    Comparator,\r\n    dateFilter,\r\n} from \"react-bootstrap-table2-filter\";\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\nimport _ from \"lodash\";\r\nimport moment from \"moment\";\r\n\r\nimport {\r\n    // Badge,\r\n    Button,\r\n    // CustomInput,\r\n    // StarRating,\r\n    ButtonInput,\r\n    ButtonGroup,\r\n    UncontrolledModal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    Col,\r\n    Input,\r\n    InputGroup,\r\n    InputGroupAddon,\r\n    FormText,\r\n    ModalFooter,\r\n    Label,\r\n    Form,\r\n    FormGroup,\r\n} from \"../../../../components\";\r\nimport { CustomExportCSV } from \"./CustomExportButton\";\r\nimport { CustomSearch } from \"./CustomSearch\";\r\nimport Config from \"./../../../../config/Config\";\r\nimport AppointmentsService from \"../../../../services/AppointmentsService\";\r\nimport ImmunizationsService from \"../../../../services/ImmunizationsService\";\r\nimport AuthenticationService from \"../../../../services/AuthenticationService\";\r\nimport ProvidersService from \"../../../../services/ProvidersService\";\r\nimport PractitionersService from \"../../../../services/PractitionersService\";\r\nimport PatientsService from \"../../../../services/PatientsService\";\r\nimport VaccinesService from \"../../../../services/VaccinesService\";\r\nimport DateTimePicker from \"react-datetime-picker\";\r\nimport MedicalReportService from \"../../../../services/MedicalReportService\";\r\n\r\nconst sortCaret = (order) => {\r\n    if (!order) return <i className=\"fa fa-fw fa-sort text-muted\"></i>;\r\n    if (order) return <i className={`fa fa-fw text-muted fa-sort-${order}`}></i>;\r\n};\r\n\r\nexport default class AppointmentsTable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            appointmentsList: [],\r\n            date: \"\",\r\n            time: \"\",\r\n            practitioner: null,\r\n            patient: null,\r\n            provider: null,\r\n            date_errorMessage: \"\",\r\n            time_errorMessage: \"\",\r\n            practitioner_errorMessage: \"\",\r\n            patient_errorMessage: \"\",\r\n            provider_errorMessage: \"\",\r\n            authenticationMessage: \"\",\r\n            color: \"black\",\r\n            isLoading: false,\r\n            name: \"\",\r\n            nextPage: \"\",\r\n            previousPage: \"\",\r\n            allProviders: [],\r\n            allPractitioners: [],\r\n            allPatients: [],\r\n            searchValue: null,\r\n            archiveMessage: \"\",\r\n            isArchiving: false,\r\n            datetime: new Date(),\r\n            isGettingData:true,\r\n            providerName: ''\r\n        };\r\n\r\n        this.headerCheckboxRef = React.createRef();\r\n    }\r\n\r\n\r\n    getList = async (page = null, search = null) => {\r\n        try {\r\n            const paramData = {\r\n                page: page,\r\n                search: search\r\n            }\r\n\r\n            if (this.props.location.provider_id) {\r\n                console.log(\"provider_id in appointments\", this.props.location.provider_id);\r\n                const response = await AppointmentsService.appointmentsOfThisProvider(paramData, this.props.location.provider_id);\r\n                if (response.status == true) {\r\n                    this.setState({\r\n                        appointmentsList: response.data.result,\r\n                        nextPage: response.data.next_page,\r\n                        previousPage: response.data.previous_page,\r\n                        isGettingData: false\r\n                    });\r\n                }\r\n            }else if (this.props.location.practitioner_id) {\r\n                console.log(\"practitioner_id in appointments\", this.props.location.practitioner_id);\r\n                const response = await AppointmentsService.appointmentsOfThisPractitioner(paramData, this.props.location.practitioner_id);\r\n                if (response.status == true) {\r\n                    this.setState({\r\n                        appointmentsList: response.data.result,\r\n                        nextPage: response.data.next_page,\r\n                        previousPage: response.data.previous_page,\r\n                        isGettingData: false\r\n                    });\r\n                }\r\n            } else {\r\n                const response = await AppointmentsService.getList(paramData);\r\n                if (response.status == true) {\r\n                    this.setState({\r\n                        appointmentsList: response.data.result,\r\n                        nextPage: response.data.next_page,\r\n                        previousPage: response.data.previous_page,\r\n                        isGettingData: false\r\n                    });\r\n                }\r\n            }\r\n\r\n        } catch (e) {\r\n            console.log(\"error >>>\", e);\r\n            console.log(e, e.data);\r\n        }\r\n    };\r\n\r\n    getAllProviders = async () => {\r\n        try {\r\n            const response = await ProvidersService.getAllProvidersList();\r\n            if (response.status == true) {\r\n                this.setState({\r\n                    allProviders: response.data.data,\r\n                    provider: response.data.data[0].provider_id,\r\n                });\r\n                console.log(\"all Providers List >>>\", this.state.allProviders);\r\n                this.getAllPractitioners(this.state.provider);\r\n            }\r\n        } catch (e) {\r\n            console.log(\"error >>>\", e);\r\n            console.log(e, e.data);\r\n        }\r\n    };\r\n    getAllPractitioners = async (value) => {\r\n        try {\r\n            const response = await PractitionersService.getAllPractitionersList(\r\n                value\r\n            );\r\n            if (response.status == true) {\r\n                if (response.data.data.length > 0) {\r\n                    this.setState({\r\n                        allPractitioners: response.data.data,\r\n                        practitioner: response.data.data[0].practitioner_id,\r\n                    });\r\n                    this.getAllPatients(this.state.practitioner);\r\n                } else {\r\n                    this.setState({\r\n                        allPractitioners: [],\r\n                        allPatients: [],\r\n                        practitioner: null,\r\n                        patient: null,\r\n                    });\r\n                }\r\n                console.log(\"all practitioner List >>>\", this.state.allPractitioners);\r\n            }\r\n        } catch (e) {\r\n            console.log(\"error >>>\", e);\r\n            console.log(e, e.data);\r\n        }\r\n    };\r\n    getAllPatients = async (value) => {\r\n        try {\r\n            const response = await PatientsService.getAllPatientsList(value);\r\n            if (response.status == true) {\r\n                if (response.data.data.length > 0) {\r\n                    this.setState({\r\n                        allPatients: response.data.data,\r\n                        patient: response.data.data[0].patient_id,\r\n                    });\r\n                } else {\r\n                    this.setState({\r\n                        allPatients: [],\r\n                        patient: null,\r\n                    });\r\n                }\r\n                console.log(\"all patients List >>>\", this.state.allPatients);\r\n            }\r\n        } catch (e) {\r\n            console.log(\"error >>>\", e);\r\n            console.log(e, e.data);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    async handleArchiveOnClick(cell, row) {\r\n        console.log(\"Archive button clicked, active flag:\", row.appointment_id);\r\n        const data = {\r\n            \"appointment_id\": row.appointment_id\r\n        }\r\n        try {\r\n            this.setState({\r\n                isArchiving: true\r\n            });\r\n            const response = await AppointmentsService.archiveAppointment(data);\r\n            if (response.status == true) {\r\n                console.log(response.data);\r\n                this.setState({\r\n                    archiveMessage: \"Appointment archived successfully\",\r\n                    isArchiving: false\r\n                });\r\n                this.getList();\r\n\r\n            }\r\n            else {\r\n                this.setState({\r\n                    archiveMessage: response.data.data.error,\r\n                    isArchiving: false\r\n                });\r\n            }\r\n            console.log(\"archive Appointment>>>\", this.state.archiveMessage);\r\n        }\r\n        catch (e) {\r\n            console.log(e, e.data)\r\n        }\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n        if (AuthenticationService.getUser()) {\r\n            this.getList();\r\n            if (Config.getProfileData().role === 100) {\r\n                console.log(\"in get all 100 providers\");\r\n                this.getAllProviders();\r\n            }\r\n            if (Config.getProfileData().role === 50) {\r\n                console.log(\"In 50\");\r\n                this.getAllPractitioners(Config.getProfileData().id);\r\n                this.setState({\r\n                    providerName: Config.getProfileData().name\r\n                })\r\n            }\r\n            if (Config.getProfileData().role === 10) {\r\n                this.getAllPatients(Config.getProfileData().id);\r\n                this.setState({\r\n                    providerName: Config.getProfileData().provider\r\n                })\r\n            }\r\n        } else {\r\n            this.props.history.push({\r\n                pathname: \"/login\",\r\n            });\r\n\r\n        }\r\n    };\r\n\r\n    onChangeProvider(value) {\r\n        console.log(\"provider_id >>>\", value);\r\n        this.getAllPractitioners(value);\r\n        this.setState({\r\n            provider: parseInt(value),\r\n        });\r\n    }\r\n\r\n    onChangePractitioner(value) {\r\n        console.log(\"provider_id >>>\", value);\r\n        this.getAllPatients(value);\r\n        this.setState({\r\n            practitioner: parseInt(value),\r\n        });\r\n    }\r\n\r\n    onChangePatient(value) {\r\n        this.setState({\r\n            patient: parseInt(value),\r\n        });\r\n    }\r\n\r\n    onChangeDatetime(value) {\r\n        this.setState({\r\n            datetime: value,\r\n        });\r\n    }\r\n\r\n    async createAppointment() {\r\n        this.setState({\r\n            isLoading: true,\r\n            authenticationMessage: \"\",\r\n        });\r\n\r\n        if (this.state.provider == \"\") {\r\n            this.setState({\r\n                provider_errorMessage: \"Provider not available\",\r\n                isLoading: false,\r\n            });\r\n            return;\r\n        } else {\r\n            this.setState({\r\n                provider_errorMessage: \"\",\r\n            });\r\n        }\r\n\r\n        if (this.state.practitioner == \"\") {\r\n            this.setState({\r\n                practitioner_errorMessage: \"Practitioner not available\",\r\n                isLoading: false,\r\n            });\r\n            return;\r\n        } else {\r\n            this.setState({\r\n                practitioner_errorMessage: \"\",\r\n            });\r\n        }\r\n\r\n        if (this.state.patient == \"\") {\r\n            this.setState({\r\n                patient_errorMessage: \"Patient not available\",\r\n                isLoading: false,\r\n            });\r\n            return;\r\n        } else {\r\n            this.setState({\r\n                patient_errorMessage: \"\",\r\n            });\r\n        }\r\n\r\n        if (this.state.datetime == \"\") {\r\n            this.setState({\r\n                date_errorMessage: \"Date not available\",\r\n                isLoading: false,\r\n            });\r\n            return;\r\n        } else {\r\n            this.setState({\r\n                date_errorMessage: \"\",\r\n            });\r\n            var formatedDateTime = moment\r\n                .utc(moment(this.state.datetime, \"YYYY-MM-DD HH:MM:SS\"))\r\n                .format();\r\n            formatedDateTime = formatedDateTime.replace(\"T\", \" \").replace(\"Z\", \"\");\r\n            const postData = {\r\n                provider_id: this.state.provider,\r\n                practitioner_id: this.state.practitioner,\r\n                patient_id: this.state.patient,\r\n                appointment_date: formatedDateTime,\r\n            };\r\n            try {\r\n                console.log(postData);\r\n                const response = await AppointmentsService.createAppointment(\r\n                    postData\r\n                );\r\n                if (response.status == true) {\r\n                    console.log(response.data);\r\n                    this.setState({\r\n                        color: \"success\",\r\n                        authenticationMessage: response.data.message,\r\n                        isLoading: false,\r\n                    });\r\n                    this.getList();\r\n                } else {\r\n                    this.setState({\r\n                        color: \"danger\",\r\n                        isLoading: false,\r\n                        authenticationMessage: response.data.data.error,\r\n                    });\r\n                }\r\n            } catch (e) {\r\n                console.log(e, e.data);\r\n            }\r\n        }\r\n    }\r\n\r\n    actionColButton = (cell, row) => {\r\n        return (\r\n            <Button\r\n                size=\"sm\"\r\n                outline\r\n                color=\"danger\"\r\n                onClick={() => this.handleArchiveOnClick(cell, row)}\r\n            >\r\n                Cancel\r\n            </Button>\r\n        );\r\n    };\r\n\r\n    createColumnDefinitions() {\r\n        return [\r\n            {\r\n                dataField: \"appointment_id\",\r\n                hidden: true,\r\n                isKey: true,\r\n            },\r\n            {\r\n                dataField: \"appointment_date\",\r\n                text: \"Appointment Date\",\r\n                formatter: (cell) => moment(cell).format(\"DD/MM/YYYY\"),\r\n                sort: true,\r\n                sortCaret,\r\n            },\r\n            {\r\n                dataField: \"appointment_time\",\r\n                text: \"Appointment Time\",\r\n                sort: true,\r\n                sortCaret,\r\n            },\r\n            {\r\n                dataField: \"patient\",\r\n                text: \"Patient Name\",\r\n                sort: true,\r\n                // align: \"center\",\r\n                sortCaret,\r\n                formatter: (cell) => <span className=\"text-inverse\">{cell}</span>,\r\n            },\r\n            {\r\n                dataField: \"practitioner\",\r\n                text: \"Scheduled By\",\r\n                sort: true,\r\n                sortCaret,\r\n                formatter: (cell) => <span className=\"text-inverse\">{cell}</span>,\r\n            },\r\n            {\r\n                dataField: \"created_at\",\r\n                text: \"Scheduled On\",\r\n                formatter: (cell) => moment(cell).format(\"DD/MM/YYYY\"),\r\n                sort: true,\r\n                sortCaret,\r\n            },\r\n            {\r\n                text: \"Action\",\r\n                formatter: this.actionColButton,\r\n            },\r\n        ];\r\n    }\r\n\r\n    handleCallback = async (childData) => {\r\n        this.getList(null, childData);\r\n    };\r\n\r\n    render() {\r\n        const columnDefs = this.createColumnDefinitions();\r\n        return (\r\n            <ToolkitProvider\r\n                keyField=\"id\"\r\n                data={this.state.appointmentsList}\r\n                columns={columnDefs}\r\n            >\r\n                {(props) => (\r\n                    <React.Fragment>\r\n                        <div className=\"d-flex justify-content-end align-items-center mb-2\">\r\n                            <div className=\"d-flex ml-auto\">\r\n                                <CustomSearch\r\n                                    className=\"mr-2\"\r\n                                    {...props.searchProps}\r\n                                    parentCallBack={this.handleCallback}\r\n                                />\r\n                                <ButtonGroup>\r\n                                    <Button size=\"sm\" outline id=\"modalDefault301\">\r\n                                        <i className=\"fa fa-fw fa-plus\"></i>\r\n                                    </Button>\r\n                                    <UncontrolledModal\r\n                                        target=\"modalDefault301\"\r\n                                        className=\"modal-outline-primary\"\r\n                                    >\r\n                                        <ModalHeader tag=\"h5\">New Appointment</ModalHeader>\r\n                                        <ModalBody>\r\n                                            <Form>\r\n                                                <FormGroup row>\r\n                                                    <Label for=\"provider\" sm={4}>\r\n                                                        Provider Name\r\n                                                    </Label>\r\n                                                    <Col sm={8}>\r\n                                                        {Config.getProfileData().role === 100 ? (\r\n                                                            <Input\r\n                                                                type=\"select\"\r\n                                                                name=\"select\"\r\n                                                                id=\"provider\"\r\n                                                                value={this.state.provider}\r\n                                                                onChange={(e) =>\r\n                                                                    this.onChangeProvider(e.target.value)\r\n                                                                }\r\n                                                            >\r\n                                                                {this.state.allProviders.map((obj) => (\r\n                                                                    <option value={obj.provider_id}>\r\n                                                                        {obj.name}\r\n                                                                    </option>\r\n                                                                ))}\r\n                                                            </Input>\r\n                                                        ) : (\r\n                                                                <option>{this.state.providerName}</option>\r\n                                                            )}\r\n                                                        <FormText color=\"danger\">\r\n                                                            {this.state.provider_errorMessage}\r\n                                                        </FormText>\r\n                                                    </Col>\r\n                                                </FormGroup>\r\n                                                <FormGroup row>\r\n                                                    <Label for=\"practitioner\" sm={4}>\r\n                                                        Practitioner Name\r\n                                                    </Label>\r\n                                                    <Col sm={8}>\r\n                                                        {Config.getProfileData().role === 100 ||\r\n                                                            Config.getProfileData().role === 50 ? (\r\n                                                                <Input\r\n                                                                    type=\"select\"\r\n                                                                    name=\"select\"\r\n                                                                    id=\"practitioner\"\r\n                                                                    value={this.state.practitioner}\r\n                                                                    onChange={(e) =>\r\n                                                                        this.onChangePractitioner(e.target.value)\r\n                                                                    }\r\n                                                                >\r\n                                                                    {this.state.allPractitioners.map((obj) => (\r\n                                                                        <option value={obj.practitioner_id}>\r\n                                                                            {obj.name}\r\n                                                                        </option>\r\n                                                                    ))}\r\n                                                                </Input>\r\n                                                            ) : (\r\n                                                                <option>{Config.getProfileData().name}</option>\r\n                                                            )}\r\n                                                        <FormText color=\"danger\">\r\n                                                            {this.state.practitioner_errorMessage}\r\n                                                        </FormText>\r\n                                                    </Col>\r\n                                                </FormGroup>\r\n                                                <FormGroup row>\r\n                                                    <Label for=\"patient\" sm={4}>\r\n                                                        Patient Name\r\n                          </Label>\r\n                                                    <Col sm={8}>\r\n                                                        {Config.getProfileData().role === 100 ||\r\n                                                            Config.getProfileData().role === 50 ||\r\n                                                            Config.getProfileData().role === 10 ? (\r\n                                                                <Input\r\n                                                                    type=\"select\"\r\n                                                                    name=\"select\"\r\n                                                                    id=\"patient\"\r\n                                                                    value={this.state.patient}\r\n                                                                    onChange={(e) =>\r\n                                                                        this.onChangePatient(e.target.value)\r\n                                                                    }\r\n                                                                >\r\n                                                                    {this.state.allPatients.map((obj) => (\r\n                                                                        <option value={obj.patient_id}>\r\n                                                                            {obj.name}\r\n                                                                        </option>\r\n                                                                    ))}\r\n                                                                </Input>\r\n                                                            ) : (\r\n                                                                <option>{Config.getProfileData().name}</option>\r\n                                                            )}\r\n                                                        <FormText color=\"danger\">\r\n                                                            {this.state.patient_errorMessage}\r\n                                                        </FormText>\r\n                                                    </Col>\r\n                                                </FormGroup>\r\n                                                <FormGroup row>\r\n                                                    <Label for=\"datetime\" sm={4}>\r\n                                                        Date and Time\r\n                          </Label>\r\n                                                    <Col sm={8}>\r\n                                                        <DateTimePicker\r\n                                                            value={this.state.datetime}\r\n                                                            onChange={(value) => this.onChangeDatetime(value)}\r\n                                                            minDate={moment().toDate()}\r\n                                                        />\r\n                                                        <FormText color=\"danger\">\r\n                                                            {this.state.date_errorMessage}\r\n                                                        </FormText>\r\n                                                    </Col>\r\n                                                </FormGroup>\r\n                                            </Form>\r\n                                        </ModalBody>\r\n                                        <ModalFooter>\r\n                                            <FormText color={this.state.color}>\r\n                                                {this.state.authenticationMessage}\r\n                                            </FormText>\r\n                                            <UncontrolledModal.Close color=\"link\">\r\n                                                Discard\r\n                      </UncontrolledModal.Close>\r\n                                            <Button\r\n                                                color=\"primary\"\r\n                                                onClick={() => this.createAppointment()}\r\n                                                disabled={this.state.isLoading}\r\n                                            >\r\n                                                {this.state.isLoading\r\n                                                    ? \"Creating Appointment...\"\r\n                                                    : \"Create Appointment\"}\r\n                                            </Button>\r\n                                        </ModalFooter>\r\n                                    </UncontrolledModal>\r\n                                </ButtonGroup>\r\n                            </div>\r\n                        </div>\r\n                        <BootstrapTable\r\n                            classes=\"table-responsive-sm\"\r\n                            filter={filterFactory()}\r\n                            bordered={false}\r\n                            responsive\r\n                            noDataIndication={this.state.isGettingData ? 'Getting appointments...' : 'No appointments found!'}\r\n                            {...props.baseProps}\r\n                        />\r\n\r\n                        <ButtonGroup>\r\n                            <Button\r\n                                size=\"sm\"\r\n                                outline\r\n                                onClick={() => {\r\n                                    this.getList(this.state.previousPage, null);\r\n                                }}\r\n                                disabled={this.state.previousPage ? false : true}\r\n                            >\r\n                                <i className=\"fa fa-fw fa-chevron-left\"></i>\r\n                            </Button>\r\n                            <Button\r\n                                size=\"sm\"\r\n                                outline\r\n                                onClick={() => {\r\n                                    this.getList(this.state.nextPage, null);\r\n                                }}\r\n                                disabled={this.state.nextPage ? false : true}\r\n                            >\r\n                                <i className=\"fa fa-fw fa-chevron-right\"></i>\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                    </React.Fragment>\r\n                )}\r\n            </ToolkitProvider>\r\n        );\r\n    }\r\n}\r\n","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Tables\\ExtendedTable\\components\\ImmunizationsTable.js",["903","904","905","906","907","908","909","910","911","912","913","914","915","916","917","918","919","920","921","922","923","924"],"import React from \"react\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\r\nimport filterFactory, {\r\n    Comparator,\r\n    dateFilter,\r\n} from \"react-bootstrap-table2-filter\";\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\nimport _ from \"lodash\";\r\n// import moment from \"moment\";\r\n\r\nimport {\r\n    // Badge,\r\n    Button,\r\n    // CustomInput,\r\n    // StarRating,\r\n    ButtonInput,\r\n    ButtonGroup,\r\n    UncontrolledModal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    Col,\r\n    Input,\r\n    InputGroup,\r\n    InputGroupAddon,\r\n    FormText,\r\n    ModalFooter,\r\n    Label,\r\n    Form,\r\n    FormGroup,\r\n} from \"../../../../components\";\r\nimport DatePicker, { setDefaultLocale } from \"react-datepicker\";\r\nimport moment from \"moment\";\r\nimport { CustomSearch } from \"./CustomSearch\";\r\nimport Config from \"./../../../../config/Config\";\r\nimport ImmunizationsService from \"../../../../services/ImmunizationsService\";\r\nimport AuthenticationService from \"../../../../services/AuthenticationService\";\r\nimport ProvidersService from \"../../../../services/ProvidersService\";\r\nimport PractitionersService from \"../../../../services/PractitionersService\";\r\nimport PatientsService from \"../../../../services/PatientsService\";\r\nimport VaccinesService from \"../../../../services/VaccinesService\";\r\nimport DateTimePicker from \"react-datetime-picker\";\r\nimport MedicalReportService from './../../../../services/MedicalReportService';\r\n\r\nconst sortCaret = (order) => {\r\n    if (!order) return <i className=\"fa fa-fw fa-sort text-muted\"></i>;\r\n    if (order) return <i className={`fa fa-fw text-muted fa-sort-${order}`}></i>;\r\n};\r\n\r\nsetDefaultLocale(\"es\");\r\nexport default class ImmunizationsTable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            immunizationsList: [],\r\n            date: \"\",\r\n            time: \"\",\r\n            practitioner: null,\r\n            patient: null,\r\n            provider: null,\r\n            vaccine: null,\r\n            date_errorMessage: \"\",\r\n            time_errorMessage: \"\",\r\n            practitioner_errorMessage: \"\",\r\n            patient_errorMessage: \"\",\r\n            provider_errorMessage: \"\",\r\n            vaccine_errorMessage: \"\",\r\n            authenticationMessage: \"\",\r\n            color: \"black\",\r\n            isLoading: false,\r\n            name: \"\",\r\n            nextPage: \"\",\r\n            previousPage: \"\",\r\n            allProviders: [],\r\n            allPractitioners: [],\r\n            allPatients: [],\r\n            allVaccines: [],\r\n            searchValue: null,\r\n            archiveMessage: \"\",\r\n            isArchiving: false,\r\n            datetime: new Date(),\r\n            isGettingData: false,\r\n            providerName: ''\r\n        };\r\n\r\n        this.headerCheckboxRef = React.createRef();\r\n    }\r\n\r\n    getList = async (page = null, search = null) => {\r\n        try {\r\n            this.setState({\r\n                isGettingData: true\r\n            });\r\n            const paramData = {\r\n                page: page,\r\n                search: search,\r\n            };\r\n\r\n            if (this.props.location.practitioner_id) {\r\n                const response = await ImmunizationsService.immunizationOfThisPractitioner(paramData, this.props.location.practitioner_id);\r\n                if (response.status == true) {\r\n                    this.setState({\r\n                        immunizationsList: response.data.result,\r\n                        nextPage: response.data.next_page,\r\n                        previousPage: response.data.previous_page,\r\n                        isGettingData: false\r\n                    });\r\n                }\r\n            }else {\r\n                const response = await ImmunizationsService.getList(paramData);\r\n                if (response.status == true) {\r\n                    this.setState({\r\n                        immunizationsList: response.data.result,\r\n                        nextPage: response.data.next_page,\r\n                        previousPage: response.data.previous_page,\r\n                        isGettingData: false\r\n                    });\r\n                }\r\n            }\r\n            console.log(\"immunizationList >>>\", this.state.immunizationsList);\r\n        } catch (e) {\r\n            console.log(\"error >>>\", e);\r\n            console.log(e, e.data);\r\n        }\r\n    };\r\n    getAllVaccines = async () => {\r\n        try {\r\n            const response = await VaccinesService.getAllVaccinesList();\r\n            if (response.status == true) {\r\n                this.setState({\r\n                    allVaccines: response.data.data,\r\n                    vaccine: response.data.data[0].vaccine_id,\r\n                });\r\n                console.log(\"all Vaccines List >>>\", this.state.allVaccines);\r\n            }\r\n        } catch (e) {\r\n            console.log(\"error >>>\", e);\r\n            console.log(e, e.data);\r\n        }\r\n    };\r\n\r\n    getAllProviders = async () => {\r\n        try {\r\n            const response = await ProvidersService.getAllProvidersList();\r\n            if (response.status == true) {\r\n                this.setState({\r\n                    allProviders: response.data.data,\r\n                    provider: response.data.data[0].provider_id,\r\n                });\r\n                console.log(\"all Providers List >>>\", this.state.allProviders);\r\n                this.getAllPractitioners(this.state.provider);\r\n            }\r\n        } catch (e) {\r\n            console.log(\"error >>>\", e);\r\n            console.log(e, e.data);\r\n        }\r\n    };\r\n    getAllPractitioners = async (value) => {\r\n        try {\r\n            const response = await PractitionersService.getAllPractitionersList(\r\n                value\r\n            );\r\n            if (response.status == true) {\r\n                if (response.data.data.length > 0) {\r\n                    this.setState({\r\n                        allPractitioners: response.data.data,\r\n                        practitioner: response.data.data[0].practitioner_id,\r\n                    });\r\n                    this.getAllPatients(this.state.practitioner);\r\n                } else {\r\n                    this.setState({\r\n                        allPractitioners: [],\r\n                        allPatients: [],\r\n                        practitioner: null,\r\n                        patient: null,\r\n                    });\r\n                }\r\n                console.log(\"all practitioner List >>>\", this.state.allPractitioners);\r\n            }\r\n        } catch (e) {\r\n            console.log(\"error >>>\", e);\r\n            console.log(e, e.data);\r\n        }\r\n    };\r\n    getAllPatients = async (value) => {\r\n        try {\r\n            const response = await PatientsService.getAllPatientsList(value);\r\n            if (response.status == true) {\r\n                if (response.data.data.length > 0) {\r\n                    this.setState({\r\n                        allPatients: response.data.data,\r\n                        patient: response.data.data[0].patient_id,\r\n                    });\r\n                } else {\r\n                    this.setState({\r\n                        allPatients: [],\r\n                        patient: null,\r\n                    });\r\n                }\r\n                console.log(\"all patients List >>>\", this.state.allPatients);\r\n            }\r\n        } catch (e) {\r\n            console.log(\"error >>>\", e);\r\n            console.log(e, e.data);\r\n        }\r\n    };\r\n\r\n    componentDidMount = async () => {\r\n        if (AuthenticationService.getUser()) {\r\n            this.getList();\r\n            this.getAllVaccines();\r\n            if (Config.getProfileData().role === 100) {\r\n                console.log(\"in get all 100 providers\");\r\n                this.getAllProviders();\r\n            }\r\n            if (Config.getProfileData().role === 50) {\r\n                console.log(\"In 50\");\r\n                this.getAllPractitioners(Config.getProfileData().id);\r\n                this.setState({\r\n                    providerName: Config.getProfileData().name\r\n                })\r\n            }\r\n            if (Config.getProfileData().role === 10) {\r\n                this.getAllPatients(Config.getProfileData().id);\r\n                this.setState({\r\n                    providerName: Config.getProfileData().provider\r\n                })\r\n            }\r\n        } else {\r\n            this.props.history.push({\r\n                pathname: \"/login\",\r\n            });\r\n        }\r\n    };\r\n    onChangeProvider(value) {\r\n        console.log(\"provider_id >>>\", value);\r\n        this.getAllPractitioners(value);\r\n        this.setState({\r\n            provider: parseInt(value),\r\n        });\r\n    }\r\n\r\n    onChangePractitioner(value) {\r\n        console.log(\"provider_id >>>\", value);\r\n        this.getAllPatients(value);\r\n        this.setState({\r\n            practitioner: parseInt(value),\r\n        });\r\n    }\r\n\r\n    onChangePatient(value) {\r\n        this.setState({\r\n            patient: parseInt(value),\r\n        });\r\n    }\r\n\r\n    onChangeVaccine(value) {\r\n        this.setState({\r\n            vaccine: parseInt(value),\r\n        });\r\n    }\r\n\r\n    onChangeDatetime(value) {\r\n        this.setState({\r\n            datetime: value,\r\n        });\r\n    }\r\n\r\n    async createImmunization() {\r\n        this.setState({\r\n            isLoading: true,\r\n            authenticationMessage: \"\",\r\n        });\r\n\r\n        if (this.state.provider == \"\") {\r\n            this.setState({\r\n                provider_errorMessage: \"Provider not available\",\r\n                isLoading: false,\r\n            });\r\n            return;\r\n        } else {\r\n            this.setState({\r\n                provider_errorMessage: \"\",\r\n            });\r\n        }\r\n\r\n        if (this.state.practitioner == \"\") {\r\n            this.setState({\r\n                practitioner_errorMessage: \"Practitioner not available\",\r\n                isLoading: false,\r\n            });\r\n            return;\r\n        } else {\r\n            this.setState({\r\n                practitioner_errorMessage: \"\",\r\n            });\r\n        }\r\n\r\n        if (this.state.patient == \"\") {\r\n            this.setState({\r\n                patient_errorMessage: \"Patient not available\",\r\n                isLoading: false,\r\n            });\r\n            return;\r\n        } else {\r\n            this.setState({\r\n                patient_errorMessage: \"\",\r\n            });\r\n        }\r\n\r\n        if (this.state.vaccine == \"\") {\r\n            this.setState({\r\n                vaccine_errorMessage: \"Vaccine not available\",\r\n                isLoading: false,\r\n            });\r\n            return;\r\n        } else {\r\n            this.setState({\r\n                vaccine_errorMessage: \"\",\r\n            });\r\n        }\r\n\r\n        if (this.state.datetime == \"\") {\r\n            this.setState({\r\n                date_errorMessage: \"Date not available\",\r\n                isLoading: false,\r\n            });\r\n            return;\r\n        } else {\r\n            this.setState({\r\n                date_errorMessage: \"\",\r\n            });\r\n            var formatedDateTime = moment\r\n                .utc(moment(this.state.datetime, \"YYYY-MM-DD HH:MM:SS\"))\r\n                .format();\r\n            formatedDateTime = formatedDateTime.replace(\"T\", \" \").replace(\"Z\", \"\");\r\n            const postData = {\r\n                provider_id: this.state.provider,\r\n                practitioner_id: this.state.practitioner,\r\n                patient_id: this.state.patient,\r\n                administered_dt: formatedDateTime,\r\n                vaccine_id: this.state.vaccine,\r\n            };\r\n            try {\r\n                console.log(postData);\r\n                const response = await ImmunizationsService.createImmunizations(\r\n                    postData\r\n                );\r\n                if (response.status == true) {\r\n                    console.log(response.data);\r\n                    this.setState({\r\n                        color: \"success\",\r\n                        authenticationMessage: response.data.message,\r\n                        isLoading: false,\r\n                    });\r\n                    this.getList();\r\n                } else {\r\n                    this.setState({\r\n                        color: \"danger\",\r\n                        isLoading: false,\r\n                        authenticationMessage: response.data.data.error,\r\n                    });\r\n                }\r\n            } catch (e) {\r\n                console.log(e, e.data);\r\n            }\r\n        }\r\n    }\r\n\r\n    _handleChangeStart = (startDate) => this.setState({ vaccineDate: startDate });\r\n\r\n    async handleArchiveOnClick(cell, row) {\r\n        console.log(\r\n            \"Archive button clicked, active flag:\",\r\n            row.active_fl,\r\n            row.immunization_id\r\n        );\r\n        const data = {\r\n            immunization_id: row.immunization_id,\r\n        };\r\n        try {\r\n            this.setState({\r\n                isArchiving: true,\r\n            });\r\n            const response = await ImmunizationsService.archiveImmunization(data);\r\n            if (response.status == true) {\r\n                console.log(response.data);\r\n                this.setState({\r\n                    archiveMessage: \"Immunization archived successfully\",\r\n                    isArchiving: false,\r\n                });\r\n                this.getList();\r\n            } else {\r\n                this.setState({\r\n                    archiveMessage: response.data.data.error,\r\n                    isArchiving: false,\r\n                });\r\n            }\r\n            console.log(\"archive Immunization>>>\", this.state.archiveMessage);\r\n        } catch (e) {\r\n            console.log(e, e.data);\r\n        }\r\n    }\r\n\r\n    actionColButton = (cell, row) => {\r\n        return (\r\n            <ButtonGroup>\r\n                <Button\r\n                    size=\"sm\"\r\n                    outline\r\n                    color=\"danger\"\r\n                    onClick={() => this.handleArchiveOnClick(cell, row)}\r\n                    disabled={this.state.isArchiving}\r\n                >\r\n                    {this.state.isArchiving ? \"Archiving...\" : \"Archive\"}\r\n                </Button>\r\n            </ButtonGroup>\r\n        );\r\n    };\r\n    createColumnDefinitions() {\r\n        return [\r\n            {\r\n                dataField: \"administered_dt\",\r\n                text: \"Immunization Date\",\r\n                sort: true,\r\n                sortCaret,\r\n            },\r\n            {\r\n                dataField: \"patient\",\r\n                text: \"Patient Name\",\r\n                sort: true,\r\n                sortCaret,\r\n            },\r\n            {\r\n                dataField: \"vaccine\",\r\n                text: \"Vaccine Name\",\r\n                sort: true,\r\n                sortCaret,\r\n            },\r\n            {\r\n                dataField: \"practitioner\",\r\n                text: \"Administered By\",\r\n                sort: true,\r\n                sortCaret,\r\n            },\r\n            {\r\n                text: \"Action\",\r\n                formatter: this.actionColButton,\r\n            },\r\n        ];\r\n    }\r\n    handleCallback = async (childData) => {\r\n        this.getList(null, childData);\r\n    };\r\n\r\n    render() {\r\n        const columnDefs = this.createColumnDefinitions();\r\n        return (\r\n            <ToolkitProvider\r\n                keyField=\"id\"\r\n                data={this.state.immunizationsList}\r\n                columns={columnDefs}\r\n                exportCSV\r\n            >\r\n                {(props) => (\r\n                    <React.Fragment>\r\n                        <div className=\"d-flex justify-content-end align-items-center mb-2\">\r\n                            <div className=\"d-flex ml-auto\">\r\n                                <CustomSearch\r\n                                    className=\"mr-2\"\r\n                                    {...props.searchProps}\r\n                                    parentCallBack={this.handleCallback}\r\n                                />\r\n                                <ButtonGroup>\r\n                                    <Button size=\"sm\" outline id=\"modalDefault301\">\r\n                                        <i className=\"fa fa-fw fa-plus\"></i>\r\n                                    </Button>\r\n                                    <UncontrolledModal\r\n                                        target=\"modalDefault301\"\r\n                                        className=\"modal-outline-primary\"\r\n                                    >\r\n                                        <ModalHeader tag=\"h5\">New Immunization</ModalHeader>\r\n                                        <ModalBody>\r\n                                            <Form>\r\n                                                <FormGroup row>\r\n                                                    <Label for=\"provider\" sm={4}>\r\n                                                        Provider Name\r\n                          </Label>\r\n                                                    <Col sm={8}>\r\n                                                        {Config.getProfileData().role === 100 ? (\r\n                                                            <Input\r\n                                                                type=\"select\"\r\n                                                                name=\"select\"\r\n                                                                id=\"provider\"\r\n                                                                value={this.state.provider}\r\n                                                                onChange={(e) =>\r\n                                                                    this.onChangeProvider(e.target.value)\r\n                                                                }\r\n                                                            >\r\n                                                                {this.state.allProviders.map((obj) => (\r\n                                                                    <option value={obj.provider_id}>\r\n                                                                        {obj.name}\r\n                                                                    </option>\r\n                                                                ))}\r\n                                                            </Input>\r\n                                                        ) : (\r\n                                                                <option>{this.state.providerName}</option>\r\n                                                            )}\r\n                                                        <FormText color=\"danger\">\r\n                                                            {this.state.provider_errorMessage}\r\n                                                        </FormText>\r\n                                                    </Col>\r\n                                                </FormGroup>\r\n                                                <FormGroup row>\r\n                                                    <Label for=\"practitioner\" sm={4}>\r\n                                                        Practitioner Name\r\n                                                    </Label>\r\n                                                    <Col sm={8}>\r\n                                                        {Config.getProfileData().role === 100 ||\r\n                                                            Config.getProfileData().role === 50 ? (\r\n                                                                <Input\r\n                                                                    type=\"select\"\r\n                                                                    name=\"select\"\r\n                                                                    id=\"practitioner\"\r\n                                                                    value={this.state.practitioner}\r\n                                                                    onChange={(e) =>\r\n                                                                        this.onChangePractitioner(e.target.value)\r\n                                                                    }\r\n                                                                >\r\n                                                                    {this.state.allPractitioners.map((obj) => (\r\n                                                                        <option value={obj.practitioner_id}>\r\n                                                                            {obj.name}\r\n                                                                        </option>\r\n                                                                    ))}\r\n                                                                </Input>\r\n                                                            ) : (\r\n                                                                <option>{Config.getProfileData().name}</option>\r\n                                                            )}\r\n                                                        <FormText color=\"danger\">\r\n                                                            {this.state.practitioner_errorMessage}\r\n                                                        </FormText>\r\n                                                    </Col>\r\n                                                </FormGroup>\r\n                                                <FormGroup row>\r\n                                                    <Label for=\"patient\" sm={4}>\r\n                                                        Patient Name\r\n                                                    </Label>\r\n                                                    <Col sm={8}>\r\n                                                        {Config.getProfileData().role === 100 ||\r\n                                                            Config.getProfileData().role === 50 ||\r\n                                                            Config.getProfileData().role === 10 ? (\r\n                                                                <Input\r\n                                                                    type=\"select\"\r\n                                                                    name=\"select\"\r\n                                                                    id=\"patient\"\r\n                                                                    value={this.state.patient}\r\n                                                                    onChange={(e) =>\r\n                                                                        this.onChangePatient(e.target.value)\r\n                                                                    }\r\n                                                                >\r\n                                                                    {this.state.allPatients.map((obj) => (\r\n                                                                        <option value={obj.patient_id}>\r\n                                                                            {obj.name}\r\n                                                                        </option>\r\n                                                                    ))}\r\n                                                                </Input>\r\n                                                            ) : (\r\n                                                                <option>{Config.getProfileData().name}</option>\r\n                                                            )}\r\n                                                        <FormText color=\"danger\">\r\n                                                            {this.state.patient_errorMessage}\r\n                                                        </FormText>\r\n                                                    </Col>\r\n                                                </FormGroup>\r\n                                                <FormGroup row>\r\n                                                    <Label for=\"vaccine\" sm={4}>\r\n                                                        Vaccine Name\r\n                          </Label>\r\n                                                    <Col sm={8}>\r\n                                                        <Input\r\n                                                            type=\"select\"\r\n                                                            name=\"select\"\r\n                                                            id=\"vaccine\"\r\n                                                            value={this.state.vaccine}\r\n                                                            onChange={(e) =>\r\n                                                                this.onChangeVaccine(e.target.value)\r\n                                                            }\r\n                                                        >\r\n                                                            {this.state.allVaccines.map((obj) => (\r\n                                                                <option value={obj.vaccine_id}>\r\n                                                                    {obj.name}\r\n                                                                </option>\r\n                                                            ))}\r\n                                                        </Input>\r\n                                                        <FormText color=\"danger\">\r\n                                                            {this.state.vaccine_errorMessage}\r\n                                                        </FormText>\r\n                                                    </Col>\r\n                                                </FormGroup>\r\n\r\n                                                <FormGroup row>\r\n                                                    <Label for=\"datetime\" sm={4}>\r\n                                                        Date and Time\r\n                          </Label>\r\n                                                    <Col sm={8}>\r\n                                                        <DateTimePicker\r\n                                                            value={this.state.datetime}\r\n                                                            onChange={(value) => this.onChangeDatetime(value)}\r\n                                                            maxDate={moment().toDate()}\r\n                                                        />\r\n                                                        <FormText color=\"danger\">\r\n                                                            {this.state.date_errorMessage}\r\n                                                        </FormText>\r\n                                                    </Col>\r\n                                                </FormGroup>\r\n                                            </Form>\r\n                                        </ModalBody>\r\n                                        <ModalFooter>\r\n                                            <FormText color={this.state.color}>\r\n                                                {this.state.authenticationMessage}\r\n                                            </FormText>\r\n                                            <UncontrolledModal.Close color=\"link\">\r\n                                                Discard\r\n                      </UncontrolledModal.Close>\r\n                                            <Button\r\n                                                color=\"primary\"\r\n                                                onClick={() => this.createImmunization()}\r\n                                                disabled={this.state.isLoading}\r\n                                            >\r\n                                                {this.state.isLoading\r\n                                                    ? \"Creating Immunization...\"\r\n                                                    : \"Create Immunization\"}\r\n                                            </Button>\r\n                                        </ModalFooter>\r\n                                    </UncontrolledModal>\r\n                                </ButtonGroup>\r\n                            </div>\r\n                        </div>\r\n                        <BootstrapTable\r\n                            classes=\"table-responsive-lg\"\r\n                            filter={filterFactory()}\r\n                            bordered={false}\r\n                            responsive\r\n                            noDataIndication={this.state.isGettingData ? 'Getting immunizations...' : 'No immunizations found!'}\r\n                            {...props.baseProps}\r\n                        />\r\n                        <ButtonGroup>\r\n                            <Button\r\n                                size=\"sm\"\r\n                                outline\r\n                                onClick={() => {\r\n                                    this.getList(this.state.previousPage, null);\r\n                                }}\r\n                                disabled={this.state.previousPage ? false : true}\r\n                            >\r\n                                <i className=\"fa fa-fw fa-chevron-left\"></i>\r\n                            </Button>\r\n                            <Button\r\n                                size=\"sm\"\r\n                                outline\r\n                                onClick={() => {\r\n                                    this.getList(this.state.nextPage, null);\r\n                                }}\r\n                                disabled={this.state.nextPage ? false : true}\r\n                            >\r\n                                <i className=\"fa fa-fw fa-chevron-right\"></i>\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                    </React.Fragment>\r\n                )}\r\n            </ToolkitProvider>\r\n        );\r\n    }\r\n}\r\n","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Tables\\ExtendedTable\\components\\PatientsTable.js",["925","926","927","928","929","930","931","932","933","934","935","936","937","938","939","940","941","942","943","944","945","946","947","948","949"],"import React from \"react\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\r\nimport filterFactory, {\r\n    Comparator,\r\n    dateFilter,\r\n} from \"react-bootstrap-table2-filter\";\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\nimport _ from \"lodash\";\r\nimport moment from \"moment\";\r\nimport validator from \"validator\";\r\nimport {\r\n    // Badge,\r\n    Button,\r\n    // CustomInput,\r\n    // StarRating,\r\n    ButtonGroup,\r\n    UncontrolledModal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    Col,\r\n    Input,\r\n    InputGroup,\r\n    InputGroupAddon,\r\n    FormText,\r\n    ModalFooter,\r\n    Label,\r\n    CustomInput,\r\n    Form,\r\n    FormGroup,\r\n    Pagination,\r\n    PaginationItem,\r\n    PaginationLink,\r\n} from \"../../../../components\";\r\nimport { CustomExportCSV } from \"./CustomExportButton\";\r\nimport { CustomSearch } from \"./CustomSearch\";\r\nimport { CustomPaginationPanel } from \"./CustomPaginationPanel\";\r\nimport { CustomSizePerPageButton } from \"./CustomSizePerPageButton\";\r\nimport { CustomPaginationTotal } from \"./CustomPaginationTotal\";\r\nimport { buildCustomTextFilter } from \"../filters\";\r\n\r\nimport Config from \"./../../../../config/Config\";\r\nimport PatientsService from \"./../../../../services/PatientsService\";\r\nimport AuthenticationService from \"./../../../../services/AuthenticationService\";\r\nimport ProvidersService from \"./../../../../services/ProvidersService\";\r\nimport PractitionersService from \"./../../../../services/PractitionersService\";\r\n\r\nconst sortCaret = (order) => {\r\n    if (!order) return <i className=\"fa fa-fw fa-sort text-muted\"></i>;\r\n    if (order) return <i className={`fa fa-fw text-muted fa-sort-${order}`}></i>;\r\n};\r\n\r\nexport default class ProviderTable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            patientsList: [],\r\n            first_name: \"\",\r\n            last_name: \"\",\r\n            emailId: \"\",\r\n            password: \"\",\r\n            mykad: \"\",\r\n            first_name_errorMessage: \"\",\r\n            last_name_errorMessage: \"\",\r\n            emailId_errorMessage: \"\",\r\n            password_errorMessage: \"\",\r\n            authenticationMessage: \"\",\r\n            practitioner_errorMessage: \"\",\r\n            hidePassword: true,\r\n            color: \"black\",\r\n            isLoading: false,\r\n            provider: null,\r\n            practitioner: \"\",\r\n            allProviders: [],\r\n            allPractitioners: [],\r\n            nextPage: \"\",\r\n            archiveMessage: \"\",\r\n            previousPage: \"\",\r\n            isArchiving: false,\r\n            isGettingData: false,\r\n            providerName: ''\r\n        };\r\n\r\n        this.headerCheckboxRef = React.createRef();\r\n    }\r\n\r\n    getPatient = async (page = null, search = null) => {\r\n        try {\r\n            this.setState({\r\n                isGettingData: true\r\n            });\r\n            const paramData = {\r\n                page: page,\r\n                search: search,\r\n            };\r\n            const response = await PatientsService.getPatient(paramData);\r\n            console.log(\"data >>>\", response.data);\r\n            if (response.status == true) {\r\n                this.setState({\r\n                    patientsList: response.data.result,\r\n                    nextPage: response.data.next_page,\r\n                    previousPage: response.data.previous_page,\r\n                    isGettingData: false\r\n                });\r\n                console.log(\"patientsList >>>\", this.state.patientsList);\r\n                console.log(\"previous page >>>\", this.state.previousPage);\r\n                console.log(\"next page >>>\", this.state.nextPage);\r\n            }\r\n        } catch (e) {\r\n            console.log(\"error >>>\", e);\r\n            console.log(e, e.data);\r\n        }\r\n    };\r\n    getAllProviders = async () => {\r\n        try {\r\n            const response = await ProvidersService.getAllProvidersList();\r\n            if (response.status == true) {\r\n                this.setState({\r\n                    allProviders: response.data.data,\r\n                    provider: response.data.data[0].provider_id,\r\n                });\r\n                this.getAllPractitioners(this.state.provider);\r\n            }\r\n        } catch (e) {\r\n            console.log(\"error >>>\", e);\r\n            console.log(e, e.data);\r\n        }\r\n    };\r\n    getAllPractitioners = async (value) => {\r\n        try {\r\n            console.log(\"id >>>\", value);\r\n            const response = await PractitionersService.getAllPractitionersList(\r\n                value\r\n            );\r\n            if (response.status == true) {\r\n                if (response.data.data.length > 0) {\r\n                    this.setState({\r\n                        allPractitioners: response.data.data,\r\n                        practitioner: parseInt(response.data.data[0].practitioner_id),\r\n                    });\r\n                } else {\r\n                    this.setState({\r\n                        allPractitioners: [],\r\n                        practitioner: \"\",\r\n                    });\r\n                }\r\n                console.log(\"all practitioner List >>>\", this.state.allPractitioners);\r\n            }\r\n        } catch (e) {\r\n            console.log(\"error >>>\", e);\r\n            console.log(e, e.data);\r\n        }\r\n    };\r\n\r\n    componentDidMount = async () => {\r\n        if (AuthenticationService.getUser()) {\r\n            this.getPatient();\r\n            console.log(\"profile\", Config.getProfileData());\r\n            if (Config.getProfileData().role === 100) {\r\n                this.getAllProviders();\r\n            }\r\n            if (Config.getProfileData().role === 50) {\r\n                this.getAllPractitioners(Config.getProfileData().id);\r\n                this.setState({\r\n                    providerName: Config.getProfileData().name\r\n                })\r\n            }\r\n            if (Config.getProfileData().role === 10) {\r\n                this.setState({\r\n                    provider: null,\r\n                    practitioner: null,\r\n                    providerName: Config.getProfileData().provider\r\n                })\r\n            }\r\n        } else {\r\n            this.props.history.push({\r\n                pathname: \"/login\",\r\n            });\r\n        }\r\n    };\r\n\r\n    handleMedicalRecordOnClick(cell, row) {\r\n        this.props.history.push({\r\n            pathname: \"/mymedicalreport\",\r\n            patient_id: row.patient_id,\r\n        });\r\n    }\r\n\r\n    async handleArchiveOnClick(cell, row) {\r\n        console.log(\r\n            \"Archive button clicked, active flag:\",\r\n            row.active_fl,\r\n            row.patient_id\r\n        );\r\n        const data = {\r\n            patient_id: row.patient_id,\r\n        };\r\n        try {\r\n            this.setState({\r\n                isArchiving: true,\r\n            });\r\n            const response = await PatientsService.archivePatient(data);\r\n            if (response.status == true) {\r\n                console.log(response.data);\r\n                this.setState({\r\n                    archiveMessage: \"Patient archived successfully\",\r\n                    isArchiving: false,\r\n                });\r\n                this.getPatient();\r\n            } else {\r\n                this.setState({\r\n                    archiveMessage: response.data.data.error,\r\n                    isArchiving: false,\r\n                });\r\n            }\r\n            console.log(\"archive Patient>>>\", this.state.archiveMessage);\r\n        } catch (e) {\r\n            console.log(e, e.data);\r\n        }\r\n    }\r\n\r\n    actionColButton = (cell, row) => {\r\n        return (\r\n            <ButtonGroup>\r\n                <Button\r\n                    size=\"sm\"\r\n                    outline\r\n                    color=\"primary\"\r\n                    onClick={() => this.handleMedicalRecordOnClick(cell, row)}\r\n                >\r\n                    Medical Record\r\n        </Button>\r\n                <Button\r\n                    size=\"sm\"\r\n                    outline\r\n                    color=\"danger\"\r\n                    onClick={() => this.handleArchiveOnClick(cell, row)}\r\n                    disabled={this.state.isArchiving}\r\n                >\r\n                    {this.state.isArchiving ? \"Archiving...\" : \"Archive\"}\r\n                </Button>\r\n            </ButtonGroup>\r\n        );\r\n    };\r\n\r\n    onChangeFirstName(value) {\r\n        this.setState({\r\n            first_name: value,\r\n        });\r\n    }\r\n\r\n    onChangeLastName(value) {\r\n        this.setState({\r\n            last_name: value,\r\n        });\r\n    }\r\n\r\n    onChangeEmail(value) {\r\n        this.setState({\r\n            emailId: value,\r\n        });\r\n    }\r\n\r\n    onChangePassword(value) {\r\n        this.setState({\r\n            password: value,\r\n        });\r\n    }\r\n\r\n    secureEntry() {\r\n        this.setState({\r\n            hidePassword: !this.state.hidePassword,\r\n        });\r\n    }\r\n\r\n    onChangeMyKad(value) {\r\n        this.setState({\r\n            mykad: value,\r\n        });\r\n    }\r\n\r\n    onChangeType(value) {\r\n        this.setState({\r\n            type: value,\r\n        });\r\n    }\r\n\r\n    onChangeProvider(value) {\r\n        console.log(\"provider_id >>>\", value);\r\n        this.getAllPractitioners(value);\r\n        this.setState({\r\n            provider: parseInt(value),\r\n        });\r\n    }\r\n    onChangePractitioner(value) {\r\n        this.setState({\r\n            practitioner: parseInt(value),\r\n        });\r\n    }\r\n    async CreatePatient() {\r\n        this.setState({\r\n            isLoading: true,\r\n            authenticationMessage: \"\",\r\n        });\r\n\r\n        if (this.state.first_name == \"\") {\r\n            this.setState({\r\n                first_name_errorMessage: \"Enter First Name\",\r\n                isLoading: false,\r\n            });\r\n            return;\r\n        } else {\r\n            this.setState({\r\n                first_name_errorMessage: \"\",\r\n            });\r\n        }\r\n\r\n        if (this.state.last_name == \"\") {\r\n            this.setState({\r\n                last_name_errorMessage: \"Enter Last Name\",\r\n                isLoading: false,\r\n            });\r\n            return;\r\n        } else {\r\n            this.setState({\r\n                last_name_errorMessage: \"\",\r\n            });\r\n        }\r\n\r\n        if (this.state.emailId == \"\") {\r\n            this.setState({\r\n                emailId_errorMessage: \"Enter email ID\",\r\n                isLoading: false,\r\n            });\r\n            return;\r\n        } else {\r\n            if (validator.isEmail(this.state.emailId)) {\r\n                this.setState({\r\n                    emailId_errorMessage: \"\",\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    emailId_errorMessage: \"Enter a valid email ID\",\r\n                    isLoading: false,\r\n                });\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (this.state.password == \"\") {\r\n            this.setState({\r\n                password_errorMessage: \"Enter Password\",\r\n                isLoading: false,\r\n            });\r\n            return;\r\n        } else {\r\n            this.setState({\r\n                password_errorMessage: \"\",\r\n            });\r\n        }\r\n\r\n        if (this.state.mykad == \"\") {\r\n            this.setState({\r\n                mykad_errorMessage: \"Enter MyKad id\",\r\n                isLoading: false,\r\n            });\r\n            return;\r\n        } else {\r\n            if (this.state.mykad.length > 20) {\r\n                this.setState({\r\n                    mykad_errorMessage: \"MyKad ID can be maximum of 20 characters\",\r\n                    isLoading: false,\r\n                });\r\n                return;\r\n            } else {\r\n                this.setState({\r\n                    mykad_errorMessage: \"\",\r\n                });\r\n            }\r\n        }\r\n        if (this.state.practitioner == \"\") {\r\n            this.setState({\r\n                practitioner_errorMessage: \"No practitioner available\",\r\n            });\r\n            return;\r\n        } else {\r\n            this.setState({\r\n                practitioner_errorMessage: \"\",\r\n            });\r\n            const postData = {\r\n                first_name: this.state.first_name,\r\n                last_name: this.state.last_name,\r\n                email_tx: this.state.emailId,\r\n                ic_card_tx: this.state.mykad,\r\n                provider_id: parseInt(this.state.provider),\r\n                practitioner_id: this.state.practitioner,\r\n                password: this.state.password,\r\n            };\r\n\r\n            try {\r\n                console.log('post data >>> ', postData);\r\n                const response = await PatientsService.createPatient(postData);\r\n                if (response.status == true) {\r\n                    console.log(response.data);\r\n                    this.setState({\r\n                        color: \"success\",\r\n                        authenticationMessage: response.data.message,\r\n                        isLoading: false,\r\n                    });\r\n                    this.getPatient();\r\n                } else {\r\n                    this.setState({\r\n                        color: \"danger\",\r\n                        isLoading: false,\r\n                        authenticationMessage: response.data.data.error,\r\n                    });\r\n                }\r\n            } catch (e) {\r\n                console.log(e, e.data);\r\n            }\r\n        }\r\n    }\r\n\r\n    createColumnDefinitions() {\r\n        return [\r\n            {\r\n                dataField: \"patient_id\",\r\n                hidden: true,\r\n                isKey: true,\r\n            },\r\n            {\r\n                dataField: \"first_name\",\r\n                text: \"Patient's First Name\",\r\n                sort: true,\r\n                sortCaret,\r\n                formatter: (cell) => <span className=\"text-inverse\">{cell}</span>,\r\n            },\r\n            {\r\n                dataField: \"last_name\",\r\n                text: \"Patient's Last Name\",\r\n                sort: true,\r\n                sortCaret,\r\n                formatter: (cell) => <span className=\"text-inverse\">{cell}</span>,\r\n            },\r\n            {\r\n                dataField: \"created_dt\",\r\n                text: \"Date Created\",\r\n                formatter: (cell) => moment(cell).format(\"DD/MM/YYYY\"),\r\n                sort: true,\r\n                sortCaret,\r\n            },\r\n            {\r\n                text: \"Action\",\r\n                formatter: this.actionColButton,\r\n            },\r\n        ];\r\n    }\r\n    handleCallback = async (childData) => {\r\n        this.getPatient(null, childData);\r\n    };\r\n\r\n    clearState() {\r\n        this.setState({\r\n            first_name: \"\",\r\n            last_name: \"\",\r\n            emailId: \"\",\r\n            password: \"\",\r\n            mykad: \"\",\r\n            provider: null,\r\n            practitioner: \"\",\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const columnDefs = this.createColumnDefinitions();\r\n\r\n        return (\r\n            <ToolkitProvider\r\n                keyField=\"id\"\r\n                data={this.state.patientsList}\r\n                columns={columnDefs}\r\n                search\r\n                exportCSV\r\n            >\r\n                {(props) => (\r\n                    <React.Fragment>\r\n                        <div className=\"d-flex justify-content-end align-items-center mb-2\">\r\n                            {/* <h6 className=\"my-0\">\r\n                                    AdvancedTable A\r\n                                </h6> */}\r\n                            <div className=\"d-flex ml-auto\">\r\n                                <CustomSearch\r\n                                    className=\"mr-2\"\r\n                                    {...props.searchProps}\r\n                                    parentCallBack={this.handleCallback}\r\n                                />\r\n                                <ButtonGroup>\r\n                                    <Button size=\"sm\" outline id=\"modalDefault301\">\r\n                                        <i className=\"fa fa-fw fa-plus\"></i>\r\n                                    </Button>\r\n                                    <UncontrolledModal\r\n                                        target=\"modalDefault301\"\r\n                                        className=\"modal-outline-primary\"\r\n                                    >\r\n                                        <ModalHeader tag=\"h5\">New Patient</ModalHeader>\r\n                                        <ModalBody>\r\n                                            <Form>\r\n                                                {/* START Input */}\r\n                                                <FormGroup row>\r\n                                                    <Label for=\"first_name\" sm={4}>\r\n                                                        First Name\r\n                          </Label>\r\n                                                    <Col sm={8}>\r\n                                                        <Input\r\n                                                            type=\"text\"\r\n                                                            name=\"first_name\"\r\n                                                            id=\"first_name\"\r\n                                                            placeholder=\"First Name\"\r\n                                                            value={this.state.first_name}\r\n                                                            onChange={(e) =>\r\n                                                                this.onChangeFirstName(e.target.value)\r\n                                                            }\r\n                                                        />\r\n                                                        <FormText color=\"danger\">\r\n                                                            {this.state.first_name_errorMessage}\r\n                                                        </FormText>\r\n                                                    </Col>\r\n                                                </FormGroup>\r\n                                                {/* END Input */}\r\n                                                {/* START Input */}\r\n                                                <FormGroup row>\r\n                                                    <Label for=\"last_name\" sm={4}>\r\n                                                        Last Name\r\n                          </Label>\r\n                                                    <Col sm={8}>\r\n                                                        <Input\r\n                                                            type=\"text\"\r\n                                                            name=\"last_name\"\r\n                                                            id=\"last_name\"\r\n                                                            placeholder=\"Last Name\"\r\n                                                            value={this.state.last_name}\r\n                                                            onChange={(e) =>\r\n                                                                this.onChangeLastName(e.target.value)\r\n                                                            }\r\n                                                        />\r\n                                                        <FormText color=\"danger\">\r\n                                                            {this.state.last_name_errorMessage}\r\n                                                        </FormText>\r\n                                                    </Col>\r\n                                                </FormGroup>\r\n                                                {/* END Input */}\r\n                                                {/* START Input */}\r\n                                                <FormGroup row>\r\n                                                    <Label for=\"emailId\" sm={4}>\r\n                                                        Email ID\r\n                          </Label>\r\n                                                    <Col sm={8}>\r\n                                                        <Input\r\n                                                            type=\"email\"\r\n                                                            name=\"emailId\"\r\n                                                            id=\"emailId\"\r\n                                                            placeholder=\"user@example.com\"\r\n                                                            value={this.state.emailId}\r\n                                                            onChange={(e) =>\r\n                                                                this.onChangeEmail(e.target.value)\r\n                                                            }\r\n                                                        />\r\n                                                        <FormText color=\"danger\">\r\n                                                            {this.state.emailId_errorMessage}\r\n                                                        </FormText>\r\n                                                    </Col>\r\n                                                </FormGroup>\r\n                                                {/* END Input */}\r\n                                                {/* START Input */}\r\n                                                <FormGroup row>\r\n                                                    <Label for=\"password\" sm={4}>\r\n                                                        Password\r\n                          </Label>\r\n                                                    <Col sm={8}>\r\n                                                        <InputGroup>\r\n                                                            <Input\r\n                                                                type={\r\n                                                                    this.state.hidePassword ? \"password\" : \"text\"\r\n                                                                }\r\n                                                                name=\"password\"\r\n                                                                id=\"password\"\r\n                                                                placeholder=\"Password\"\r\n                                                                className=\"bg-white\"\r\n                                                                value={this.state.password}\r\n                                                                onChange={(e) =>\r\n                                                                    this.onChangePassword(e.target.value)\r\n                                                                }\r\n                                                            />\r\n                                                            {this.state.hidePassword ? (\r\n                                                                <InputGroupAddon\r\n                                                                    addonType=\"append\"\r\n                                                                    onClick={() => this.secureEntry()}\r\n                                                                >\r\n                                                                    <i className=\"fa fa-fw fa-eye-slash\"></i>\r\n                                                                </InputGroupAddon>\r\n                                                            ) : (\r\n                                                                    <InputGroupAddon\r\n                                                                        addonType=\"append\"\r\n                                                                        onClick={() => this.secureEntry()}\r\n                                                                    >\r\n                                                                        <i className=\"fa fa-fw fa-eye\"></i>\r\n                                                                    </InputGroupAddon>\r\n                                                                )}\r\n                                                        </InputGroup>\r\n                                                        <FormText color=\"danger\">\r\n                                                            {this.state.password_errorMessage}\r\n                                                        </FormText>\r\n                                                    </Col>\r\n                                                </FormGroup>\r\n                                                {/* END Input */}\r\n                                                {/* START Input */}\r\n                                                <FormGroup row>\r\n                                                    <Label for=\"mykad\" sm={4}>\r\n                                                        MyKad id\r\n                          </Label>\r\n                                                    <Col sm={8}>\r\n                                                        <Input\r\n                                                            type=\"text\"\r\n                                                            name=\"mykad\"\r\n                                                            id=\"mykad\"\r\n                                                            placeholder=\"MyKad id\"\r\n                                                            value={this.state.mykad}\r\n                                                            onChange={(e) =>\r\n                                                                this.onChangeMyKad(e.target.value)\r\n                                                            }\r\n                                                        />\r\n                                                        <FormText color=\"danger\">\r\n                                                            {this.state.mykad_errorMessage}\r\n                                                        </FormText>\r\n                                                    </Col>\r\n                                                </FormGroup>\r\n                                                {/* END Input */}\r\n                                                {/* START Select */}\r\n                                                <FormGroup row>\r\n                                                    <Label for=\"provider\" sm={4}>\r\n                                                        Provider\r\n                          </Label>\r\n                                                    <Col sm={8}>\r\n                                                        {Config.getProfileData().role === 100 ? (\r\n                                                            <Input\r\n                                                                type=\"select\"\r\n                                                                name=\"select\"\r\n                                                                id=\"provider\"\r\n                                                                value={this.state.provider}\r\n                                                                onChange={(e) =>\r\n                                                                    this.onChangeProvider(e.target.value)\r\n                                                                }\r\n                                                            >\r\n                                                                {this.state.allProviders.map((obj) => (\r\n                                                                    <option value={obj.provider_id}>\r\n                                                                        {obj.name}\r\n                                                                    </option>\r\n                                                                ))}\r\n                                                            </Input>\r\n                                                        ) : (\r\n                                                                <option>{this.state.providerName}</option>\r\n                                                            )}\r\n                                                    </Col>\r\n                                                </FormGroup>\r\n                                                <FormGroup row>\r\n                                                    <Label for=\"practitioner\" sm={4}>\r\n                                                        Practitioner\r\n                          </Label>\r\n                                                    <Col sm={8}>\r\n                                                        {Config.getProfileData().role === 100 ||\r\n                                                            Config.getProfileData().role === 50 ? (\r\n                                                                <Input\r\n                                                                    type=\"select\"\r\n                                                                    name=\"select\"\r\n                                                                    id=\"practitioner\"\r\n                                                                    value={this.state.practitioner}\r\n                                                                    onChange={(e) =>\r\n                                                                        this.onChangePractitioner(e.target.value)\r\n                                                                    }\r\n                                                                >\r\n                                                                    {this.state.allPractitioners.map((obj) => (\r\n                                                                        <option value={obj.practitioner_id}>\r\n                                                                            {obj.name}\r\n                                                                        </option>\r\n                                                                    ))}\r\n                                                                </Input>\r\n                                                            ) : (\r\n                                                                <option>{Config.getProfileData().name}</option>\r\n                                                            )}\r\n                                                        <FormText color=\"danger\">\r\n                                                            {this.state.practitioner_errorMessage}\r\n                                                        </FormText>\r\n                                                    </Col>\r\n                                                </FormGroup>\r\n                                                {/* END Select */}\r\n                                            </Form>\r\n                                        </ModalBody>\r\n                                        <ModalFooter>\r\n                                            <FormText color={this.state.color}>\r\n                                                {this.state.authenticationMessage}\r\n                                            </FormText>\r\n                                            <UncontrolledModal.Close color=\"link\" data={this.state}>\r\n                                                Discard\r\n                      </UncontrolledModal.Close>\r\n                                            <Button\r\n                                                color=\"primary\"\r\n                                                onClick={() => this.CreatePatient()}\r\n                                                disabled={this.state.isLoading}\r\n                                            >\r\n                                                {this.state.isLoading\r\n                                                    ? \"Creating patient...\"\r\n                                                    : \"Create Patient\"}\r\n                                            </Button>\r\n                                        </ModalFooter>\r\n                                    </UncontrolledModal>\r\n                                </ButtonGroup>\r\n                            </div>\r\n                        </div>\r\n                        <BootstrapTable\r\n                            classes=\"table-responsive-sm\"\r\n                            bordered={false}\r\n                            responsive\r\n                            noDataIndication={this.state.isGettingData ? 'Getting patients...' : 'No patients found!'}\r\n                            {...props.baseProps}\r\n                        />\r\n\r\n                        <ButtonGroup>\r\n                            <Button\r\n                                size=\"sm\"\r\n                                outline\r\n                                onClick={() => {\r\n                                    this.getPatient(this.state.previousPage, null);\r\n                                }}\r\n                                disabled={this.state.previousPage ? false : true}\r\n                            >\r\n                                <i className=\"fa fa-fw fa-chevron-left\"></i>\r\n                            </Button>\r\n                            <Button\r\n                                size=\"sm\"\r\n                                outline\r\n                                onClick={() => {\r\n                                    this.getPatient(this.state.nextPage, null);\r\n                                }}\r\n                                disabled={this.state.nextPage ? false : true}\r\n                            >\r\n                                <i className=\"fa fa-fw fa-chevron-right\"></i>\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                    </React.Fragment>\r\n                )}\r\n            </ToolkitProvider>\r\n        );\r\n    }\r\n}\r\n","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Sidebar\\SidebarContent.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\FloatGrid\\floatGridContext.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\SidebarMenu\\MenuContext.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\UncontrolledModal\\context.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\common.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Tables\\ExtendedTable\\components\\PractitionersTable.js",["950","951","952","953","954","955","956","957","958","959","960","961","962","963","964","965","966","967","968","969","970","971"],"import React from \"react\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\r\nimport filterFactory, {\r\n    Comparator,\r\n    dateFilter,\r\n} from \"react-bootstrap-table2-filter\";\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\nimport _ from \"lodash\";\r\nimport moment from \"moment\";\r\nimport axios from \"axios\";\r\nimport paths from \"./../../../../config/Endpoint\";\r\nimport AuthenticationService from \"./../../../../services/AuthenticationService\";\r\nimport Config from \"./../../../../config/Config\";\r\n\r\nimport {\r\n    Badge,\r\n    Button,\r\n    ButtonGroup,\r\n    UncontrolledModal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    Col,\r\n    Input,\r\n    InputGroup,\r\n    InputGroupAddon,\r\n    FormText,\r\n    ModalFooter,\r\n    Label,\r\n    Form,\r\n    FormGroup,\r\n} from \"../../../../components\";\r\nimport { CustomExportCSV } from \"./CustomExportButton\";\r\nimport { CustomSearch } from \"./CustomSearch\";\r\nimport { CustomPaginationPanel } from \"./CustomPaginationPanel\";\r\nimport { CustomSizePerPageButton } from \"./CustomSizePerPageButton\";\r\nimport { CustomPaginationTotal } from \"./CustomPaginationTotal\";\r\nimport { buildCustomTextFilter } from \"../filters\";\r\n\r\nimport PractitionersService from \"./../../../../services/PractitionersService\";\r\nimport validator from \"validator\";\r\nimport MenuListingService from \"./../../../../services/MenuListingService\";\r\nimport ProvidersService from \"../../../../services/ProvidersService\";\r\n\r\nconst sortCaret = (order) => {\r\n    if (!order) return <i className=\"fa fa-fw fa-sort text-muted\"></i>;\r\n    if (order) return <i className={`fa fa-fw text-muted fa-sort-${order}`}></i>;\r\n};\r\n\r\nexport default class PractitionersTable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            practitionersList: [],\r\n            firstname: \"\",\r\n            name_errorMessage: \"\",\r\n            lastname_errorMessage: \"\",\r\n            lastname: \"\",\r\n            emailId: \"\",\r\n            emailId_errorMessage: \"\",\r\n            hidePassword: true,\r\n            password: \"\",\r\n            password_errorMessage: \"\",\r\n            color: \"black\",\r\n            isLoading: false,\r\n            mykad_errorMessage: \"\",\r\n            mykad: \"\",\r\n            type: 1,\r\n            firstname_errorMessage: \"\",\r\n            authenticationMessage: \"\",\r\n            allProviders: [],\r\n            provider: null,\r\n            provide_id: null,\r\n            previousPage: \"\",\r\n            nextPage: \"\",\r\n            archiveMessage: \"\",\r\n            isArchiving: false,\r\n            isGettingData: false\r\n        };\r\n        this.headerCheckboxRef = React.createRef();\r\n    }\r\n\r\n    getList = async (page = null, search = null) => {\r\n        try {\r\n            this.setState({\r\n                isGettingData: true\r\n            });\r\n            const paramData = {\r\n                page: page,\r\n                search: search,\r\n            };\r\n\r\n            if (this.props.location.provider_id) {\r\n                const response = await PractitionersService.getPractitionerOfThisProvider(\r\n                    paramData,\r\n                    this.props.location.provider_id\r\n                );\r\n                if (response.status == true) {\r\n                    this.setState({\r\n                        practitionersList: response.data.result,\r\n                        nextPage: response.data.next_page,\r\n                        previousPage: response.data.previous_page,\r\n                        isGettingData: false\r\n                    });\r\n                }\r\n            } else {\r\n                const response = await PractitionersService.getList(paramData);\r\n                if (response.status == true) {\r\n                    this.setState({\r\n                        practitionersList: response.data.result,\r\n                        nextPage: response.data.next_page,\r\n                        previousPage: response.data.previous_page,\r\n                        isGettingData: false\r\n                    });\r\n                }\r\n            }\r\n        } catch (e) {\r\n            console.log(\"error >>>\", e);\r\n            console.log(e, e.data);\r\n        }\r\n    };\r\n\r\n    getAllProviders = async () => {\r\n        try {\r\n            const response = await ProvidersService.getAllProvidersList();\r\n            if (response.status == true) {\r\n                this.setState({\r\n                    allProviders: response.data.data,\r\n                    provider: response.data.data[0].provider_id,\r\n                });\r\n                console.log(\"all Providers List >>>\", this.state.allProviders);\r\n            }\r\n        } catch (e) {\r\n            console.log(\"error >>>\", e);\r\n            console.log(e, e.data);\r\n        }\r\n    };\r\n\r\n    componentDidMount = async () => {\r\n        if (AuthenticationService.getUser()) {\r\n            this.getList();\r\n            if (Config.getProfileData().role === 100) {\r\n                this.getAllProviders();\r\n            }\r\n        } else {\r\n            this.props.history.push({\r\n                pathname: \"/login\",\r\n            });\r\n        }\r\n    };\r\n\r\n    // handleAddRow() {\r\n    //   const currentSize = this.state.products.length;\r\n\r\n    //   this.setState({\r\n    //     products: [generateRow(currentSize + 1), ...this.state.products],\r\n    //   });\r\n    // }\r\n\r\n\r\n    handleImmunizationssOnClick(cell, row) {\r\n        console.log(\"Immunizations Button clicked, rowId:\", row.practitioner_id);\r\n        this.props.history.push({\r\n            pathname: \"/immunizations\",\r\n            practitioner_id: row.practitioner_id,\r\n        });\r\n    }\r\n\r\n    handleAppointmentsOnClick(cell, row) {\r\n        console.log(\"Appointments button clicked, rowId:\", row.practitioner_id);\r\n        this.props.history.push({\r\n            pathname: \"/appointments\",\r\n            practitioner_id: row.practitioner_id,\r\n        });\r\n    }\r\n\r\n    handleArchiveOnClick = async (cell, row) => {\r\n        console.log(\r\n            \"Archive button clicked, active flag:\",\r\n            row.active_fl,\r\n            row.practitioner_id\r\n        );\r\n        const data = {\r\n            practitioner_id: row.practitioner_id,\r\n        };\r\n        this.setState({\r\n            isArchiving: true,\r\n        });\r\n        try {\r\n            const response = await PractitionersService.archivePractitioner(data);\r\n            if (response.status == true) {\r\n                console.log(response.data);\r\n                this.setState({\r\n                    archiveMessage: \"Practitioner archived successfully\",\r\n                    isArchiving: false,\r\n                });\r\n                this.getList();\r\n            } else {\r\n                this.setState({\r\n                    archiveMessage: response.data.data.error,\r\n                    isArchiving: false,\r\n                });\r\n            }\r\n            console.log(\"archive practitioner>>>\", this.state.archiveMessage);\r\n        } catch (e) {\r\n            console.log(e, e.data);\r\n        }\r\n    };\r\n\r\n    actionColButton = (cell, row) => {\r\n        return (\r\n            <ButtonGroup>\r\n                <Button\r\n                    size=\"sm\"\r\n                    outline\r\n                    color=\"purple\"\r\n                    onClick={() => this.handleAppointmentsOnClick(cell, row)}\r\n                >\r\n                    Appointments\r\n        </Button>\r\n                <Button\r\n                    size=\"sm\"\r\n                    outline\r\n                    color=\"primary\"\r\n                    onClick={() => this.handleImmunizationssOnClick(cell, row)}\r\n                >\r\n                    Immunizations\r\n        </Button>\r\n                <Button\r\n                    size=\"sm\"\r\n                    outline\r\n                    color=\"danger\"\r\n                    onClick={() => this.handleArchiveOnClick(cell, row)}\r\n                    disabled={this.state.isArchiving}\r\n                >\r\n                    Archive\r\n        </Button>\r\n            </ButtonGroup>\r\n        );\r\n    };\r\n\r\n    createColumnDefinitions() {\r\n        return [\r\n            {\r\n                dataField: \"practitioner_id\",\r\n                hidden: true,\r\n                isKey: true,\r\n            },\r\n            {\r\n                dataField: \"first_name\",\r\n                text: \"First Name\",\r\n                sort: true,\r\n                sortCaret,\r\n                formatter: (cell) => <span className=\"text-inverse\">{cell}</span>,\r\n            },\r\n            {\r\n                dataField: \"last_name\",\r\n                text: \"Last Name\",\r\n                sort: true,\r\n                sortCaret,\r\n                formatter: (cell) => <span className=\"text-inverse\">{cell}</span>,\r\n            },\r\n            {\r\n                dataField: \"doctor_fl\",\r\n                text: \"Doctor/Nurse\",\r\n                sort: true,\r\n                sortCaret,\r\n                formatter: (cell) => (\r\n                    <span className=\"text-inverse\">\r\n                        {cell ? (\r\n                            <Badge color=\"indigo\">Doctor</Badge>\r\n                        ) : (\r\n                                <Badge color=\"primary\">Nurse</Badge>\r\n                            )}\r\n                    </span>\r\n                ),\r\n            },\r\n            {\r\n                dataField: \"created_dt\",\r\n                text: \"Date Added\",\r\n                formatter: (cell) => moment(cell).format(\"DD/MM/YYYY\"),\r\n                sort: true,\r\n                sortCaret,\r\n            },\r\n            {\r\n                text: \"Action\",\r\n                formatter: this.actionColButton,\r\n            },\r\n        ];\r\n    }\r\n\r\n    onChangeFirstName(value) {\r\n        this.setState({\r\n            firstname: value,\r\n        });\r\n    }\r\n\r\n    onChangeLastName(value) {\r\n        this.setState({\r\n            lastname: value,\r\n        });\r\n    }\r\n\r\n    onChangeEmail(value) {\r\n        this.setState({\r\n            emailId: value,\r\n        });\r\n    }\r\n\r\n    onChangePassword(value) {\r\n        this.setState({\r\n            password: value,\r\n        });\r\n    }\r\n\r\n    secureEntry() {\r\n        this.setState({\r\n            hidePassword: !this.state.hidePassword,\r\n        });\r\n    }\r\n\r\n    onChangeMyKad(value) {\r\n        this.setState({\r\n            mykad: value,\r\n        });\r\n    }\r\n\r\n    onChangeType(value) {\r\n        this.setState({\r\n            type: value,\r\n        });\r\n    }\r\n\r\n    onChangeProvider(value) {\r\n        this.setState({\r\n            provider: value,\r\n        });\r\n    }\r\n\r\n    async CreatePractitioner() {\r\n        this.setState({\r\n            isLoading: true,\r\n            authenticationMessage: \"\",\r\n        });\r\n\r\n        if (this.state.firstname == \"\") {\r\n            this.setState({\r\n                firstname_errorMessage: \"Enter First Name\",\r\n                isLoading: false,\r\n            });\r\n            return;\r\n        } else {\r\n            this.setState({\r\n                firstname_errorMessage: \"\",\r\n            });\r\n        }\r\n\r\n        if (this.state.lastname == \"\") {\r\n            this.setState({\r\n                lastname_errorMessage: \"Enter Last Name\",\r\n                isLoading: false,\r\n            });\r\n            return;\r\n        } else {\r\n            this.setState({\r\n                lastname_errorMessage: \"\",\r\n            });\r\n        }\r\n\r\n        if (this.state.emailId == \"\") {\r\n            this.setState({\r\n                emailId_errorMessage: \"Enter email ID\",\r\n                isLoading: false,\r\n            });\r\n            return;\r\n        } else {\r\n            if (validator.isEmail(this.state.emailId)) {\r\n                this.setState({\r\n                    emailId_errorMessage: \"\",\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    emailId_errorMessage: \"Enter a valid email ID\",\r\n                    isLoading: false,\r\n                });\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (this.state.password == \"\") {\r\n            this.setState({\r\n                password_errorMessage: \"Enter Password\",\r\n                isLoading: false,\r\n            });\r\n            return;\r\n        } else {\r\n            this.setState({\r\n                password_errorMessage: \"\",\r\n            });\r\n        }\r\n\r\n        if (this.state.mykad == \"\") {\r\n            this.setState({\r\n                mykad_errorMessage: \"Enter MyKad id\",\r\n                isLoading: false,\r\n            });\r\n            return;\r\n        } else {\r\n            if (this.state.mykad.length > 20) {\r\n                this.setState({\r\n                    mykad_errorMessage: \"length of MyKad id should be 20\",\r\n                    isLoading: false,\r\n                });\r\n                return;\r\n            } else {\r\n                this.setState({\r\n                    mykad_errorMessage: \"\",\r\n                });\r\n            }\r\n        }\r\n\r\n        const postData = {\r\n            first_name: this.state.firstname,\r\n            last_name: this.state.lastname,\r\n            email_tx: this.state.emailId,\r\n            ic_card_tx: this.state.mykad,\r\n            provider_id: Number(this.state.provider),\r\n            doctor_fl: this.state.type,\r\n            password: this.state.password,\r\n        };\r\n\r\n        try {\r\n            console.log(postData);\r\n            const response = await PractitionersService.createPractitioner(postData);\r\n            if (response.status == true) {\r\n                console.log(response.data);\r\n                this.setState({\r\n                    color: \"success\",\r\n                    authenticationMessage: response.data.message,\r\n                    isLoading: false,\r\n                });\r\n                this.getList();\r\n            } else {\r\n                this.setState({\r\n                    color: \"danger\",\r\n                    isLoading: false,\r\n                    authenticationMessage: response.data.data.error,\r\n                });\r\n            }\r\n        } catch (e) {\r\n            console.log(e, e.data);\r\n        }\r\n    }\r\n    handleCallback = async (childData) => {\r\n        this.getList(null, childData);\r\n    };\r\n\r\n    render() {\r\n        const columnDefs = this.createColumnDefinitions();\r\n\r\n        return (\r\n            \r\n            <ToolkitProvider\r\n                keyField=\"id\"\r\n                data={this.state.practitionersList}\r\n                columns={columnDefs}\r\n            >\r\n                \r\n                {(props) => (\r\n                    <React.Fragment>\r\n                        <div className=\"d-flex justify-content-end align-items-center mb-2\">\r\n                            <div className=\"d-flex ml-auto\">\r\n                                \r\n                                <CustomSearch\r\n                                    className=\"mr-2\"\r\n                                    {...props.searchProps}\r\n                                    parentCallBack={this.handleCallback}\r\n                                />\r\n                                <ButtonGroup>\r\n                                    <Button\r\n                                        size=\"sm\"\r\n                                        outline\r\n                                        id=\"modalDefault301\"\r\n                                    >\r\n                                        <i className=\"fa fa-fw fa-plus\"></i>\r\n                                    </Button>\r\n                                    <UncontrolledModal\r\n                                        target=\"modalDefault301\"\r\n                                        className=\"modal-outline-primary\"\r\n                                    >\r\n                                        <ModalHeader tag=\"h5\">New Practitioner</ModalHeader>\r\n                                        <ModalBody>\r\n                                            <Form>\r\n                                                {/* START Input */}\r\n                                                <FormGroup row>\r\n                                                    <Label for=\"firstname\" sm={4}>\r\n                                                        First Name\r\n                          </Label>\r\n                                                    <Col sm={8}>\r\n                                                        <Input\r\n                                                            type=\"text\"\r\n                                                            name=\"firstname\"\r\n                                                            id=\"firstname\"\r\n                                                            placeholder=\"First Name\"\r\n                                                            value={this.state.firstname}\r\n                                                            onChange={(e) =>\r\n                                                                this.onChangeFirstName(e.target.value)\r\n                                                            }\r\n                                                        />\r\n                                                        <FormText color=\"danger\">\r\n                                                            {this.state.firstname_errorMessage}\r\n                                                        </FormText>\r\n                                                    </Col>\r\n                                                </FormGroup>\r\n                                                {/* END Input */}\r\n                                                {/* START Input */}\r\n                                                <FormGroup row>\r\n                                                    <Label for=\"lastname\" sm={4}>\r\n                                                        Last Name\r\n                                                    </Label>\r\n                                                    <Col sm={8}>\r\n                                                        <Input\r\n                                                            type=\"text\"\r\n                                                            name=\"firstname\"\r\n                                                            id=\"lastname\"\r\n                                                            placeholder=\"Last Name\"\r\n                                                            value={this.state.lastname}\r\n                                                            onChange={(e) =>\r\n                                                                this.onChangeLastName(e.target.value)\r\n                                                            }\r\n                                                        />\r\n                                                        <FormText color=\"danger\">\r\n                                                            {this.state.lastname_errorMessage}\r\n                                                        </FormText>\r\n                                                    </Col>\r\n                                                </FormGroup>\r\n                                                {/* END Input */}\r\n                                                {/* START Input */}\r\n                                                <FormGroup row>\r\n                                                    <Label for=\"emailId\" sm={4}>\r\n                                                        Email ID\r\n                          </Label>\r\n                                                    <Col sm={8}>\r\n                                                        <Input\r\n                                                            type=\"email\"\r\n                                                            name=\"emailId\"\r\n                                                            id=\"emailId\"\r\n                                                            placeholder=\"user@example.com\"\r\n                                                            value={this.state.emailId}\r\n                                                            onChange={(e) =>\r\n                                                                this.onChangeEmail(e.target.value)\r\n                                                            }\r\n                                                        />\r\n                                                        <FormText color=\"danger\">\r\n                                                            {this.state.emailId_errorMessage}\r\n                                                        </FormText>\r\n                                                    </Col>\r\n                                                </FormGroup>\r\n                                                {/* END Input */}\r\n                                                {/* START Input */}\r\n                                                <FormGroup row>\r\n                                                    <Label for=\"password\" sm={4}>\r\n                                                        Password\r\n                          </Label>\r\n                                                    <Col sm={8}>\r\n                                                        <InputGroup>\r\n                                                            <Input\r\n                                                                type={\r\n                                                                    this.state.hidePassword ? \"password\" : \"text\"\r\n                                                                }\r\n                                                                name=\"password\"\r\n                                                                id=\"password\"\r\n                                                                placeholder=\"Password\"\r\n                                                                className=\"bg-white\"\r\n                                                                value={this.state.password}\r\n                                                                onChange={(e) =>\r\n                                                                    this.onChangePassword(e.target.value)\r\n                                                                }\r\n                                                            />\r\n                                                            {this.state.hidePassword ? (\r\n                                                                <InputGroupAddon\r\n                                                                    addonType=\"append\"\r\n                                                                    onClick={() => this.secureEntry()}\r\n                                                                >\r\n                                                                    <i className=\"fa fa-fw fa-eye-slash\"></i>\r\n                                                                </InputGroupAddon>\r\n                                                            ) : (\r\n                                                                    <InputGroupAddon\r\n                                                                        addonType=\"append\"\r\n                                                                        onClick={() => this.secureEntry()}\r\n                                                                    >\r\n                                                                        <i className=\"fa fa-fw fa-eye\"></i>\r\n                                                                    </InputGroupAddon>\r\n                                                                )}\r\n                                                        </InputGroup>\r\n                                                        <FormText color=\"danger\">\r\n                                                            {this.state.password_errorMessage}\r\n                                                        </FormText>\r\n                                                    </Col>\r\n                                                </FormGroup>\r\n                                                {/* END Input */}\r\n                                                {/* START Input */}\r\n                                                <FormGroup row>\r\n                                                    <Label for=\"mykad\" sm={4}>\r\n                                                        MyKad id\r\n                          </Label>\r\n                                                    <Col sm={8}>\r\n                                                        <Input\r\n                                                            type=\"text\"\r\n                                                            name=\"mykad\"\r\n                                                            id=\"mykad\"\r\n                                                            placeholder=\"MyKad id\"\r\n                                                            value={this.state.mykad}\r\n                                                            onChange={(e) =>\r\n                                                                this.onChangeMyKad(e.target.value)\r\n                                                            }\r\n                                                        />\r\n                                                        <FormText color=\"danger\">\r\n                                                            {this.state.mykad_errorMessage}\r\n                                                        </FormText>\r\n                                                    </Col>\r\n                                                </FormGroup>\r\n                                                {/* END Input */}\r\n                                                {/* START Select */}\r\n                                                <FormGroup row>\r\n                                                    <Label for=\"type\" sm={4}>\r\n                                                        Type\r\n                          </Label>\r\n                                                    <Col sm={8}>\r\n                                                        <Input\r\n                                                            type=\"select\"\r\n                                                            name=\"select\"\r\n                                                            id=\"type\"\r\n                                                            onChange={(e) =>\r\n                                                                this.onChangeType(e.target.value)\r\n                                                            }\r\n                                                        >\r\n                                                            <option value={1}>Doctor</option>\r\n                                                            <option value={0}>Nurse</option>\r\n                                                        </Input>\r\n                                                    </Col>\r\n                                                </FormGroup>\r\n                                                {/* END Select */}\r\n\r\n                                                {/* START Select */}\r\n                                                <FormGroup row>\r\n                                                    <Label for=\"provider\" sm={4}>\r\n                                                        Provider\r\n                          </Label>\r\n                                                    <Col sm={8}>\r\n                                                        {Config.getProfileData().role === 100 ? (\r\n                                                            <Input\r\n                                                                type=\"select\"\r\n                                                                name=\"select\"\r\n                                                                id=\"provider\"\r\n                                                                onChange={(e) =>\r\n                                                                    this.onChangeProvider(e.target.value)\r\n                                                                }\r\n                                                            >\r\n                                                                {this.state.allProviders.map((obj) => (\r\n                                                                    <option value={obj.provider_id}>\r\n                                                                        {obj.name}\r\n                                                                    </option>\r\n                                                                ))}\r\n\r\n                                                                {/* <option defaultValue=\"\">SSG Hospital</option>\r\n                                                                <option>KD Hospital</option> */}\r\n                                                            </Input>\r\n                                                        ) : (\r\n                                                                <option>{Config.getProfileData().name}</option>\r\n                                                            )}\r\n                                                    </Col>\r\n                                                </FormGroup>\r\n                                                {/* END Select */}\r\n                                            </Form>\r\n                                        </ModalBody>\r\n                                        <ModalFooter>\r\n                                            <FormText color={this.state.color}>\r\n                                                {this.state.authenticationMessage}\r\n                                            </FormText>\r\n                                            <UncontrolledModal.Close color=\"link\">\r\n                                                Discard\r\n                      </UncontrolledModal.Close>\r\n                                            <Button\r\n                                                color=\"primary\"\r\n                                                onClick={() => this.CreatePractitioner()}\r\n                                                disabled={this.state.isLoading}\r\n                                            >\r\n                                                {this.state.isLoading\r\n                                                    ? \"Creating practitioner...\"\r\n                                                    : \"Create Practitioner\"}\r\n                                            </Button>\r\n                                        </ModalFooter>\r\n                                    </UncontrolledModal>\r\n                                </ButtonGroup>\r\n                            </div>\r\n                        </div>\r\n                        <BootstrapTable\r\n                            classes=\"table-responsive-sm\"\r\n                            filter={filterFactory()}\r\n                            bordered={false}\r\n                            responsive\r\n                            noDataIndication={this.state.isGettingData ? 'Getting practitioners...' : 'No practitioners found!'}\r\n                            {...props.baseProps}\r\n                        />\r\n\r\n                        <ButtonGroup>\r\n                            <Button\r\n                                size=\"sm\"\r\n                                outline\r\n                                onClick={() => {\r\n                                    this.getList(this.state.previousPage, null);\r\n                                }}\r\n                                disabled={this.state.previousPage ? false : true}\r\n                            >\r\n                                <i className=\"fa fa-fw fa-chevron-left\"></i>\r\n                            </Button>\r\n                            <Button\r\n                                size=\"sm\"\r\n                                outline\r\n                                onClick={() => {\r\n                                    this.getList(this.state.nextPage, null);\r\n                                }}\r\n                                disabled={this.state.nextPage ? false : true}\r\n                            >\r\n                                <i className=\"fa fa-fw fa-chevron-right\"></i>\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                    </React.Fragment>\r\n                )}\r\n            </ToolkitProvider>\r\n        );\r\n    }\r\n}\r\n","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Tables\\ExtendedTable\\components\\CustomPaginationTotal.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Tables\\ExtendedTable\\components\\CustomSizePerPageButton.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Tables\\ExtendedTable\\components\\CustomPaginationPanel.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Tables\\ExtendedTable\\components\\CustomSearch.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\services\\ProvidersService.js",["972","973","974","975"],"import axios from 'axios';\r\nimport paths from '../config/Endpoint';\r\nimport AuthenticationService from './AuthenticationService';\r\n\r\nconst getList = async (data) => {\r\n    const config = {\r\n        headers: {\r\n            'accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Access-Control-Allow-Origin': '*',\r\n            'Authorization': 'Bearer ' + AuthenticationService.getToken(),\r\n        },\r\n        params: {\r\n            page: data.page,\r\n            search: data.search\r\n        }\r\n    }\r\n    var response;\r\n    const res = await axios.get(paths.providers, config)\r\n        .then(function (res) {\r\n            response = { status: true, data: res.data }\r\n        })\r\n        .catch(function (err) {\r\n            console.log(err.response);\r\n            response = { status: false, data: err.response };\r\n        });\r\n    return response;\r\n}\r\n\r\nconst createProvider = async (data) => {\r\n    const config = {\r\n        headers: {\r\n            'accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Access-Control-Allow-Origin': '*',\r\n            'Authorization': 'Bearer ' + AuthenticationService.getToken(),\r\n        }\r\n    }\r\n    var response;\r\n    const res = await axios.post(paths.providers, data, config)\r\n        .then(function (res) {\r\n            response = { status: true, data: res.data }\r\n        })\r\n        .catch(function (err) {\r\n            console.log(err.response);\r\n            response = { status: false, data: err.response };\r\n        });\r\n    return response;\r\n}\r\n\r\nconst getAllProvidersList = async (data) => {\r\n    const config = {\r\n        headers: {\r\n            'accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Access-Control-Allow-Origin': '*',\r\n            'Authorization': 'Bearer ' + AuthenticationService.getToken(),\r\n        }\r\n    }\r\n    var response;\r\n    const res = await axios.get(paths.get_all_providers, config)\r\n        .then(function (res){\r\n            response = {status: true, data: res.data}\r\n        })\r\n        .catch(function (err) {\r\n            console.log(err.response);\r\n            response = { status: false, data: err.response };\r\n        });\r\n    return response;\r\n}\r\n\r\nconst archiveProvider = async (data) => {\r\n    const config = {\r\n        headers: {\r\n            'accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Access-Control-Allow-Origin': '*',\r\n            'Authorization': 'Bearer ' + AuthenticationService.getToken(),\r\n        }\r\n    }\r\n    var response;\r\n    const res = await axios.put(paths.providers,data, config)\r\n        .then(function (res){\r\n            response = {status: true, data: res.data}\r\n        })\r\n        .catch(function (err) {\r\n            console.log(err.response);\r\n            response = { status: false, data: err.response };\r\n        });\r\n    return response;\r\n}\r\n\r\n\r\n\r\nconst ProvidersService = {\r\n    getList: getList,\r\n    createProvider: createProvider,\r\n    getAllProvidersList: getAllProvidersList,\r\n    archiveProvider: archiveProvider\r\n}\r\nexport default ProvidersService;","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Tables\\ExtendedTable\\components\\CustomExportButton.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\OuterClick\\index.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\services\\VaccinesService.js",["976","977","978","979"],"import axios from 'axios';\r\nimport paths from '../config/Endpoint';\r\nimport AuthenticationService from './AuthenticationService';\r\n\r\nconst getVaccines = async (data) => {\r\n    const config = {\r\n        headers: {\r\n            'accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Access-Control-Allow-Origin': '*',\r\n            'Authorization': 'Bearer ' + AuthenticationService.getToken(),\r\n        },\r\n        params: {\r\n            page: data.page,\r\n            search: data.search\r\n        }\r\n    }\r\n    var response;\r\n    const res = await axios.get(paths.vaccines, config)\r\n        .then(function (res){\r\n            response = {status: true, data: res.data}\r\n        })\r\n        .catch(function (err) {\r\n            console.log(err.response);\r\n            response = { status: false, data: err.response };\r\n        });\r\n    return response;\r\n}\r\n\r\n\r\nconst createVaccine = async (data) => {\r\n    const config = {\r\n        headers: {\r\n            'accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Access-Control-Allow-Origin': '*',\r\n            'Authorization': 'Bearer ' + AuthenticationService.getToken(),\r\n        }\r\n    }\r\n    var response;\r\n    const res = await axios.post(paths.vaccines, data, config)\r\n        .then(function (res){\r\n            response = {status: true, data: res.data}\r\n        })\r\n        .catch(function (err) {\r\n            console.log(err.response);\r\n            response = { status: false, data: err.response };\r\n        });\r\n    return response;\r\n}\r\n\r\nconst getAllVaccinesList = async (data) => {\r\n    const config = {\r\n        headers: {\r\n            'accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Access-Control-Allow-Origin': '*',\r\n            'Authorization': 'Bearer ' + AuthenticationService.getToken(),\r\n        }\r\n    }\r\n    var response;\r\n    var apiPath = paths.get_all_vaccines;\r\n    const res = await axios.get(apiPath, config)\r\n        .then(function (res){\r\n            response = {status: true, data: res.data}\r\n        })\r\n        .catch(function (err) {\r\n            console.log(err.response);\r\n            response = { status: false, data: err.response };\r\n        });\r\n    return response;\r\n}\r\n\r\nconst archiveVaccine = async (data) => {\r\n    const config = {\r\n        headers: {\r\n            'accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Access-Control-Allow-Origin': '*',\r\n            'Authorization': 'Bearer ' + AuthenticationService.getToken(),\r\n        }\r\n    }\r\n    var response;\r\n    const res = await axios.put(paths.vaccines,data, config)\r\n        .then(function (res){\r\n            response = {status: true, data: res.data}\r\n        })\r\n        .catch(function (err) {\r\n            console.log(err.response);\r\n            response = { status: false, data: err.response };\r\n        });\r\n    return response;\r\n}\r\n\r\nconst VaccinesService = {\r\n    getVaccines: getVaccines,\r\n    createVaccine: createVaccine,\r\n    getAllVaccinesList: getAllVaccinesList,\r\n    archiveVaccine: archiveVaccine\r\n}\r\nexport default VaccinesService;","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\services\\PatientsService.js",["980","981","982","983"],"import axios from 'axios';\r\nimport paths from '../config/Endpoint';\r\nimport AuthenticationService from './AuthenticationService';\r\n\r\nconst getPatient = async (data) => {\r\n    const config = {\r\n        headers: {\r\n            'accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Access-Control-Allow-Origin': '*',\r\n            'Authorization': 'Bearer ' + AuthenticationService.getToken(),\r\n        },\r\n        params: {\r\n            page: data.page,\r\n            search: data.search\r\n        }\r\n    }\r\n    var response;\r\n    const res = await axios.get(paths.patients, config)\r\n        .then(function (res) {\r\n            response = { status: true, data: res.data }\r\n        })\r\n        .catch(function (err) {\r\n            console.log(err.response);\r\n            response = { status: false, data: err.response };\r\n        });\r\n    return response;\r\n}\r\n\r\nconst createPatient = async (data) => {\r\n    const config = {\r\n        headers: {\r\n            'accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Access-Control-Allow-Origin': '*',\r\n            'Authorization': 'Bearer ' + AuthenticationService.getToken(),\r\n        }\r\n    }\r\n    var response;\r\n    const res = await axios.post(paths.patients, data, config)\r\n        .then(function (res) {\r\n            response = { status: true, data: res.data }\r\n        })\r\n        .catch(function (err) {\r\n            console.log(err.response);\r\n            response = { status: false, data: err.response };\r\n        });\r\n    return response;\r\n}\r\n\r\nconst getAllPatientsList = async (data) => {\r\n    const config = {\r\n        headers: {\r\n            'accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Access-Control-Allow-Origin': '*',\r\n            'Authorization': 'Bearer ' + AuthenticationService.getToken(),\r\n        }\r\n    }\r\n    var response;\r\n    var apiPath = paths.get_all_patients + data;\r\n    console.log('api path >>>', apiPath);\r\n    const res = await axios.get(apiPath, config)\r\n        .then(function (res){\r\n            response = {status: true, data: res.data}\r\n        })\r\n        .catch(function (err) {\r\n            console.log(err.response);\r\n            response = { status: false, data: err.response };\r\n        });\r\n    return response;\r\n}\r\n\r\nconst archivePatient = async (data) => {\r\n    const config = {\r\n        headers: {\r\n            'accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Access-Control-Allow-Origin': '*',\r\n            'Authorization': 'Bearer ' + AuthenticationService.getToken(),\r\n        }\r\n    }\r\n    var response;\r\n    const res = await axios.put(paths.patients,data, config)\r\n        .then(function (res){\r\n            response = {status: true, data: res.data}\r\n        })\r\n        .catch(function (err) {\r\n            console.log(err.response);\r\n            response = { status: false, data: err.response };\r\n        });\r\n    return response;\r\n}\r\n\r\nconst ProvidersService = {\r\n    getPatient: getPatient,\r\n    createPatient: createPatient,\r\n    getAllPatientsList:getAllPatientsList,\r\n    archivePatient: archivePatient\r\n}\r\nexport default ProvidersService;","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\services\\PractitionersService.js",["984","985","986","987","988"],"import axios from 'axios';\r\nimport paths from '../config/Endpoint';\r\nimport AuthenticationService from './AuthenticationService';\r\n\r\nconst getList = async (data) => {\r\n    const config = {\r\n        headers: {\r\n            'accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Access-Control-Allow-Origin': '*',\r\n            'Authorization': 'Bearer ' + AuthenticationService.getToken(),\r\n        },\r\n        params: {\r\n            page: data.page,\r\n            search: data.search\r\n        }\r\n    }\r\n    var response;\r\n    const res = await axios.get(paths.practitioners, config)\r\n        .then(function (res) {\r\n            response = { status: true, data: res.data }\r\n        })\r\n        .catch(function (err) {\r\n            console.log(err.response);\r\n            response = { status: false, data: err.response };\r\n        });\r\n    return response;\r\n}\r\n\r\nconst createPractitioner = async (data) => {\r\n    const config = {\r\n        headers: {\r\n            'accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Access-Control-Allow-Origin': '*',\r\n            'Authorization': 'Bearer ' + AuthenticationService.getToken(),\r\n        }\r\n    }\r\n    var response;\r\n    const res = await axios.post(paths.practitioners, data, config)\r\n        .then(function (res) {\r\n            response = { status: true, data: res.data }\r\n        })\r\n        .catch(function (err) {\r\n            console.log(err.response);\r\n            response = { status: false, data: err.response };\r\n        });\r\n    return response;\r\n}\r\n\r\nconst getAllPractitionersList = async (data) => {\r\n    const config = {\r\n        headers: {\r\n            'accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Access-Control-Allow-Origin': '*',\r\n            'Authorization': 'Bearer ' + AuthenticationService.getToken(),\r\n        }\r\n    }\r\n    var response;\r\n    var apiPath = paths.get_all_practitioners + data;\r\n    console.log('api path >>>', apiPath);\r\n    const res = await axios.get(apiPath, config)\r\n        .then(function (res) {\r\n            response = { status: true, data: res.data }\r\n        })\r\n        .catch(function (err) {\r\n            console.log(err.response);\r\n            response = { status: false, data: err.response };\r\n        });\r\n    return response;\r\n}\r\n\r\nconst practitionerOfThisProvider = async (data, provider_id) => {\r\n    const config = {\r\n        headers: {\r\n            'accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Access-Control-Allow-Origin': '*',\r\n            'Authorization': 'Bearer ' + AuthenticationService.getToken(),\r\n        },\r\n        params: {\r\n            page: data.page,\r\n            search: data.search\r\n        }\r\n    }\r\n    var response;\r\n    var apiPath = paths.get_practitioners_of_this_provider + provider_id;\r\n    console.log('api path >>>', apiPath);\r\n    const res = await axios.get(apiPath, config)\r\n        .then(function (res) {\r\n            response = { status: true, data: res.data }\r\n        })\r\n        .catch(function (err) {\r\n            console.log(err.response);\r\n            response = { status: false, data: err.response };\r\n        });\r\n    return response;\r\n}\r\n\r\nconst archivePractitioner = async (data) => {\r\n    const config = {\r\n        headers: {\r\n            'accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Access-Control-Allow-Origin': '*',\r\n            'Authorization': 'Bearer ' + AuthenticationService.getToken(),\r\n        }\r\n    }\r\n    var response;\r\n    const res = await axios.put(paths.practitioners, data, config)\r\n        .then(function (res) {\r\n            response = { status: true, data: res.data }\r\n        })\r\n        .catch(function (err) {\r\n            console.log(err.response);\r\n            response = { status: false, data: err.response };\r\n        });\r\n    return response;\r\n}\r\n\r\nconst PractitionersService = {\r\n    getList: getList,\r\n    createPractitioner: createPractitioner,\r\n    getAllPractitionersList: getAllPractitionersList,\r\n    getPractitionerOfThisProvider: practitionerOfThisProvider,\r\n    archivePractitioner: archivePractitioner\r\n}\r\nexport default PractitionersService;","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\services\\ImmunizationsService.js",["989","990","991"],"import axios from 'axios';\r\nimport paths from '../config/Endpoint';\r\nimport AuthenticationService from './AuthenticationService';\r\n\r\nconst getList = async (data) => {\r\n    const config = {\r\n        headers: {\r\n            'accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Access-Control-Allow-Origin': '*',\r\n            'Authorization': 'Bearer ' + AuthenticationService.getToken(),\r\n        },\r\n        params: {\r\n            page: data.page,\r\n            search: data.search\r\n        }\r\n    }\r\n    var response;\r\n    const res = await axios.get(paths.immunizations, config)\r\n        .then(function (res) {\r\n            response = { status: true, data: res.data }\r\n        })\r\n        .catch(function (err) {\r\n            console.log(err.response);\r\n            response = { status: false, data: err.response };\r\n        });\r\n    return response;\r\n}\r\n\r\nconst createImmunizations = async (data) => {\r\n    const config = {\r\n        headers: {\r\n            'accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Access-Control-Allow-Origin': '*',\r\n            'Authorization': 'Bearer ' + AuthenticationService.getToken(),\r\n        }\r\n    }\r\n    var response;\r\n    const res = await axios.post(paths.immunizations, data, config)\r\n        .then(function (res) {\r\n            response = { status: true, data: res.data }\r\n        })\r\n        .catch(function (err) {\r\n            console.log(err.response);\r\n            response = { status: false, data: err.response };\r\n        });\r\n    return response;\r\n}\r\n\r\nconst archiveImmunization = async (data) => {\r\n    const config = {\r\n        headers: {\r\n            'accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Access-Control-Allow-Origin': '*',\r\n            'Authorization': 'Bearer ' + AuthenticationService.getToken(),\r\n        }\r\n    }\r\n    var response;\r\n    const res = await axios.put(paths.immunizations,data, config)\r\n        .then(function (res){\r\n            response = {status: true, data: res.data}\r\n        })\r\n        .catch(function (err) {\r\n            console.log(err.response);\r\n            response = { status: false, data: err.response };\r\n        });\r\n    return response;\r\n}\r\n\r\n// const getAllProvidersList = async (data) => {\r\n//     const config = {\r\n//         headers: {\r\n//             'accept': 'application/json',\r\n//             'Content-Type': 'application/json',\r\n//             'Access-Control-Allow-Origin': '*',\r\n//             'Authorization': 'Bearer ' + AuthenticationService.getToken(),\r\n//         }\r\n//     }\r\n//     var response;\r\n//     const res = await axios.get(paths.get_all_providers, config)\r\n//         .then(function (res){\r\n//             response = {status: true, data: res.data}\r\n//         })\r\n//         .catch(function (err) {\r\n//             console.log(err.response);\r\n//             response = { status: false, data: err.response };\r\n//         });\r\n//     return response;\r\n// }\r\n\r\n\r\n\r\nconst ImmunizationsService = {\r\n    getList: getList,\r\n    createImmunizations: createImmunizations,\r\n    archiveImmunization: archiveImmunization\r\n}\r\nexport default ImmunizationsService;\r\n","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Tables\\ExtendedTable\\filters\\index.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\OuterClick\\OuterClick.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Tables\\ExtendedTable\\filters\\numberFilter.js",["992"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport _ from 'lodash';\r\nimport uid from 'uuid/v4';\r\nimport { customFilter, Comparator, FILTER_TYPES } from 'react-bootstrap-table2-filter';\r\n\r\nimport { CustomInput, Input } from './../../../../components';\r\n\r\nconst comparatorSign = (comp) => {\r\n    switch (comp) {\r\n        case Comparator.EQ:\r\n            return '=';\r\n        case Comparator.GT:\r\n            return '>';\r\n        case Comparator.LT:\r\n            return '<';\r\n    }\r\n}\r\n\r\nclass NumberFilter extends React.Component {\r\n    static propTypes = {\r\n        column: PropTypes.object.isRequired,\r\n        onFilter: PropTypes.func.isRequired,\r\n        placeholder: PropTypes.string,\r\n        getFilter: PropTypes.func,\r\n        comparators: PropTypes.array,\r\n        comparator: PropTypes.string,\r\n        onClick: PropTypes.func\r\n    }\r\n\r\n    static defaultProps = {\r\n        comparators: [Comparator.EQ],\r\n        comparator: Comparator.EQ\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            value: '',\r\n            comparator: props.comparator\r\n        }\r\n\r\n        this.comparatorInputId = uid();\r\n        this.valueInputId = uid();\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (_.isFunction(this.props.getFilter)) {\r\n            this.props.getFilter((value) => {\r\n                this.setState({ value });\r\n            });\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (\r\n            prevState.value !== this.state.value ||\r\n            prevState.comparator !== this.state.comparator\r\n        ) {\r\n            this.props.onFilter({\r\n                number: this.state.value,\r\n                comparator: this.state.comparator\r\n            });\r\n        }\r\n        if (prevProps.comparator !== this.props.comparator) {\r\n            this.setState({ comparator: this.props.comparator });\r\n        }\r\n    }\r\n\r\n    handleClick(e) {\r\n        e.stopPropagation();\r\n\r\n        if (this.props.onClick) {\r\n            this.props.onClick(e);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { placeholder, comparators } = this.props;\r\n        const { comparator } = this.state;\r\n        return (\r\n            <div className='d-flex'>\r\n            {\r\n                (!_.isEmpty(comparators) && comparators.length > 0) && (\r\n                    <CustomInput\r\n                        type=\"select\"\r\n                        bsSize=\"sm\"\r\n                        onChange={(e) => { this.setState({ comparator: e.target.value }) }}\r\n                        onClick={this.handleClick}\r\n                        value={ comparator }\r\n                        className=\"d-block bg-white mr-1\"\r\n                        id={this.comparatorInputId}\r\n                    >\r\n                        <option value=\"\"></option>\r\n\r\n                        {\r\n                            _.map(comparators, (comparator, index) => (\r\n                                <option\r\n                                    value={ comparator }\r\n                                    key={ index }\r\n                                >\r\n                                    { comparatorSign(comparator) }\r\n                                </option>\r\n                            ))\r\n                        }\r\n                    </CustomInput>\r\n                )\r\n            }\r\n                <Input\r\n                    type=\"number\"\r\n                    className=\"bg-white\"\r\n                    bsSize=\"sm\"\r\n                    onChange={(e) => { this.setState({ value: e.target.value }) }}\r\n                    onClick={this.handleClick}\r\n                    value={ this.state.value }\r\n                    placeholder={ placeholder }\r\n                    id={this.valueInputId}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport const buildCustomNumberFilter = ({ placeholder, getFilter, comparators, ...other } = {}) => ({\r\n    filter: customFilter({\r\n        type: FILTER_TYPES.NUMBER,\r\n        ...other\r\n    }),\r\n    filterRenderer: function NumberFilterWrap(onFilter, column) {\r\n        return (\r\n            <NumberFilter\r\n                {...{\r\n                    onFilter,\r\n                    column,\r\n                    placeholder,\r\n                    getFilter,\r\n                    comparators\r\n                }}\r\n            />\r\n        )\r\n    }\r\n});","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Tables\\ExtendedTable\\filters\\textFilter.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Tables\\ExtendedTable\\filters\\selectFilter.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\services\\AppointmentsService.js",["993","994"],"import axios from 'axios';\r\nimport paths from '../config/Endpoint';\r\nimport AuthenticationService from './AuthenticationService';\r\n\r\nconst getList = async (data) => {\r\n    const config = {\r\n        headers: {\r\n            'accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Access-Control-Allow-Origin': '*',\r\n            'Authorization': 'Bearer ' + AuthenticationService.getToken(),\r\n        },\r\n        params: {\r\n            page: data.page,\r\n            search: data.search\r\n        }\r\n    }\r\n    var response;\r\n    const res = await axios.get(paths.appointments, config)\r\n        .then(function (res){\r\n            response = {status: true, data: res.data}\r\n        })\r\n        .catch(function (err) {\r\n            console.log(err.response);\r\n            response = { status: false, data: err.response };\r\n        });\r\n    return response;\r\n}\r\n\r\nconst createAppointment = async (data) => {\r\n    const config = {\r\n        headers: {\r\n            'accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Access-Control-Allow-Origin': '*',\r\n            'Authorization': 'Bearer ' + AuthenticationService.getToken(),\r\n        },\r\n    }\r\n    var response;\r\n    const res = await axios.post(paths.appointments, data, config)\r\n        .then(function (res){\r\n            response = {status: true, data: res.data}\r\n        })\r\n        .catch(function (err) {\r\n            console.log(err.response);\r\n            response = { status: false, data: err.response };\r\n        });\r\n    return response;\r\n}\r\n\r\n\r\n\r\nconst AppointmentsService = {\r\n    getList: getList,\r\n    createAppointment: createAppointment\r\n}\r\nexport default AppointmentsService;","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\components\\TinyDonutChart.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\components\\TinyPieChart.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\components\\TinyBarChart.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\components\\TinyAreaChart.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\components\\VerticalComposedChart.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\components\\TinyLineChart.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\components\\SimpleRadialBarChart.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\components\\SpecifiedDomainRadarChart.js",["995","996"],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\components\\PieChartWithPaddingAngleHalf.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\components\\PieChartWithPaddingAngle.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\components\\PieChartWithCustomizedLabel.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\components\\StraightAnglePieChart.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\components\\LineBarAreaComposedChart.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\components\\TwoLevelPieChart.js",["997"],"import React from 'react';\r\nimport { \r\n    Pie, \r\n    ResponsiveContainer,\r\n    PieChart\r\n}  from './../../../../components/recharts';\r\n\r\nimport colors from './../../../../colors';\r\n\r\nconst data01 = [\r\n    { name: 'Group A', value: 400 },\r\n    { name: 'Group B', value: 300 },\r\n    { name: 'Group C', value: 300 },\r\n    { name: 'Group D', value: 200 }\r\n];\r\n\r\nconst data02 = [\r\n    { name: 'A1', value: 100 },\r\n    { name: 'A2', value: 300 },\r\n    { name: 'B1', value: 100 },\r\n    { name: 'B2', value: 80 },\r\n    { name: 'B3', value: 40 },\r\n    { name: 'B4', value: 30 },\r\n    { name: 'B5', value: 50 },\r\n    { name: 'C1', value: 100 },\r\n    { name: 'C2', value: 200 },\r\n    { name: 'D1', value: 150 },\r\n    { name: 'D2', value: 50 }\r\n];\r\n\r\nconst TwoLevelPieChart = () => (\r\n    <ResponsiveContainer width='100%' aspect={6.0/3.0}>\r\n        <PieChart>\r\n            <Pie\r\n                data={data01}\r\n                dataKey=\"value\"\r\n                outerRadius={67}\r\n                fill='#1EB7FF'\r\n                stroke='#FFF'\r\n            />\r\n            <Pie\r\n                data={data02}\r\n                dataKey=\"value\"\r\n                innerRadius={70}\r\n                outerRadius={80}\r\n                fill='#CA8EFF'\r\n                stroke='#FFF'\r\n                label={{fill: '#3F4651', fontSize: '12px'}}\r\n            />\r\n       </PieChart>\r\n    </ResponsiveContainer>\r\n\r\n)\r\n\r\nexport { TwoLevelPieChart };\r\n","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\components\\AreaChartFillByValue.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\components\\PercentAreaChart.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\components\\StackedAreaChart.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\components\\SimpleAreaChart.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\components\\CustomizedLabelLineChart.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\components\\VerticalLineChart.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\components\\DashedLineChart.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\components\\SimpleLineChart.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\components\\BarChartHasBackground.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\components\\BarChartStackedBySign.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\components\\PositiveAndNegativeBarChart.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\components\\MixBarChart.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\components\\StackedBarChart.js",["998"],"import React from 'react';\r\nimport { \r\n    BarChart, \r\n    CartesianGrid, \r\n    XAxis, \r\n    YAxis, \r\n    Tooltip, \r\n    ResponsiveContainer,\r\n    Legend, \r\n    Bar \r\n} from './../../../../components/recharts';\r\n\r\nimport colors from './../../../../colors';\r\n\r\nconst data = [\r\n      {name: 'Page A', uv: 4000, pv: 2400, amt: 2400},\r\n      {name: 'Page B', uv: 3000, pv: 1398, amt: 2210},\r\n      {name: 'Page C', uv: 2000, pv: 9800, amt: 2290},\r\n      {name: 'Page D', uv: 2780, pv: 3908, amt: 2000},\r\n      {name: 'Page E', uv: 1890, pv: 4800, amt: 2181},\r\n      {name: 'Page F', uv: 2390, pv: 3800, amt: 2500},\r\n      {name: 'Page G', uv: 3490, pv: 4300, amt: 2100},\r\n];\r\n\r\nconst StackedBarChart = () => (\r\n    <ResponsiveContainer width='100%' aspect={6.0/3.0}>\r\n        <BarChart data={data}\r\n        margin={{top: 20, right: 30, left: 20, bottom: 5}}>\r\n            <CartesianGrid strokeDasharray=\"3 3\"/>\r\n            <XAxis dataKey=\"name\"/>\r\n            <YAxis/>\r\n            <Tooltip/>\r\n            <Legend />\r\n            <Bar dataKey=\"pv\" stackId=\"a\" fill='#1EB7FF' barSize={ 5 } />\r\n            <Bar dataKey=\"uv\" stackId=\"a\" fill='#CA8EFF' barSize={ 5 } />\r\n        </BarChart>\r\n    </ResponsiveContainer>\r\n\r\n)\r\n\r\nexport { StackedBarChart };\r\n","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Graphs\\ReCharts\\components\\SimpleBarChart.js",["999"],"import React from 'react';\r\nimport {\r\n    BarChart,\r\n    CartesianGrid,\r\n    XAxis,\r\n    YAxis,\r\n    Tooltip,\r\n    ResponsiveContainer,\r\n    Legend,\r\n    Bar\r\n} from './../../../../components/recharts';\r\n\r\nimport colors from './../../../../colors';\r\n\r\n\r\n\r\nclass SimpleBarChart extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        console.log('in cons', props);\r\n        this.state = {\r\n            data: props.data\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ResponsiveContainer width='100%' aspect={6.0 / 2.0}>\r\n                <BarChart\r\n                    data={this.state.data}\r\n                    margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\r\n                >\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <XAxis dataKey=\"month\" />\r\n                    <YAxis dataKey=\"total_immunizations\"/>\r\n                    <Tooltip\r\n                        contentStyle={{\r\n                            background: '#353C48',\r\n                            border: `1px solid #FFF`,\r\n                            color: '#FFF'\r\n                        }}\r\n                    />\r\n                    <Legend wrapperStyle={{ color: '#000000' }} />\r\n                    <Bar dataKey=\"total_immunizations\" fill='#1EB7FF' barSize={25} />\r\n                </BarChart>\r\n            </ResponsiveContainer>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default SimpleBarChart;\r\n","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\components\\HeaderDemo.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\colors.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\recharts.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Recharts\\Legend.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Recharts\\Tooltip.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Recharts\\config.js",["1000"],"// ReCharts styling configuration\r\nimport colors from './../../colors';\r\n\r\nexport default {\r\n    grid: {\r\n        stroke: '#CED4DA',\r\n        strokeWidth: 1,\r\n        strokeDasharray: '1px'\r\n    },\r\n    polarGrid: {\r\n        stroke: '#CED4DA',\r\n    },\r\n    axis: {\r\n        stroke: '#ADB5BD',\r\n        strokeWidth: 1,\r\n        style: {\r\n            fontSize: '12px'\r\n        },\r\n        tick: {\r\n            // Axis Labels color:\r\n            fill: '#353C48'\r\n        }\r\n    },\r\n    polarRadiusAxis: {\r\n        stroke: '#CED4DA',\r\n        tick: {\r\n            fill: '#353C48'\r\n        }\r\n    },\r\n    polarAngleAxis: {\r\n        tick: {\r\n            fill: '#353C48'\r\n        },\r\n        style: {\r\n            fontSize: '12px'\r\n        }\r\n    },\r\n    label: {\r\n        fontSize: 11,\r\n        fill: '#353C48'\r\n    },\r\n    legend: {\r\n        wrapperStyle: {\r\n            color: '#353C48'\r\n        }\r\n    },\r\n    pieLabel: {\r\n        fontSize: 12,\r\n        fill: colors[100]\r\n    },\r\n    tooltip: {\r\n        cursor: {\r\n            fill: '#1EB7FF',\r\n            opacity: 0.1\r\n        },\r\n        contentStyle: {\r\n            background: '#353C48',\r\n            border: `1px solid #FFF`,\r\n            color: '#FFF'\r\n        }\r\n    }\r\n};","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Recharts\\DefAreaValueColor.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Recharts\\ValueLabel.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Recharts\\PieValueLabel.js",["1001"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport config from './config';\r\n\r\nconst RADIAN = Math.PI / 180;                    \r\n\r\nexport const PieValueLabel = (props) => {\r\n    const { cx, cy, midAngle, innerRadius, outerRadius, percent, color } = props;\r\n    const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\r\n    const x = cx + radius * Math.cos(-midAngle * RADIAN);\r\n    const y = cy  + radius * Math.sin(-midAngle * RADIAN);\r\n\r\n    return (\r\n        <text\r\n            x={ x }\r\n            y={ y }\r\n            textAnchor={ x > cx ? 'start' : 'end' }\r\n            dominantBaseline=\"central\"\r\n            fill={ props.color || config.pieLabel.fill }\r\n            fontSize={ config.pieLabel.fontSize }\r\n        >\r\n            {`${(percent * 100).toFixed(0)}%`}\r\n        </text>\r\n    );\r\n};\r\nPieValueLabel.propTypes = {\r\n    cx: PropTypes.number,\r\n    cy: PropTypes.number,\r\n    midAngle: PropTypes.number,\r\n    innerRadius: PropTypes.number,\r\n    outerRadius: PropTypes.number,\r\n    percent: PropTypes.number,\r\n    color: PropTypes.string\r\n};\r\n","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Recharts\\PolarAngleAxis.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Recharts\\PolarRadiusAxis.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Recharts\\ZAxis.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Recharts\\YAxis.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Recharts\\XAxis.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Recharts\\PolarGrid.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\components\\Recharts\\CartesianGrid.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\layout\\components\\NavbarActivityFeed.js",[],["1002","1003"],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\layout\\components\\NavbarMessages.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\components\\Sidebar\\SidebarTopB.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\components\\Sidebar\\SidebarBottomB.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\config.js",[],"E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\services\\MedicalReportService.js",["1004","1005","1006","1007","1008"],"import axios from 'axios';\r\nimport paths from '../config/Endpoint';\r\nimport AuthenticationService from './AuthenticationService';\r\n\r\nconst getPatient = async (patient_id) => {\r\n    const config = {\r\n        headers: {\r\n            'accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Access-Control-Allow-Origin': '*',\r\n            'Authorization': 'Bearer ' + AuthenticationService.getToken(),\r\n        },\r\n    }\r\n    var response;\r\n    const res = await axios.get(paths.get_patient_by_id+patient_id, config)\r\n        .then(function (res) {\r\n            response = { status: true, data: res.data }\r\n        })\r\n        .catch(function (err) {\r\n            console.log(err.response);\r\n            response = { status: false, data: err.response };\r\n        });\r\n    return response;\r\n}\r\n\r\nconst getVitals = async (data) => {\r\n    const config = {\r\n        headers: {\r\n            'accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Access-Control-Allow-Origin': '*',\r\n            'Authorization': 'Bearer ' + AuthenticationService.getToken(),\r\n        },\r\n        params: {\r\n            page: data.page,\r\n            search: data.search,\r\n            patient_id: data.patient_id\r\n        }\r\n    }\r\n    var response;\r\n    const res = await axios.get(paths.vitals,config)\r\n        .then(function (res){\r\n            response = {status: true, data: res.data}\r\n        })\r\n        .catch(function (err) {\r\n            console.log(err.response);\r\n            response = { status: false, data: err.response };\r\n        });\r\n    return response;\r\n}\r\n\r\nconst getImmunizations = async (data, patient_id) => {\r\n    const config = {\r\n        headers: {\r\n            'accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Access-Control-Allow-Origin': '*',\r\n            'Authorization': 'Bearer ' + AuthenticationService.getToken(),\r\n        },\r\n        params: {\r\n            page: data.page,\r\n            search: data.search,\r\n        }\r\n    }\r\n    var response;\r\n    const res = await axios.get(paths.get_immunizations_of_patient+patient_id,config)\r\n        .then(function (res){\r\n            response = {status: true, data: res.data}\r\n        })\r\n        .catch(function (err) {\r\n            console.log(err.response);\r\n            response = { status: false, data: err.response };\r\n        });\r\n    return response;\r\n}\r\n\r\nconst getAppointments = async (data, patient_id) => {\r\n    const config = {\r\n        headers: {\r\n            'accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Access-Control-Allow-Origin': '*',\r\n            'Authorization': 'Bearer ' + AuthenticationService.getToken(),\r\n        },\r\n        params: {\r\n            page: data.page,\r\n            search: data.search,\r\n        }\r\n    }\r\n    var response;\r\n    const res = await axios.get(paths.get_appointmentd_of_patient+patient_id,config)\r\n        .then(function (res){\r\n            response = {status: true, data: res.data}\r\n        })\r\n        .catch(function (err) {\r\n            console.log(err.response);\r\n            response = { status: false, data: err.response };\r\n        });\r\n    return response;\r\n}\r\n\r\nconst createVital = async (data) => {\r\n    const config = {\r\n        headers: {\r\n            'accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Access-Control-Allow-Origin': '*',\r\n            'Authorization': 'Bearer ' + AuthenticationService.getToken(),\r\n        }\r\n    }\r\n    var response;\r\n    const res = await axios.post(paths.vitals, data, config)\r\n        .then(function (res) {\r\n            response = { status: true, data: res.data }\r\n        })\r\n        .catch(function (err) {\r\n            console.log(err.response);\r\n            response = { status: false, data: err.response };\r\n        });\r\n    return response;\r\n}\r\nconst MedicalReportService = {\r\n    getPatient: getPatient,\r\n    getVitals: getVitals,\r\n    getImmunizations: getImmunizations,\r\n    getAppointments: getAppointments,\r\n    createVital: createVital,\r\n}\r\n\r\nexport default MedicalReportService;","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Tables\\ExtendedTable\\components\\MedicalReportTable.js",["1009","1010","1011","1012","1013","1014","1015","1016","1017","1018","1019","1020","1021","1022","1023","1024","1025","1026","1027","1028","1029","1030","1031","1032","1033","1034","1035","1036","1037","1038","1039","1040","1041","1042","1043","1044","1045"],"import React from \"react\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\r\nimport filterFactory, {\r\n    Comparator,\r\n    dateFilter,\r\n} from \"react-bootstrap-table2-filter\";\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\nimport _ from \"lodash\";\r\nimport moment from \"moment\";\r\n\r\nimport {\r\n    Button,\r\n    ButtonGroup,\r\n    UncontrolledModal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    Col,\r\n    Input,\r\n    InputGroup,\r\n    InputGroupAddon,\r\n    FormText,\r\n    ModalFooter,\r\n    Label,\r\n    CustomInput,\r\n    Form,\r\n    FormGroup,\r\n} from \"../../../../components\";\r\nimport { CustomExportCSV } from \"./CustomExportButton\";\r\nimport { CustomSearch } from \"./CustomSearch\";\r\nimport { CustomPaginationPanel } from \"./CustomPaginationPanel\";\r\nimport { CustomSizePerPageButton } from \"./CustomSizePerPageButton\";\r\nimport { CustomPaginationTotal } from \"./CustomPaginationTotal\";\r\n\r\nimport AuthenticationService from '../../../../services/AuthenticationService';\r\nimport MedicalReportService from './../../../../services/MedicalReportService';\r\nimport Config from './../../../../config/Config';\r\nimport ProvidersService from './../../../../services/ProvidersService';\r\nimport PractitionersService from './../../../../services/PractitionersService';\r\nimport MaskedInput from 'react-text-mask';\r\nimport {\r\n    createNumberMask,\r\n} from 'text-mask-addons';\r\nimport DateTimePicker from 'react-datetime-picker';\r\nimport ImmunizationsService from './../../../../services/ImmunizationsService';\r\nimport VaccinesService from './../../../../services/VaccinesService';\r\nimport AppointmentsService from './../../../../services/AppointmentsService';\r\n\r\nconst sortCaret = (order) => {\r\n    if (!order) return <i className=\"fa fa-fw fa-sort text-muted\"></i>;\r\n    if (order) return <i className={`fa fa-fw text-muted fa-sort-${order}`}></i>;\r\n};\r\n\r\nconst bodyTempMask = createNumberMask({ prefix: '', suffix: 'F', allowDecimal: true });\r\n\r\nexport default class MedicalReportTable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            patient_detail: \"\",\r\n            vitalsList: \"\",\r\n            immunizationsList: \"\",\r\n            nextPageVital: \"\",\r\n            previousPageVital: \"\",\r\n            nextPageImmunizations: \"\",\r\n            previousPageImmunizations: \"\",\r\n            appointmentsList: \"\",\r\n            nextPageAppointments: '',\r\n            previousPageAppointments: '',\r\n            allProviders: [],\r\n            provider: \"\",\r\n            allPractitioners: [],\r\n            practitioner: \"\",\r\n            bpSys: \"\",\r\n            bpSys_errorMessage: \"\",\r\n            bpDia: \"\",\r\n            bpDia_errorMessage: \"\",\r\n            bodyTemp: \"\",\r\n            bodyTemp_errorMessage: \"\",\r\n            heartRate: \"\",\r\n            heartRate_errorMessage: \"\",\r\n            memo: \"\",\r\n            memo_errorMessage: \"\",\r\n            authenticationMessage: \"\",\r\n            isLoading: false,\r\n            provider_errorMessage: \"\",\r\n            practitioner_errorMessage: \"\",\r\n            vaccine: \"\",\r\n            allVaccines: [],\r\n            datetime: new Date(),\r\n            datetime_errorMessage: \"\",\r\n            isGettingVitalData: false,\r\n            isGettingImmunizationData: false,\r\n            isGettingAppointmentsData: false,\r\n        }\r\n    }\r\n\r\n    getVital = async (page = null, search = null) => {\r\n        try {\r\n            this.setState({\r\n                isGettingVitalData: true\r\n            });\r\n            const paramData = {\r\n                page: page,\r\n                search: search,\r\n                patient_id: this.props.location.patient_id\r\n            }\r\n            const response = await MedicalReportService.getVitals(paramData);\r\n            if (response.status == true) {\r\n                this.setState({\r\n                    vitalsList: response.data.result,\r\n                    nextPageVital: response.data.next_page,\r\n                    previousPageVital: response.data.previous_page,\r\n                    isGettingVitalData: false\r\n                });\r\n            }\r\n        }\r\n        catch (e) {\r\n            console.log('error >>>', e);\r\n            console.log(e, e.data);\r\n        }\r\n    }\r\n\r\n    getImmunization = async (page = null, search = null) => {\r\n        try {\r\n            this.setState({\r\n                isGettingImmunizationData: true\r\n            });\r\n            const paramData = {\r\n                page: page,\r\n                search: search\r\n            }\r\n            const response = await MedicalReportService.getImmunizations(paramData, this.props.location.patient_id);\r\n            if (response.status == true) {\r\n                this.setState({\r\n                    immunizationsList: response.data.result,\r\n                    nextPageImmunizations: response.data.next_page,\r\n                    previousPageImmunizations: response.data.previous_page,\r\n                    isGettingImmunizationData: false\r\n                });\r\n            }\r\n        }\r\n        catch (e) {\r\n            console.log('error >>>', e);\r\n            console.log(e, e.data);\r\n        }\r\n    }\r\n\r\n    getAppointment = async (page = null, search = null) => {\r\n        try {\r\n            this.setState({\r\n                isGettingAppointmentsData: true\r\n            });\r\n            const paramData = {\r\n                page: page,\r\n                search: search\r\n            }\r\n            const response = await MedicalReportService.getAppointments(paramData, this.props.location.patient_id);\r\n            if (response.status == true) {\r\n                this.setState({\r\n                    appointmentsList: response.data.result,\r\n                    nextPageAppointments: response.data.next_page,\r\n                    previousPageAppointments: response.data.previous_page,\r\n                    isGettingAppointmentsData: false\r\n                });\r\n            }\r\n        }\r\n        catch (e) {\r\n            console.log('error >>>', e);\r\n            console.log(e, e.data);\r\n        }\r\n    }\r\n\r\n    async getNameandEmailOfPatient() {\r\n        try {\r\n            const response = await MedicalReportService.getPatient(this.props.location.patient_id);\r\n            if (response.status == true) {\r\n                this.setState({\r\n                    patient_detail: response.data.result[0],\r\n                });\r\n                this.getVital();\r\n                this.getImmunization();\r\n                this.getAppointment();\r\n            }\r\n\r\n        }\r\n        catch (e) {\r\n            console.log('error >>>', e);\r\n            console.log(e, e.data);\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n        if (AuthenticationService.getUser()) {\r\n            this.getNameandEmailOfPatient();\r\n            if (Config.getProfileData().role === 100) {\r\n                this.getAllProviders();\r\n            }\r\n            this.getAllVaccines();\r\n        }\r\n        else {\r\n            this.props.history.push({\r\n                pathname: \"/login\",\r\n            })\r\n        }\r\n    }\r\n\r\n    createVitalColumnDefinitions() {\r\n        return [\r\n            {\r\n                dataField: \"created_at\",\r\n                text: \"Created Date\",\r\n                sort: true,\r\n                sortCaret,\r\n            },\r\n            {\r\n                dataField: \"body_temp\",\r\n                text: \"Body Temp\",\r\n                sort: true,\r\n                // align: \"center\",\r\n                sortCaret,\r\n            }, {\r\n                dataField: \"bp_systolic\",\r\n                text: \"BP Systolic\",\r\n                sort: true,\r\n                // align: \"center\",\r\n                sortCaret,\r\n\r\n            }, {\r\n                dataField: \"bp_diastolic\",\r\n                text: \"BP Diastolic\",\r\n                sort: true,\r\n                // align: \"center\",\r\n                sortCaret,\r\n\r\n            },\r\n            {\r\n                dataField: \"heart_rate\",\r\n                text: \"Heart Rate\",\r\n                sort: true,\r\n                // align: \"center\",\r\n                sortCaret,\r\n\r\n            },\r\n            {\r\n                dataField: \"memo\",\r\n                text: \"Memo\",\r\n                sort: true,\r\n                // align: \"center\",\r\n                sortCaret,\r\n\r\n            },\r\n            {\r\n                dataField: \"practitioner\",\r\n                text: \"Practitioner\",\r\n                sort: true,\r\n                // align: \"center\",\r\n                sortCaret,\r\n\r\n            },\r\n            {\r\n                dataField: \"provider\",\r\n                text: \"Provider\",\r\n                sort: true,\r\n                // align: \"center\",\r\n                sortCaret,\r\n\r\n            }\r\n        ];\r\n    }\r\n\r\n    createImmunizationsColumnDefinitions() {\r\n        return [\r\n            {\r\n                dataField: \"administered_dt\",\r\n                text: \"Immunization Date\",\r\n                sort: true,\r\n                sortCaret,\r\n            },\r\n            // {\r\n            //     dataField: \"patient\",\r\n            //     text: \"Patient Name\",\r\n            //     sort: true,\r\n            //     // align: \"center\",\r\n            //     sortCaret,\r\n            // }, \r\n            {\r\n                dataField: \"vaccine\",\r\n                text: \"Vaccine Name\",\r\n                sort: true,\r\n                // align: \"center\",\r\n                sortCaret,\r\n\r\n            }, {\r\n                dataField: \"practitioner\",\r\n                text: \"Administered By\",\r\n                sort: true,\r\n                // align: \"center\",\r\n                sortCaret,\r\n\r\n            }, {\r\n                dataField: \"provider\",\r\n                text: \"Provider\",\r\n                sort: true,\r\n                // align: \"center\",\r\n                sortCaret,\r\n\r\n            },\r\n            // {\r\n            //     text: \"Action\",\r\n            //     // sort: true,\r\n            //     // align: \"center\",\r\n            //     // sortCaret,\r\n            //     formatter: this.actionColButton,\r\n            // },\r\n        ];\r\n    }\r\n\r\n    createAppointmentsColumnDefinitions() {\r\n        return [\r\n            {\r\n                dataField: \"appointment_id\",\r\n                hidden: true,\r\n                isKey: true\r\n            },\r\n            {\r\n                dataField: 'appointment_date',\r\n                text: 'Appointment Date',\r\n                formatter: (cell) =>\r\n                    moment(cell).format('DD/MM/YYYY'),\r\n                sort: true,\r\n                sortCaret\r\n            }, {\r\n                dataField: 'appointment_time',\r\n                text: 'Appointment Time',\r\n                sort: true,\r\n                sortCaret\r\n            },\r\n            // {\r\n            //     dataField: 'patient',\r\n            //     text: 'Patient Name',\r\n            //     sort: true,\r\n            //     // align: \"center\",\r\n            //     sortCaret,\r\n            //     formatter: (cell) => (\r\n            //         <span className=\"text-inverse\">\r\n            //             { cell}\r\n            //         </span>\r\n            //     ),\r\n            // },\r\n            {\r\n                dataField: 'practitioner',\r\n                text: 'Scheduled By',\r\n                sort: true,\r\n                sortCaret,\r\n                formatter: (cell) => (\r\n                    <span className=\"text-inverse\">\r\n                        { cell}\r\n                    </span>\r\n                ),\r\n            }, {\r\n                dataField: 'provider',\r\n                text: 'Provider',\r\n                sort: true,\r\n                sortCaret,\r\n                formatter: (cell) => (\r\n                    <span className=\"text-inverse\">\r\n                        { cell}\r\n                    </span>\r\n                ),\r\n            }, {\r\n                dataField: 'created_at',\r\n                text: 'Scheduled On',\r\n                formatter: (cell) =>\r\n                    moment(cell).format('DD/MM/YYYY'),\r\n                sort: true,\r\n                sortCaret\r\n            }\r\n            // {\r\n            //     text: 'Action',\r\n            //     formatter: this.actionColButton\r\n            // }\r\n        ];\r\n    }\r\n\r\n    getAllVaccines = async () => {\r\n        try {\r\n            const response = await VaccinesService.getAllVaccinesList();\r\n            if (response.status == true) {\r\n                this.setState({\r\n                    allVaccines: response.data.data,\r\n                    vaccine: (response.data.data)[0].vaccine_id,\r\n                });\r\n            }\r\n        }\r\n        catch (e) {\r\n            console.log('error >>>', e);\r\n            console.log(e, e.data);\r\n        }\r\n    }\r\n\r\n    getAllProviders = async () => {\r\n        try {\r\n            const response = await ProvidersService.getAllProvidersList();\r\n            if (response.status == true) {\r\n                this.setState({\r\n                    allProviders: response.data.data,\r\n                    provider: (response.data.data)[0].provider_id,\r\n                });\r\n                this.getAllPractitioners(this.state.provider);\r\n            }\r\n        }\r\n        catch (e) {\r\n            console.log('error >>>', e);\r\n            console.log(e, e.data);\r\n        }\r\n    }\r\n\r\n    getAllPractitioners = async (value) => {\r\n        try {\r\n            const response = await PractitionersService.getAllPractitionersList(value);\r\n            if (response.status == true) {\r\n                if (response.data.data) {\r\n                    this.setState({\r\n                        allPractitioners: response.data.data,\r\n                        practitioner: (response.data.data)[0].practitioner_id\r\n                    });\r\n                    // this.getAllPatients(this.state.practitioner);\r\n                }\r\n                else {\r\n                    this.setState({\r\n                        allPractitioners: [],\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        catch (e) {\r\n            console.log('error >>>', e);\r\n            console.log(e, e.data);\r\n        }\r\n    }\r\n\r\n    onChangeProvider(value) {\r\n        this.getAllPractitioners(value);\r\n        this.setState({\r\n            provider: value\r\n        });\r\n    }\r\n\r\n    onChangePractitioner(value) {\r\n        // this.getAllPatients(value);\r\n        this.setState({\r\n            practitioner: value\r\n        })\r\n    }\r\n\r\n    onChangeBpSys(value) {\r\n        this.setState({\r\n            bpSys: \"\" + value\r\n        })\r\n    }\r\n\r\n    onChangeBpDia(value) {\r\n        this.setState({\r\n            bpDia: value\r\n        })\r\n    }\r\n\r\n    onChangeBodyTemp(value) {\r\n        this.setState({\r\n            bodyTemp: value\r\n        })\r\n    }\r\n\r\n    onChangeHeartRate(value) {\r\n        this.setState({\r\n            heartRate: value\r\n        })\r\n    }\r\n\r\n    onChangeMemo(value) {\r\n        this.setState({\r\n            memo: value\r\n        })\r\n    }\r\n\r\n    async createVital() {\r\n        this.setState({\r\n            isLoading: true,\r\n            authenticationMessage: \"\",\r\n        })\r\n\r\n        if (this.state.provider == \"\") {\r\n            this.setState({\r\n                provider_errorMessage: \"Provider not available\",\r\n                isLoading: false,\r\n            });\r\n            return;\r\n        } else {\r\n            this.setState({\r\n                provider_errorMessage: \"\",\r\n            });\r\n        }\r\n\r\n        if (this.state.practitioner == \"\") {\r\n            this.setState({\r\n                practitioner_errorMessage: \"Practitioner not available\",\r\n                isLoading: false,\r\n            });\r\n            return;\r\n        } else {\r\n            this.setState({\r\n                practitioner_errorMessage: \"\",\r\n            });\r\n        }\r\n\r\n        if (this.state.bpSys == \"\") {\r\n            this.setState({\r\n                bpSys_errorMessage: \"Enter BP Systolic\",\r\n                isLoading: false,\r\n            })\r\n            return\r\n        } else {\r\n            this.setState({\r\n                bpSys_errorMessage: \"\",\r\n            })\r\n        }\r\n\r\n        if (this.state.bpDia == \"\") {\r\n            this.setState({\r\n                bpDia_errorMessage: \"Enter BP Systolic\",\r\n                isLoading: false,\r\n\r\n            })\r\n            return\r\n        } else {\r\n            this.setState({\r\n                bpDia_errorMessage: \"\",\r\n            })\r\n        }\r\n\r\n        if (this.state.bodyTemp == \"\") {\r\n            this.setState({\r\n                bodyTemp_errorMessage: \"Enter BP Systolic\",\r\n                isLoading: false,\r\n\r\n            })\r\n            return\r\n        } else {\r\n            this.setState({\r\n                bodyTemp_errorMessage: \"\",\r\n            })\r\n        }\r\n\r\n        if (this.state.heartRate == \"\") {\r\n            this.setState({\r\n                heartRate_errorMessage: \"Enter BP Systolic\",\r\n                isLoading: false,\r\n\r\n            })\r\n            return\r\n        } else {\r\n            this.setState({\r\n                heartRate_errorMessage: \"\",\r\n            })\r\n        }\r\n\r\n        if (this.state.memo == \"\") {\r\n            this.setState({\r\n                memo_errorMessage: \"Enter BP Systolic\",\r\n                isLoading: false,\r\n\r\n            })\r\n            return\r\n        } else {\r\n            this.setState({\r\n                memo_errorMessage: \"\",\r\n            })\r\n        }\r\n\r\n        const postData = {\r\n            \"provider_id\": Number(this.state.provider),\r\n            \"practitioner_id\": this.state.practitioner,\r\n            \"patient_id\": this.props.location.patient_id,\r\n            \"bp_systolic\": this.state.bpSys,\r\n            \"bp_diastolic\": this.state.bpDia,\r\n            \"body_temp\": this.state.bodyTemp,\r\n            \"heart_rate\": this.state.heartRate,\r\n            \"memo\": this.state.memo\r\n        }\r\n\r\n        try {\r\n            const response = await MedicalReportService.createVital(postData);\r\n            if (response.status == true) {\r\n                this.setState({\r\n                    color: \"success\",\r\n                    authenticationMessage: response.data.message,\r\n                    isLoading: false,\r\n                })\r\n                this.getVital();\r\n            } else {\r\n                this.setState({\r\n                    color: \"danger\",\r\n                    isLoading: false,\r\n                    authenticationMessage: response.data.data.error\r\n                });\r\n            }\r\n        } catch (e) {\r\n            console.log(e, e.data);\r\n        }\r\n\r\n    }\r\n\r\n    onChangeVaccine(value) {\r\n        this.setState({\r\n            vaccine: value\r\n        })\r\n    }\r\n\r\n    onChangeDatetime(value) {\r\n        this.setState({\r\n            datetime: value\r\n        })\r\n    }\r\n\r\n    async createImmunization() {\r\n        this.setState({\r\n            isLoading: true,\r\n            authenticationMessage: \"\",\r\n        });\r\n\r\n        if (this.state.provider == \"\") {\r\n            this.setState({\r\n                provider_errorMessage: \"Provider not available\",\r\n                isLoading: false,\r\n            });\r\n            return;\r\n        } else {\r\n            this.setState({\r\n                provider_errorMessage: \"\",\r\n            });\r\n        }\r\n\r\n        if (this.state.practitioner == \"\") {\r\n            this.setState({\r\n                practitioner_errorMessage: \"Practitioner not available\",\r\n                isLoading: false,\r\n            });\r\n            return;\r\n        } else {\r\n            this.setState({\r\n                practitioner_errorMessage: \"\",\r\n            });\r\n        }\r\n\r\n        if (this.state.patient == \"\") {\r\n            this.setState({\r\n                patient_errorMessage: \"Patient not available\",\r\n                isLoading: false,\r\n            });\r\n            return;\r\n        } else {\r\n            this.setState({\r\n                patient_errorMessage: \"\",\r\n            });\r\n        }\r\n\r\n        if (this.state.vaccine == \"\") {\r\n            this.setState({\r\n                vaccine_errorMessage: \"Vaccine not available\",\r\n                isLoading: false,\r\n            });\r\n            return;\r\n        } else {\r\n            this.setState({\r\n                vaccine_errorMessage: \"\",\r\n            });\r\n        }\r\n\r\n        if (this.state.datetime == \"\") {\r\n            this.setState({\r\n                date_errorMessage: \"Date not available\",\r\n                isLoading: false,\r\n            });\r\n            return;\r\n        } else {\r\n            this.setState({\r\n                date_errorMessage: \"\",\r\n            });\r\n            var formatedDateTime = moment\r\n                .utc(moment(this.state.datetime, \"YYYY-MM-DD HH:MM:SS\"))\r\n                .format();\r\n            formatedDateTime = formatedDateTime.replace(\"T\", \" \").replace(\"Z\", \"\");\r\n\r\n            const postData = {\r\n                \"provider_id\": Number(this.state.provider),\r\n                \"practitioner_id\": this.state.practitioner,\r\n                \"patient_id\": this.props.location.patient_id,\r\n                \"administered_dt\": formatedDateTime,\r\n                \"vaccine_id\": Number(this.state.vaccine),\r\n            };\r\n            try {\r\n                const response = await ImmunizationsService.createImmunizations(\r\n                    postData\r\n                );\r\n                if (response.status == true) {\r\n                    this.setState({\r\n                        color: \"success\",\r\n                        authenticationMessage: response.data.message,\r\n                        isLoading: false,\r\n                    });\r\n                    this.getImmunization();\r\n                } else {\r\n                    this.setState({\r\n                        color: \"danger\",\r\n                        isLoading: false,\r\n                        authenticationMessage: response.data.data.error,\r\n                    });\r\n                }\r\n            } catch (e) {\r\n                console.log(e, e.data);\r\n            }\r\n        }\r\n    }\r\n\r\n    async createAppointment() {\r\n        this.setState({\r\n            isLoading: true,\r\n            authenticationMessage: \"\",\r\n        });\r\n\r\n        if (this.state.provider == \"\") {\r\n            this.setState({\r\n                provider_errorMessage: \"Provider not available\",\r\n                isLoading: false,\r\n            });\r\n            return;\r\n        } else {\r\n            this.setState({\r\n                provider_errorMessage: \"\",\r\n            });\r\n        }\r\n\r\n        if (this.state.practitioner == \"\") {\r\n            this.setState({\r\n                practitioner_errorMessage: \"Practitioner not available\",\r\n                isLoading: false,\r\n            });\r\n            return;\r\n        } else {\r\n            this.setState({\r\n                practitioner_errorMessage: \"\",\r\n            });\r\n        }\r\n\r\n        if (this.state.datetime == \"\") {\r\n            this.setState({\r\n                datetime_errorMessage: \"Date not available\",\r\n                isLoading: false,\r\n            });\r\n            return;\r\n        } else {\r\n            this.setState({\r\n                datetime_errorMessage: \"\",\r\n            });\r\n        }\r\n\r\n        var formatedDateTime = moment\r\n            .utc(moment(this.state.datetime, \"YYYY-MM-DD HH:MM:SS\"))\r\n            .format();\r\n        formatedDateTime = formatedDateTime.replace(\"T\", \" \").replace(\"Z\", \"\");\r\n        const postData = {\r\n            provider_id: Number(this.state.provider),\r\n            practitioner_id: Number(this.state.practitioner),\r\n            patient_id: this.props.location.patient_id,\r\n            appointment_date: formatedDateTime,\r\n        };\r\n        try {\r\n            const response = await AppointmentsService.createAppointment(\r\n                postData\r\n            );\r\n            if (response.status == true) {\r\n                this.setState({\r\n                    color: \"success\",\r\n                    authenticationMessage: response.data.message,\r\n                    isLoading: false,\r\n                });\r\n                this.getAppointment();\r\n            } else {\r\n                this.setState({\r\n                    color: \"danger\",\r\n                    isLoading: false,\r\n                    authenticationMessage: response.data.data.error,\r\n                });\r\n            }\r\n        } catch (e) {\r\n            console.log(e, e.data);\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        const vitalColumnDefs = this.createVitalColumnDefinitions();\r\n        const immunizationsColumnDefs = this.createImmunizationsColumnDefinitions();\r\n        const appointmentsColumnDefs = this.createAppointmentsColumnDefinitions();\r\n        return (\r\n            <>\r\n                <ToolkitProvider\r\n                    keyField=\"patient_id\"\r\n                    data={this.state.vitalsList}\r\n                    columns={vitalColumnDefs}\r\n                >\r\n                    {\r\n                        props => (\r\n                            <React.Fragment>\r\n                                <div className=\"d-flex justify-content-end align-items-center mb-2\">\r\n                                    <h3>Table of Vitals</h3>\r\n                                    <div className=\"d-flex ml-auto\">\r\n                                        <ButtonGroup>\r\n                                            <Button size=\"sm\" outline id=\"newVitalButton\">\r\n                                                {/* <i className=\"fa fa-fw fa-plus\"></i> */}\r\n                                                Add New Vital\r\n                                            </Button>\r\n                                            <UncontrolledModal target=\"newVitalButton\" className=\"modal-outline-primary\">\r\n                                                <ModalHeader tag=\"h5\">\r\n                                                    New Vital\r\n                                        </ModalHeader>\r\n                                                <ModalBody>\r\n                                                    <Form>\r\n                                                        <FormGroup row>\r\n                                                            <Label for=\"provider\" sm={4}>\r\n                                                                Provider Name\r\n                                                            </Label>\r\n                                                            <Col sm={8}>\r\n                                                                {Config.getProfileData().role === 100 ? (\r\n                                                                    <Input\r\n                                                                        type=\"select\"\r\n                                                                        name=\"select\"\r\n                                                                        id=\"provider\"\r\n                                                                        value={(this.state.provider)}\r\n                                                                        onChange={e => this.onChangeProvider(e.target.value)}\r\n                                                                    >\r\n\r\n                                                                        {this.state.allProviders.map((obj) => <option value={obj.provider_id}>{obj.name}</option>)}\r\n\r\n                                                                    </Input>\r\n                                                                ) : (\r\n                                                                        Config.getProfileData().role === 50 ? (\r\n                                                                            <option>{Config.getProfileData().name}</option>\r\n                                                                        ) : (\r\n                                                                                Config.getProfileData().role === 10 ? (\r\n                                                                                    <option>{Config.getProfileData().name}</option>\r\n                                                                                ) : (\r\n                                                                                        <option>{Config.getProfileData().name}</option>\r\n                                                                                    )\r\n                                                                            )\r\n\r\n                                                                    )}\r\n                                                                <FormText color=\"danger\">\r\n                                                                    {this.state.provider_errorMessage}\r\n                                                                </FormText>\r\n                                                            </Col>\r\n                                                        </FormGroup>\r\n                                                        <FormGroup row>\r\n                                                            <Label for=\"practitioner\" sm={4}>\r\n                                                                Practitioner Name\r\n                                                            </Label>\r\n                                                            <Col sm={8}>\r\n                                                                {(Config.getProfileData().role === 100) || (Config.getProfileData().role === 50) ? (\r\n                                                                    <Input\r\n                                                                        type=\"select\"\r\n                                                                        name=\"select\"\r\n                                                                        id=\"practitioner\"\r\n                                                                        value={(this.state.practitioner)}\r\n                                                                        onChange={e => this.onChangePractitioner(e.target.value)}\r\n                                                                    >\r\n\r\n                                                                        {this.state.allPractitioners.map((obj) => <option value={obj.practitioner_id}>{obj.name}</option>)}\r\n\r\n                                                                    </Input>\r\n                                                                ) : (\r\n                                                                        <option>{Config.getProfileData().name}</option>\r\n                                                                    )}\r\n                                                                <FormText color=\"danger\">\r\n                                                                    {this.state.practitioner_errorMessage}\r\n                                                                </FormText>\r\n\r\n                                                            </Col>\r\n                                                        </FormGroup>\r\n                                                        <FormGroup row>\r\n                                                            <Label for=\"bp_systolic\" sm={4}>\r\n                                                                BP Systolic\r\n                                                            </Label>\r\n                                                            <Col sm={8}>\r\n                                                                <Input\r\n                                                                    type=\"text\"\r\n                                                                    value={this.state.bpSys}\r\n                                                                    className='text-left form-control'\r\n                                                                    placeholder='Enter BP systolic'\r\n                                                                    // tag={MaskedInput}\r\n                                                                    id=\"bp_systolic\"\r\n                                                                    onChange={e => this.onChangeBpSys(e.target.value)}\r\n                                                                />\r\n                                                                <FormText color=\"danger\">\r\n                                                                    {this.state.bpSys_errorMessage}\r\n                                                                </FormText>\r\n                                                            </Col>\r\n                                                        </FormGroup>\r\n                                                        <FormGroup row>\r\n                                                            <Label for=\"bp_diastolic\" sm={4}>\r\n                                                                BP Diastolic\r\n                                                            </Label>\r\n                                                            <Col sm={8}>\r\n                                                                <Input\r\n                                                                    value={this.state.bpDia}\r\n                                                                    onChange={e => this.onChangeBpDia(e.target.value)}\r\n                                                                    className='text-left form-control'\r\n                                                                    placeholder='Enter BP Diastolic'\r\n                                                                    // tag={MaskedInput}\r\n                                                                    id=\"bp_diastolic\"\r\n                                                                />\r\n                                                                <FormText color=\"danger\">\r\n                                                                    {this.state.bpDia_errorMessage}\r\n                                                                </FormText>\r\n                                                            </Col>\r\n                                                        </FormGroup>\r\n                                                        <FormGroup row>\r\n                                                            <Label for=\"body_temp\" sm={4}>\r\n                                                                Body Temp\r\n                                                            </Label>\r\n                                                            <Col sm={8}>\r\n                                                                <Input\r\n                                                                    value={this.state.bodyTemp}\r\n                                                                    onChange={e => this.onChangeBodyTemp(e.target.value)}\r\n                                                                    mask={bodyTempMask}\r\n                                                                    className='text-left form-control'\r\n                                                                    placeholder='Enter Body Temp'\r\n                                                                    tag={MaskedInput}\r\n                                                                    id=\"body_temp\"\r\n                                                                />\r\n                                                                <FormText color=\"danger\">\r\n                                                                    {this.state.bodyTemp_errorMessage}\r\n                                                                </FormText>\r\n                                                            </Col>\r\n                                                        </FormGroup>\r\n                                                        <FormGroup row>\r\n                                                            <Label for=\"heart_rate\" sm={4}>\r\n                                                                Heart Rate\r\n                                                            </Label>\r\n                                                            <Col sm={8}>\r\n                                                                <Input\r\n                                                                    value={this.state.heartRate}\r\n                                                                    onChange={e => this.onChangeHeartRate(e.target.value)}\r\n                                                                    className='text-left form-control'\r\n                                                                    placeholder='Enter Heart Rate'\r\n                                                                    // tag={MaskedInput}\r\n                                                                    id=\"heart_rate\"\r\n                                                                />\r\n                                                                <FormText color=\"danger\">\r\n                                                                    {this.state.heartRate_errorMessage}\r\n                                                                </FormText>\r\n                                                            </Col>\r\n                                                        </FormGroup>\r\n                                                        <FormGroup row>\r\n                                                            <Label for=\"memo\" sm={4}>\r\n                                                                Memo\r\n                                                            </Label>\r\n                                                            <Col sm={8}>\r\n                                                                <Input\r\n                                                                    onChange={e => this.onChangeMemo(e.target.value)}\r\n                                                                    className='text-left form-control'\r\n                                                                    placeholder='Enter Memo'\r\n                                                                    // tag={MaskedInput}\r\n                                                                    id=\"memo\"\r\n                                                                />\r\n                                                                <FormText color=\"danger\">\r\n                                                                    {this.state.memo_errorMessage}\r\n                                                                </FormText>\r\n                                                            </Col>\r\n                                                        </FormGroup>\r\n                                                    </Form>\r\n                                                </ModalBody>\r\n                                                <ModalFooter>\r\n                                                    <FormText color={this.state.color}>\r\n                                                        {this.state.authenticationMessage}\r\n                                                    </FormText>\r\n                                                    <UncontrolledModal.Close color=\"link\">\r\n                                                        Discard\r\n                                                    </UncontrolledModal.Close>\r\n                                                    <Button color=\"primary\" onClick={() => this.createVital()} disabled={this.state.isLoading}>\r\n                                                        Create\r\n                                                    </Button>\r\n                                                </ModalFooter>\r\n                                            </UncontrolledModal>\r\n                                        </ButtonGroup>\r\n                                    </div>\r\n                                </div>\r\n                                <BootstrapTable\r\n                                    classes=\"table-responsive-sm\"\r\n                                    filter={filterFactory()}\r\n                                    bordered={false}\r\n                                    responsive\r\n                                    noDataIndication={this.state.isGettingVitalData ? 'Getting Vital details...' : 'No Vitals found!'}\r\n                                    {...props.baseProps}\r\n                                />\r\n\r\n                                <ButtonGroup>\r\n                                    <Button size=\"sm\" outline onClick={() => { this.getVital(this.state.previousPageVital, null) }} disabled={(this.state.previousPageVital) ? false : true}>\r\n                                        <i className=\"fa fa-fw fa-chevron-left\"></i>\r\n                                    </Button>\r\n                                    <Button size=\"sm\" outline onClick={() => { this.getVital(this.state.nextPageVital, null) }} disabled={(this.state.nextPageVital) ? false : true}>\r\n                                        <i className=\"fa fa-fw fa-chevron-right\"></i>\r\n                                    </Button>\r\n                                </ButtonGroup>\r\n\r\n                            </React.Fragment>\r\n                        )\r\n                    }\r\n                </ToolkitProvider>\r\n                <br /><br /><br />\r\n                <ToolkitProvider\r\n                    keyField=\"patient_id\"\r\n                    data={this.state.immunizationsList}\r\n                    columns={immunizationsColumnDefs}\r\n                >\r\n                    {\r\n                        props => (\r\n                            <React.Fragment>\r\n                                <div className=\"d-flex justify-content-end align-items-center mb-2\">\r\n                                    <h3>Table of Immunizations</h3>\r\n                                    <div className=\"d-flex ml-auto\">\r\n                                        <ButtonGroup>\r\n                                            <Button\r\n                                                size=\"sm\"\r\n                                                outline\r\n                                                id=\"createImmunization\"\r\n                                            >\r\n                                                {/* <i className=\"fa fa-fw fa-plus\"></i> */}\r\n                                                Add New Immunization\r\n                                            </Button>\r\n                                            <UncontrolledModal target=\"createImmunization\" className=\"modal-outline-primary\">\r\n                                                <ModalHeader tag=\"h5\">\r\n                                                    New Immunization\r\n                                        </ModalHeader>\r\n                                                <ModalBody>\r\n                                                    <Form>\r\n                                                        <FormGroup row>\r\n                                                            <Label for=\"provider\" sm={4}>\r\n                                                                Provider Name\r\n                                                            </Label>\r\n                                                            <Col sm={8}>\r\n                                                                {Config.getProfileData().role === 100 ? (\r\n                                                                    <Input\r\n                                                                        type=\"select\"\r\n                                                                        name=\"select\"\r\n                                                                        id=\"provider\"\r\n                                                                        value={(this.state.provider)}\r\n                                                                        onChange={e => this.onChangeProvider(e.target.value)}\r\n                                                                    >\r\n\r\n                                                                        {this.state.allProviders.map((obj) => <option value={obj.provider_id}>{obj.name}</option>)}\r\n\r\n                                                                    </Input>\r\n                                                                ) : (\r\n                                                                        Config.getProfileData().role === 50 ? (\r\n                                                                            <option>{Config.getProfileData().name}</option>\r\n                                                                        ) : (\r\n                                                                                Config.getProfileData().role === 10 ? (\r\n                                                                                    <option>{Config.getProfileData().name}</option>\r\n                                                                                ) : (\r\n                                                                                        <option>{Config.getProfileData().name}</option>\r\n                                                                                    )\r\n                                                                            )\r\n\r\n                                                                    )}\r\n                                                                <FormText color=\"danger\">\r\n                                                                    {this.state.provider_errorMessage}\r\n                                                                </FormText>\r\n                                                            </Col>\r\n                                                        </FormGroup>\r\n                                                        <FormGroup row>\r\n                                                            <Label for=\"practitioner\" sm={4}>\r\n                                                                Practitioner Name\r\n                                                            </Label>\r\n                                                            <Col sm={8}>\r\n                                                                {(Config.getProfileData().role === 100) || (Config.getProfileData().role === 50) ? (\r\n                                                                    <Input\r\n                                                                        type=\"select\"\r\n                                                                        name=\"select\"\r\n                                                                        id=\"practitioner\"\r\n                                                                        value={(this.state.practitioner)}\r\n                                                                        onChange={e => this.onChangePractitioner(e.target.value)}\r\n                                                                    >\r\n\r\n                                                                        {this.state.allPractitioners.map((obj) => <option value={obj.practitioner_id}>{obj.name}</option>)}\r\n\r\n                                                                    </Input>\r\n                                                                ) : (\r\n                                                                        <option>{Config.getProfileData().name}</option>\r\n                                                                    )}\r\n                                                                <FormText color=\"danger\">\r\n                                                                    {this.state.practitioner_errorMessage}\r\n                                                                </FormText>\r\n                                                            </Col>\r\n                                                        </FormGroup>\r\n                                                        <FormGroup row>\r\n                                                            <Label for=\"vaccine\" sm={4}>\r\n                                                                Vaccine Name\r\n                                                    </Label>\r\n                                                            <Col sm={8}>\r\n                                                                <Input\r\n                                                                    type=\"select\"\r\n                                                                    name=\"select\"\r\n                                                                    id=\"vaccine\"\r\n                                                                    value={(this.state.vaccine)}\r\n                                                                    onChange={e => this.onChangeVaccine(e.target.value)}\r\n                                                                >\r\n                                                                    {this.state.allVaccines.map((obj) => <option value={obj.vaccine_id}>{obj.name}</option>)}\r\n                                                                </Input>\r\n\r\n                                                            </Col>\r\n                                                        </FormGroup>\r\n\r\n                                                        <FormGroup row>\r\n                                                            <Label for=\"datetime\" sm={4}>\r\n                                                                Date and Time\r\n                                                    </Label>\r\n                                                            <Col sm={8}>\r\n\r\n                                                                <DateTimePicker\r\n                                                                    value={(this.state.datetime)}\r\n                                                                    onChange={value => this.onChangeDatetime(value)}\r\n\r\n                                                                />\r\n                                                                <FormText color=\"danger\">\r\n                                                                    {this.state.datetime_errorMessage}\r\n                                                                </FormText>\r\n                                                            </Col>\r\n                                                        </FormGroup>\r\n                                                    </Form>\r\n                                                </ModalBody>\r\n                                                <ModalFooter>\r\n                                                    <FormText color={this.state.color}>\r\n                                                        {this.state.authenticationMessage}\r\n                                                    </FormText>\r\n                                                    <UncontrolledModal.Close color=\"link\">\r\n                                                        Discard\r\n                                                    </UncontrolledModal.Close>\r\n                                                    <Button color=\"primary\" onClick={() => this.createImmunization()} disabled={this.state.isLoading}>\r\n                                                        Create\r\n                                                    </Button>\r\n                                                </ModalFooter>\r\n                                            </UncontrolledModal>\r\n                                        </ButtonGroup>\r\n                                    </div>\r\n                                </div>\r\n                                <BootstrapTable\r\n                                    classes=\"table-responsive-sm\"\r\n                                    filter={filterFactory()}\r\n                                    bordered={false}\r\n                                    responsive\r\n                                    noDataIndication={this.state.isGettingImmunizationData ? 'Getting Immunization details...' : 'No Immunizations found!'}\r\n                                    {...props.baseProps}\r\n                                />\r\n\r\n                                <ButtonGroup>\r\n                                    <Button size=\"sm\" outline onClick={() => { this.getImmunization(this.state.previousPageImmunizations, null) }} disabled={(this.state.previousPageImmunizations) ? false : true}>\r\n                                        <i className=\"fa fa-fw fa-chevron-left\"></i>\r\n                                    </Button>\r\n                                    <Button size=\"sm\" outline onClick={() => { this.getImmunization(this.state.nextPageImmunizations, null) }} disabled={(this.state.nextPageImmunizations) ? false : true}>\r\n                                        <i className=\"fa fa-fw fa-chevron-right\"></i>\r\n                                    </Button>\r\n                                </ButtonGroup>\r\n\r\n                            </React.Fragment>\r\n                        )\r\n                    }\r\n                </ToolkitProvider>\r\n                <br /><br /><br />\r\n                <ToolkitProvider\r\n                    keyField=\"patient_id\"\r\n                    data={this.state.appointmentsList}\r\n                    columns={appointmentsColumnDefs}\r\n                >\r\n                    {\r\n                        props => (\r\n                            <React.Fragment>\r\n                                <div className=\"d-flex justify-content-end align-items-center mb-2\">\r\n                                    <h3>Table of Appointments</h3>\r\n                                    <div className=\"d-flex ml-auto\">\r\n                                        <ButtonGroup>\r\n                                            <Button\r\n                                                size=\"sm\"\r\n                                                outline\r\n                                                id=\"newAppointment\"\r\n                                            // onClick={this.handleAddRow.bind(this)}\r\n                                            >\r\n                                                {/* <i className=\"fa fa-fw fa-plus\"></i> */}\r\n                                                Add New Appointment\r\n                                            </Button>\r\n                                            <UncontrolledModal\r\n                                                target=\"newAppointment\"\r\n                                                className=\"modal-outline-primary\"\r\n                                            >\r\n                                                <ModalHeader tag=\"h5\">New Appointment</ModalHeader>\r\n                                                <ModalBody>\r\n                                                    <Form>\r\n                                                        <FormGroup row>\r\n                                                            <Label for=\"provider\" sm={4}>\r\n                                                                Provider Name\r\n                                                            </Label>\r\n                                                            <Col sm={8}>\r\n                                                                {Config.getProfileData().role === 100 ? (\r\n                                                                    <Input\r\n                                                                        type=\"select\"\r\n                                                                        name=\"select\"\r\n                                                                        id=\"provider\"\r\n                                                                        value={(this.state.provider)}\r\n                                                                        onChange={e => this.onChangeProvider(e.target.value)}\r\n                                                                    >\r\n\r\n                                                                        {this.state.allProviders.map((obj) => <option value={obj.provider_id}>{obj.name}</option>)}\r\n\r\n                                                                    </Input>\r\n                                                                ) : (\r\n                                                                        Config.getProfileData().role === 50 ? (\r\n                                                                            <option>{Config.getProfileData().name}</option>\r\n                                                                        ) : (\r\n                                                                                Config.getProfileData().role === 10 ? (\r\n                                                                                    <option>{Config.getProfileData().name}</option>\r\n                                                                                ) : (\r\n                                                                                        <option>{Config.getProfileData().name}</option>\r\n                                                                                    )\r\n                                                                            )\r\n\r\n                                                                    )}\r\n                                                                <FormText color=\"danger\">\r\n                                                                    {this.state.provider_errorMessage}\r\n                                                                </FormText>\r\n                                                            </Col>\r\n                                                        </FormGroup>\r\n                                                        <FormGroup row>\r\n                                                            <Label for=\"practitioner\" sm={4}>\r\n                                                                Practitioner Name\r\n                                                    </Label>\r\n                                                            <Col sm={8}>\r\n                                                                {(Config.getProfileData().role === 100) || (Config.getProfileData().role === 50) ? (\r\n                                                                    <Input\r\n                                                                        type=\"select\"\r\n                                                                        name=\"select\"\r\n                                                                        id=\"practitioner\"\r\n                                                                        value={(this.state.practitioner)}\r\n                                                                        onChange={e => this.onChangePractitioner(e.target.value)}\r\n                                                                    >\r\n\r\n                                                                        {this.state.allPractitioners.map((obj) => <option value={obj.practitioner_id}>{obj.name}</option>)}\r\n\r\n                                                                    </Input>\r\n                                                                ) : (\r\n                                                                        <option>{Config.getProfileData().name}</option>\r\n                                                                    )}\r\n                                                                <FormText color=\"danger\">\r\n                                                                    {this.state.practitioner_errorMessage}\r\n                                                                </FormText>\r\n                                                            </Col>\r\n                                                        </FormGroup>\r\n                                                        <FormGroup row>\r\n                                                            <Label for=\"datetime\" sm={4}>\r\n                                                                Date and Time\r\n                                                            </Label>\r\n                                                            <Col sm={8}>\r\n                                                                <DateTimePicker\r\n                                                                    value={this.state.datetime}\r\n                                                                    onChange={(value) => this.onChangeDatetime(value)}\r\n                                                                    minDate={moment().toDate()}\r\n                                                                />\r\n                                                                <FormText color=\"danger\">\r\n                                                                    {this.state.datetime_errorMessage}\r\n                                                                </FormText>\r\n                                                            </Col>\r\n                                                        </FormGroup>\r\n                                                    </Form>\r\n                                                </ModalBody>\r\n                                                <ModalFooter>\r\n                                                    <FormText color={this.state.color}>\r\n                                                        {this.state.authenticationMessage}\r\n                                                    </FormText>\r\n                                                    <UncontrolledModal.Close color=\"link\">\r\n                                                        Discard\r\n                                                    </UncontrolledModal.Close>\r\n                                                    <Button\r\n                                                        color=\"primary\"\r\n                                                        onClick={() => this.createAppointment()}\r\n                                                        disabled={this.state.isLoading}\r\n                                                    >\r\n                                                        {this.state.isLoading\r\n                                                            ? \"Creating Appointment...\"\r\n                                                            : \"Create Appointment\"}\r\n                                                    </Button>\r\n                                                </ModalFooter>\r\n                                            </UncontrolledModal>\r\n                                        </ButtonGroup>\r\n                                    </div>\r\n                                </div>\r\n                                <BootstrapTable\r\n                                    classes=\"table-responsive-sm\"\r\n                                    filter={filterFactory()}\r\n                                    bordered={false}\r\n                                    responsive\r\n                                    noDataIndication={this.state.isGettingAppointmentsData ? 'Getting Appointments...' : 'No Appointments found!'}\r\n                                    {...props.baseProps}\r\n                                />\r\n\r\n                                <ButtonGroup>\r\n                                    <Button size=\"sm\" outline onClick={() => { this.getAppointment(this.state.previousPageAppointments, null) }} disabled={(this.state.previousPageAppointments) ? false : true}>\r\n                                        <i className=\"fa fa-fw fa-chevron-left\"></i>\r\n                                    </Button>\r\n                                    <Button size=\"sm\" outline onClick={() => { this.getAppointment(this.state.nextPageAppointments, null) }} disabled={(this.state.nextPageAppointments) ? false : true}>\r\n                                        <i className=\"fa fa-fw fa-chevron-right\"></i>\r\n                                    </Button>\r\n                                </ButtonGroup>\r\n\r\n                            </React.Fragment>\r\n                        )\r\n                    }\r\n                </ToolkitProvider>\r\n            </>\r\n        );\r\n    }\r\n}","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\services\\ChartsService.js",["1046","1047"],"import axios from 'axios';\r\nimport paths from '../config/Endpoint';\r\nimport AuthenticationService from './AuthenticationService';\r\n\r\nconst getMonthlyImmunization = async () => {\r\n    const config = {\r\n        headers: {\r\n            'accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Access-Control-Allow-Origin': '*',\r\n            'Authorization': 'Bearer ' + AuthenticationService.getToken(),\r\n        }\r\n    }\r\n    var response;\r\n    const res = await axios.get(paths.get_monthly_immunizations, config)\r\n        .then(function (res){\r\n            response = {status: true, data: res.data}\r\n        })\r\n        .catch(function (err) {\r\n            console.log(err.response);\r\n            response = { status: false, data: err.response };\r\n        });\r\n    return response;\r\n}\r\n\r\nconst getProviderImmunization = async () => {\r\n    const config = {\r\n        headers: {\r\n            'accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Access-Control-Allow-Origin': '*',\r\n            'Authorization': 'Bearer ' + AuthenticationService.getToken(),\r\n        }\r\n    }\r\n    var response;\r\n    const res = await axios.get(paths.get_provider_immunizations, config)\r\n        .then(function (res){\r\n            response = {status: true, data: res.data}\r\n        })\r\n        .catch(function (err) {\r\n            console.log(err.response);\r\n            response = { status: false, data: err.response };\r\n        });\r\n    return response;\r\n}\r\n\r\n\r\n\r\nconst ChartsService = {\r\n    getMonthlyImmunization: getMonthlyImmunization,\r\n    getProviderImmunization: getProviderImmunization\r\n}\r\nexport default ChartsService;","E:\\Freelance\\eHealth\\frontend\\ehealth_frontend\\src\\routes\\Tables\\ExtendedTable\\components\\ProviderImmunizationsChartTable.js",["1048","1049","1050","1051","1052","1053","1054","1055","1056","1057","1058","1059","1060","1061","1062","1063","1064","1065","1066","1067","1068","1069","1070","1071","1072","1073","1074"],"import React from \"react\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\r\nimport filterFactory, {\r\n    Comparator,\r\n    dateFilter,\r\n} from \"react-bootstrap-table2-filter\";\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\nimport _ from \"lodash\";\r\nimport moment from \"moment\";\r\n\r\nimport {\r\n    Button,\r\n    ButtonGroup,\r\n    UncontrolledModal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    Col,\r\n    Input,\r\n    InputGroup,\r\n    InputGroupAddon,\r\n    FormText,\r\n    ModalFooter,\r\n    Label,\r\n    CustomInput,\r\n    Form,\r\n    FormGroup,\r\n} from \"../../../../components\";\r\nimport { CustomExportCSV } from \"./CustomExportButton\";\r\nimport { CustomSearch } from \"./CustomSearch\";\r\nimport { CustomPaginationPanel } from \"./CustomPaginationPanel\";\r\nimport { CustomSizePerPageButton } from \"./CustomSizePerPageButton\";\r\nimport { CustomPaginationTotal } from \"./CustomPaginationTotal\";\r\n\r\nimport VaccinesService from './../../../../services/VaccinesService';\r\nimport AuthenticationService from './../../../../services/AuthenticationService';\r\n\r\nconst sortCaret = (order) => {\r\n    if (!order) return <i className=\"fa fa-fw fa-sort text-muted\"></i>;\r\n    if (order) return <i className={`fa fa-fw text-muted fa-sort-${order}`}></i>;\r\n};\r\n\r\nexport default class ProviderImmunizationsChartTable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        console.log('PI table >>>', props);\r\n        this.state = {\r\n            data: props.data,\r\n            provider_name: \"\",\r\n            immunizations: 1,\r\n            isGettingData: false\r\n        };\r\n\r\n        this.headerCheckboxRef = React.createRef();\r\n    }\r\n    \r\n    createColumnDefinitions() {\r\n        return [\r\n            {\r\n                dataField: \"provider_id\",\r\n                hidden: true,\r\n                isKey: true,\r\n            },\r\n            {\r\n                dataField: \"provider\",\r\n                text: \"Provider\",\r\n                sort: true,\r\n                sortCaret,\r\n                formatter: (cell) => <span className=\"text-inverse\">{cell}</span>,\r\n            },\r\n            {\r\n                dataField: \"total_immunizations\",\r\n                text: \"Total Immunization\",\r\n                sort: true,\r\n                sortCaret,\r\n                formatter: (cell) => <span className=\"text-inverse\">{cell}</span>,\r\n            },\r\n\r\n        ];\r\n    }\r\n\r\n    \r\n\r\n    render() {\r\n        const columnDefs = this.createColumnDefinitions();\r\n\r\n        return (\r\n            <ToolkitProvider\r\n                keyField=\"id\"\r\n                data={this.state.data}\r\n                columns={columnDefs}\r\n            >\r\n                {(props) => (\r\n                    <React.Fragment>\r\n                       \r\n                        <BootstrapTable\r\n                            classes=\"table-responsive-sm\"\r\n                            filter={filterFactory()}\r\n                            bordered={true}\r\n                            responsive\r\n                            {...props.baseProps}\r\n                        />\r\n                    </React.Fragment>\r\n                )}\r\n            </ToolkitProvider>\r\n        );\r\n    }\r\n}\r\n",{"ruleId":"1075","severity":1,"message":"1076","line":5,"column":8,"nodeType":"1077","messageId":"1078","endLine":5,"endColumn":23},{"ruleId":"1075","severity":1,"message":"1079","line":6,"column":10,"nodeType":"1077","messageId":"1078","endLine":6,"endColumn":16},{"ruleId":"1080","replacedBy":"1081"},{"ruleId":"1082","replacedBy":"1083"},{"ruleId":"1075","severity":1,"message":"1084","line":6,"column":5,"nodeType":"1077","messageId":"1078","endLine":6,"endColumn":18},{"ruleId":"1075","severity":1,"message":"1085","line":8,"column":5,"nodeType":"1077","messageId":"1078","endLine":8,"endColumn":23},{"ruleId":"1075","severity":1,"message":"1086","line":3,"column":8,"nodeType":"1077","messageId":"1078","endLine":3,"endColumn":21},{"ruleId":"1075","severity":1,"message":"1087","line":8,"column":10,"nodeType":"1077","messageId":"1078","endLine":8,"endColumn":24},{"ruleId":"1075","severity":1,"message":"1088","line":13,"column":10,"nodeType":"1077","messageId":"1078","endLine":13,"endColumn":24},{"ruleId":"1089","severity":1,"message":"1090","line":33,"column":33,"nodeType":"1091","messageId":"1092","endLine":33,"endColumn":35},{"ruleId":"1093","severity":1,"message":"1094","line":73,"column":54,"nodeType":"1095","messageId":"1096","endLine":73,"endColumn":68},{"ruleId":"1075","severity":1,"message":"1097","line":3,"column":8,"nodeType":"1077","messageId":"1078","endLine":3,"endColumn":17},{"ruleId":"1075","severity":1,"message":"1098","line":9,"column":10,"nodeType":"1077","messageId":"1078","endLine":9,"endColumn":18},{"ruleId":"1075","severity":1,"message":"1099","line":16,"column":11,"nodeType":"1077","messageId":"1078","endLine":16,"endColumn":14},{"ruleId":"1075","severity":1,"message":"1099","line":18,"column":11,"nodeType":"1077","messageId":"1078","endLine":18,"endColumn":14},{"ruleId":"1075","severity":1,"message":"1100","line":8,"column":5,"nodeType":"1077","messageId":"1078","endLine":8,"endColumn":16},{"ruleId":"1075","severity":1,"message":"1101","line":10,"column":5,"nodeType":"1077","messageId":"1078","endLine":10,"endColumn":17},{"ruleId":"1075","severity":1,"message":"1102","line":11,"column":5,"nodeType":"1077","messageId":"1078","endLine":11,"endColumn":17},{"ruleId":"1075","severity":1,"message":"1103","line":15,"column":7,"nodeType":"1077","messageId":"1078","endLine":15,"endColumn":16},{"ruleId":"1104","severity":1,"message":"1105","line":18,"column":5,"nodeType":"1106","messageId":"1107","endLine":20,"endColumn":6},{"ruleId":"1075","severity":1,"message":"1108","line":10,"column":10,"nodeType":"1077","messageId":"1078","endLine":10,"endColumn":20},{"ruleId":"1075","severity":1,"message":"1109","line":2,"column":8,"nodeType":"1077","messageId":"1078","endLine":2,"endColumn":26},{"ruleId":"1075","severity":1,"message":"1110","line":4,"column":8,"nodeType":"1077","messageId":"1078","endLine":4,"endColumn":29},{"ruleId":"1075","severity":1,"message":"1111","line":5,"column":8,"nodeType":"1077","messageId":"1078","endLine":5,"endColumn":16},{"ruleId":"1075","severity":1,"message":"1112","line":2,"column":8,"nodeType":"1077","messageId":"1078","endLine":2,"endColumn":14},{"ruleId":"1075","severity":1,"message":"1113","line":4,"column":10,"nodeType":"1077","messageId":"1078","endLine":4,"endColumn":19},{"ruleId":"1075","severity":1,"message":"1114","line":5,"column":10,"nodeType":"1077","messageId":"1078","endLine":5,"endColumn":20},{"ruleId":"1104","severity":1,"message":"1105","line":8,"column":5,"nodeType":"1106","messageId":"1107","endLine":10,"endColumn":6},{"ruleId":"1075","severity":1,"message":"1114","line":3,"column":10,"nodeType":"1077","messageId":"1078","endLine":3,"endColumn":20},{"ruleId":"1089","severity":1,"message":"1090","line":26,"column":33,"nodeType":"1091","messageId":"1092","endLine":26,"endColumn":35},{"ruleId":"1104","severity":1,"message":"1105","line":8,"column":5,"nodeType":"1106","messageId":"1107","endLine":10,"endColumn":6},{"ruleId":"1075","severity":1,"message":"1112","line":5,"column":8,"nodeType":"1077","messageId":"1078","endLine":5,"endColumn":14},{"ruleId":"1075","severity":1,"message":"1115","line":12,"column":5,"nodeType":"1077","messageId":"1078","endLine":12,"endColumn":16},{"ruleId":"1089","severity":1,"message":"1090","line":58,"column":32,"nodeType":"1091","messageId":"1092","endLine":58,"endColumn":34},{"ruleId":"1089","severity":1,"message":"1090","line":80,"column":33,"nodeType":"1091","messageId":"1092","endLine":80,"endColumn":35},{"ruleId":"1089","severity":1,"message":"1090","line":97,"column":37,"nodeType":"1091","messageId":"1092","endLine":97,"endColumn":39},{"ruleId":"1093","severity":1,"message":"1094","line":70,"column":26,"nodeType":"1095","messageId":"1096","endLine":70,"endColumn":40},{"ruleId":"1075","severity":1,"message":"1116","line":3,"column":8,"nodeType":"1077","messageId":"1078","endLine":3,"endColumn":18},{"ruleId":"1075","severity":1,"message":"1117","line":2,"column":8,"nodeType":"1077","messageId":"1078","endLine":2,"endColumn":9},{"ruleId":"1118","severity":1,"message":"1119","line":30,"column":9,"nodeType":"1120","endLine":34,"endColumn":10},{"ruleId":"1093","severity":1,"message":"1094","line":31,"column":18,"nodeType":"1095","messageId":"1096","endLine":31,"endColumn":32},{"ruleId":"1121","severity":1,"message":"1122","line":72,"column":13,"nodeType":"1123","messageId":"1124","endLine":72,"endColumn":50,"fix":"1125"},{"ruleId":"1126","severity":1,"message":"1127","line":70,"column":62,"nodeType":"1077","endLine":70,"endColumn":71},{"ruleId":"1075","severity":1,"message":"1128","line":6,"column":5,"nodeType":"1077","messageId":"1078","endLine":6,"endColumn":8},{"ruleId":"1075","severity":1,"message":"1129","line":10,"column":5,"nodeType":"1077","messageId":"1078","endLine":10,"endColumn":11},{"ruleId":"1075","severity":1,"message":"1130","line":13,"column":10,"nodeType":"1077","messageId":"1078","endLine":13,"endColumn":20},{"ruleId":"1075","severity":1,"message":"1131","line":16,"column":10,"nodeType":"1077","messageId":"1078","endLine":16,"endColumn":25},{"ruleId":"1075","severity":1,"message":"1132","line":17,"column":10,"nodeType":"1077","messageId":"1078","endLine":17,"endColumn":21},{"ruleId":"1075","severity":1,"message":"1133","line":18,"column":10,"nodeType":"1077","messageId":"1078","endLine":18,"endColumn":37},{"ruleId":"1075","severity":1,"message":"1134","line":19,"column":10,"nodeType":"1077","messageId":"1078","endLine":19,"endColumn":31},{"ruleId":"1075","severity":1,"message":"1135","line":20,"column":10,"nodeType":"1077","messageId":"1078","endLine":20,"endColumn":31},{"ruleId":"1075","severity":1,"message":"1136","line":21,"column":10,"nodeType":"1077","messageId":"1078","endLine":21,"endColumn":25},{"ruleId":"1075","severity":1,"message":"1137","line":22,"column":10,"nodeType":"1077","messageId":"1078","endLine":22,"endColumn":25},{"ruleId":"1075","severity":1,"message":"1138","line":23,"column":10,"nodeType":"1077","messageId":"1078","endLine":23,"endColumn":27},{"ruleId":"1075","severity":1,"message":"1139","line":24,"column":10,"nodeType":"1077","messageId":"1078","endLine":24,"endColumn":34},{"ruleId":"1075","severity":1,"message":"1140","line":25,"column":10,"nodeType":"1077","messageId":"1078","endLine":25,"endColumn":25},{"ruleId":"1075","severity":1,"message":"1141","line":26,"column":10,"nodeType":"1077","messageId":"1078","endLine":26,"endColumn":26},{"ruleId":"1075","severity":1,"message":"1142","line":27,"column":10,"nodeType":"1077","messageId":"1078","endLine":27,"endColumn":26},{"ruleId":"1075","severity":1,"message":"1143","line":28,"column":10,"nodeType":"1077","messageId":"1078","endLine":28,"endColumn":30},{"ruleId":"1075","severity":1,"message":"1144","line":29,"column":10,"nodeType":"1077","messageId":"1078","endLine":29,"endColumn":26},{"ruleId":"1075","severity":1,"message":"1145","line":30,"column":10,"nodeType":"1077","messageId":"1078","endLine":30,"endColumn":31},{"ruleId":"1075","severity":1,"message":"1146","line":31,"column":10,"nodeType":"1077","messageId":"1078","endLine":31,"endColumn":37},{"ruleId":"1075","severity":1,"message":"1147","line":32,"column":10,"nodeType":"1077","messageId":"1078","endLine":32,"endColumn":34},{"ruleId":"1075","severity":1,"message":"1148","line":33,"column":10,"nodeType":"1077","messageId":"1078","endLine":33,"endColumn":38},{"ruleId":"1075","severity":1,"message":"1149","line":35,"column":10,"nodeType":"1077","messageId":"1078","endLine":35,"endColumn":30},{"ruleId":"1075","severity":1,"message":"1150","line":36,"column":10,"nodeType":"1077","messageId":"1078","endLine":36,"endColumn":34},{"ruleId":"1075","severity":1,"message":"1151","line":37,"column":10,"nodeType":"1077","messageId":"1078","endLine":37,"endColumn":23},{"ruleId":"1075","severity":1,"message":"1152","line":38,"column":10,"nodeType":"1077","messageId":"1078","endLine":38,"endColumn":23},{"ruleId":"1075","severity":1,"message":"1153","line":39,"column":10,"nodeType":"1077","messageId":"1078","endLine":39,"endColumn":22},{"ruleId":"1075","severity":1,"message":"1154","line":40,"column":10,"nodeType":"1077","messageId":"1078","endLine":40,"endColumn":22},{"ruleId":"1075","severity":1,"message":"1155","line":41,"column":10,"nodeType":"1077","messageId":"1078","endLine":41,"endColumn":24},{"ruleId":"1075","severity":1,"message":"1156","line":42,"column":10,"nodeType":"1077","messageId":"1078","endLine":42,"endColumn":31},{"ruleId":"1089","severity":1,"message":"1090","line":65,"column":33,"nodeType":"1091","messageId":"1092","endLine":65,"endColumn":35},{"ruleId":"1089","severity":1,"message":"1090","line":90,"column":33,"nodeType":"1091","messageId":"1092","endLine":90,"endColumn":35},{"ruleId":"1075","severity":1,"message":"1157","line":3,"column":8,"nodeType":"1077","messageId":"1078","endLine":3,"endColumn":25},{"ruleId":"1075","severity":1,"message":"1158","line":5,"column":5,"nodeType":"1077","messageId":"1078","endLine":5,"endColumn":15},{"ruleId":"1075","severity":1,"message":"1159","line":6,"column":5,"nodeType":"1077","messageId":"1078","endLine":6,"endColumn":15},{"ruleId":"1075","severity":1,"message":"1117","line":9,"column":8,"nodeType":"1077","messageId":"1078","endLine":9,"endColumn":9},{"ruleId":"1075","severity":1,"message":"1160","line":20,"column":3,"nodeType":"1077","messageId":"1078","endLine":20,"endColumn":13},{"ruleId":"1075","severity":1,"message":"1161","line":21,"column":3,"nodeType":"1077","messageId":"1078","endLine":21,"endColumn":18},{"ruleId":"1075","severity":1,"message":"1162","line":29,"column":10,"nodeType":"1077","messageId":"1078","endLine":29,"endColumn":25},{"ruleId":"1075","severity":1,"message":"1163","line":31,"column":10,"nodeType":"1077","messageId":"1078","endLine":31,"endColumn":31},{"ruleId":"1075","severity":1,"message":"1164","line":32,"column":10,"nodeType":"1077","messageId":"1078","endLine":32,"endColumn":33},{"ruleId":"1075","severity":1,"message":"1165","line":33,"column":10,"nodeType":"1077","messageId":"1078","endLine":33,"endColumn":31},{"ruleId":"1089","severity":1,"message":"1090","line":86,"column":27,"nodeType":"1091","messageId":"1092","endLine":86,"endColumn":29},{"ruleId":"1089","severity":1,"message":"1090","line":122,"column":27,"nodeType":"1091","messageId":"1092","endLine":122,"endColumn":29},{"ruleId":"1089","severity":1,"message":"1090","line":236,"column":25,"nodeType":"1091","messageId":"1092","endLine":236,"endColumn":27},{"ruleId":"1089","severity":1,"message":"1090","line":248,"column":32,"nodeType":"1091","messageId":"1092","endLine":248,"endColumn":34},{"ruleId":"1089","severity":1,"message":"1090","line":266,"column":29,"nodeType":"1091","messageId":"1092","endLine":266,"endColumn":31},{"ruleId":"1075","severity":1,"message":"1157","line":3,"column":8,"nodeType":"1077","messageId":"1078","endLine":3,"endColumn":25},{"ruleId":"1075","severity":1,"message":"1166","line":4,"column":8,"nodeType":"1077","messageId":"1078","endLine":4,"endColumn":21},{"ruleId":"1075","severity":1,"message":"1158","line":5,"column":3,"nodeType":"1077","messageId":"1078","endLine":5,"endColumn":13},{"ruleId":"1075","severity":1,"message":"1159","line":6,"column":3,"nodeType":"1077","messageId":"1078","endLine":6,"endColumn":13},{"ruleId":"1075","severity":1,"message":"1117","line":9,"column":8,"nodeType":"1077","messageId":"1078","endLine":9,"endColumn":9},{"ruleId":"1075","severity":1,"message":"1162","line":32,"column":10,"nodeType":"1077","messageId":"1078","endLine":32,"endColumn":25},{"ruleId":"1075","severity":1,"message":"1163","line":34,"column":10,"nodeType":"1077","messageId":"1078","endLine":34,"endColumn":31},{"ruleId":"1075","severity":1,"message":"1164","line":35,"column":10,"nodeType":"1077","messageId":"1078","endLine":35,"endColumn":33},{"ruleId":"1075","severity":1,"message":"1165","line":36,"column":10,"nodeType":"1077","messageId":"1078","endLine":36,"endColumn":31},{"ruleId":"1075","severity":1,"message":"1167","line":37,"column":10,"nodeType":"1077","messageId":"1078","endLine":37,"endColumn":31},{"ruleId":"1168","severity":1,"message":"1169","line":58,"column":7,"nodeType":"1170","messageId":"1092","endLine":58,"endColumn":15},{"ruleId":"1168","severity":1,"message":"1171","line":65,"column":7,"nodeType":"1170","messageId":"1092","endLine":65,"endColumn":11},{"ruleId":"1089","severity":1,"message":"1090","line":86,"column":27,"nodeType":"1091","messageId":"1092","endLine":86,"endColumn":29},{"ruleId":"1089","severity":1,"message":"1090","line":143,"column":27,"nodeType":"1091","messageId":"1092","endLine":143,"endColumn":29},{"ruleId":"1089","severity":1,"message":"1090","line":214,"column":25,"nodeType":"1091","messageId":"1092","endLine":214,"endColumn":27},{"ruleId":"1089","severity":1,"message":"1090","line":226,"column":28,"nodeType":"1091","messageId":"1092","endLine":226,"endColumn":30},{"ruleId":"1089","severity":1,"message":"1090","line":245,"column":29,"nodeType":"1091","messageId":"1092","endLine":245,"endColumn":31},{"ruleId":"1089","severity":1,"message":"1090","line":263,"column":29,"nodeType":"1091","messageId":"1092","endLine":263,"endColumn":31},{"ruleId":"1075","severity":1,"message":"1158","line":4,"column":5,"nodeType":"1077","messageId":"1078","endLine":4,"endColumn":15},{"ruleId":"1075","severity":1,"message":"1159","line":5,"column":5,"nodeType":"1077","messageId":"1078","endLine":5,"endColumn":15},{"ruleId":"1075","severity":1,"message":"1117","line":8,"column":8,"nodeType":"1077","messageId":"1078","endLine":8,"endColumn":9},{"ruleId":"1075","severity":1,"message":"1172","line":16,"column":5,"nodeType":"1077","messageId":"1078","endLine":16,"endColumn":16},{"ruleId":"1075","severity":1,"message":"1160","line":23,"column":5,"nodeType":"1077","messageId":"1078","endLine":23,"endColumn":15},{"ruleId":"1075","severity":1,"message":"1161","line":24,"column":5,"nodeType":"1077","messageId":"1078","endLine":24,"endColumn":20},{"ruleId":"1075","severity":1,"message":"1162","line":31,"column":10,"nodeType":"1077","messageId":"1078","endLine":31,"endColumn":25},{"ruleId":"1075","severity":1,"message":"1173","line":35,"column":8,"nodeType":"1077","messageId":"1078","endLine":35,"endColumn":28},{"ruleId":"1075","severity":1,"message":"1174","line":40,"column":8,"nodeType":"1077","messageId":"1078","endLine":40,"endColumn":23},{"ruleId":"1075","severity":1,"message":"1175","line":42,"column":8,"nodeType":"1077","messageId":"1078","endLine":42,"endColumn":28},{"ruleId":"1089","severity":1,"message":"1090","line":96,"column":37,"nodeType":"1091","messageId":"1092","endLine":96,"endColumn":39},{"ruleId":"1089","severity":1,"message":"1090","line":107,"column":37,"nodeType":"1091","messageId":"1092","endLine":107,"endColumn":39},{"ruleId":"1089","severity":1,"message":"1090","line":117,"column":37,"nodeType":"1091","messageId":"1092","endLine":117,"endColumn":39},{"ruleId":"1089","severity":1,"message":"1090","line":136,"column":33,"nodeType":"1091","messageId":"1092","endLine":136,"endColumn":35},{"ruleId":"1089","severity":1,"message":"1090","line":154,"column":33,"nodeType":"1091","messageId":"1092","endLine":154,"endColumn":35},{"ruleId":"1089","severity":1,"message":"1090","line":179,"column":33,"nodeType":"1091","messageId":"1092","endLine":179,"endColumn":35},{"ruleId":"1089","severity":1,"message":"1090","line":211,"column":33,"nodeType":"1091","messageId":"1092","endLine":211,"endColumn":35},{"ruleId":"1089","severity":1,"message":"1090","line":295,"column":33,"nodeType":"1091","messageId":"1092","endLine":295,"endColumn":35},{"ruleId":"1089","severity":1,"message":"1090","line":307,"column":37,"nodeType":"1091","messageId":"1092","endLine":307,"endColumn":39},{"ruleId":"1089","severity":1,"message":"1090","line":319,"column":32,"nodeType":"1091","messageId":"1092","endLine":319,"endColumn":34},{"ruleId":"1089","severity":1,"message":"1090","line":331,"column":33,"nodeType":"1091","messageId":"1092","endLine":331,"endColumn":35},{"ruleId":"1089","severity":1,"message":"1090","line":356,"column":37,"nodeType":"1091","messageId":"1092","endLine":356,"endColumn":39},{"ruleId":"1075","severity":1,"message":"1157","line":3,"column":8,"nodeType":"1077","messageId":"1078","endLine":3,"endColumn":25},{"ruleId":"1075","severity":1,"message":"1158","line":5,"column":5,"nodeType":"1077","messageId":"1078","endLine":5,"endColumn":15},{"ruleId":"1075","severity":1,"message":"1159","line":6,"column":5,"nodeType":"1077","messageId":"1078","endLine":6,"endColumn":15},{"ruleId":"1075","severity":1,"message":"1117","line":9,"column":8,"nodeType":"1077","messageId":"1078","endLine":9,"endColumn":9},{"ruleId":"1075","severity":1,"message":"1172","line":17,"column":5,"nodeType":"1077","messageId":"1078","endLine":17,"endColumn":16},{"ruleId":"1075","severity":1,"message":"1160","line":24,"column":5,"nodeType":"1077","messageId":"1078","endLine":24,"endColumn":15},{"ruleId":"1075","severity":1,"message":"1161","line":25,"column":5,"nodeType":"1077","messageId":"1078","endLine":25,"endColumn":20},{"ruleId":"1075","severity":1,"message":"1176","line":32,"column":8,"nodeType":"1077","messageId":"1078","endLine":32,"endColumn":18},{"ruleId":"1075","severity":1,"message":"1175","line":43,"column":8,"nodeType":"1077","messageId":"1078","endLine":43,"endColumn":28},{"ruleId":"1089","severity":1,"message":"1090","line":102,"column":37,"nodeType":"1091","messageId":"1092","endLine":102,"endColumn":39},{"ruleId":"1089","severity":1,"message":"1090","line":112,"column":37,"nodeType":"1091","messageId":"1092","endLine":112,"endColumn":39},{"ruleId":"1089","severity":1,"message":"1090","line":130,"column":33,"nodeType":"1091","messageId":"1092","endLine":130,"endColumn":35},{"ruleId":"1089","severity":1,"message":"1090","line":146,"column":33,"nodeType":"1091","messageId":"1092","endLine":146,"endColumn":35},{"ruleId":"1089","severity":1,"message":"1090","line":164,"column":33,"nodeType":"1091","messageId":"1092","endLine":164,"endColumn":35},{"ruleId":"1089","severity":1,"message":"1090","line":189,"column":33,"nodeType":"1091","messageId":"1092","endLine":189,"endColumn":35},{"ruleId":"1089","severity":1,"message":"1090","line":276,"column":33,"nodeType":"1091","messageId":"1092","endLine":276,"endColumn":35},{"ruleId":"1089","severity":1,"message":"1090","line":288,"column":37,"nodeType":"1091","messageId":"1092","endLine":288,"endColumn":39},{"ruleId":"1089","severity":1,"message":"1090","line":300,"column":32,"nodeType":"1091","messageId":"1092","endLine":300,"endColumn":34},{"ruleId":"1089","severity":1,"message":"1090","line":312,"column":32,"nodeType":"1091","messageId":"1092","endLine":312,"endColumn":34},{"ruleId":"1089","severity":1,"message":"1090","line":324,"column":33,"nodeType":"1091","messageId":"1092","endLine":324,"endColumn":35},{"ruleId":"1089","severity":1,"message":"1090","line":350,"column":37,"nodeType":"1091","messageId":"1092","endLine":350,"endColumn":39},{"ruleId":"1089","severity":1,"message":"1090","line":387,"column":33,"nodeType":"1091","messageId":"1092","endLine":387,"endColumn":35},{"ruleId":"1075","severity":1,"message":"1157","line":3,"column":8,"nodeType":"1077","messageId":"1078","endLine":3,"endColumn":25},{"ruleId":"1075","severity":1,"message":"1166","line":4,"column":8,"nodeType":"1077","messageId":"1078","endLine":4,"endColumn":21},{"ruleId":"1075","severity":1,"message":"1158","line":5,"column":5,"nodeType":"1077","messageId":"1078","endLine":5,"endColumn":15},{"ruleId":"1075","severity":1,"message":"1159","line":6,"column":5,"nodeType":"1077","messageId":"1078","endLine":6,"endColumn":15},{"ruleId":"1075","severity":1,"message":"1117","line":9,"column":8,"nodeType":"1077","messageId":"1078","endLine":9,"endColumn":9},{"ruleId":"1075","severity":1,"message":"1115","line":28,"column":5,"nodeType":"1077","messageId":"1078","endLine":28,"endColumn":16},{"ruleId":"1075","severity":1,"message":"1177","line":31,"column":5,"nodeType":"1077","messageId":"1078","endLine":31,"endColumn":15},{"ruleId":"1075","severity":1,"message":"1178","line":32,"column":5,"nodeType":"1077","messageId":"1078","endLine":32,"endColumn":19},{"ruleId":"1075","severity":1,"message":"1179","line":33,"column":5,"nodeType":"1077","messageId":"1078","endLine":33,"endColumn":19},{"ruleId":"1075","severity":1,"message":"1162","line":35,"column":10,"nodeType":"1077","messageId":"1078","endLine":35,"endColumn":25},{"ruleId":"1075","severity":1,"message":"1163","line":37,"column":10,"nodeType":"1077","messageId":"1078","endLine":37,"endColumn":31},{"ruleId":"1075","severity":1,"message":"1164","line":38,"column":10,"nodeType":"1077","messageId":"1078","endLine":38,"endColumn":33},{"ruleId":"1075","severity":1,"message":"1165","line":39,"column":10,"nodeType":"1077","messageId":"1078","endLine":39,"endColumn":31},{"ruleId":"1075","severity":1,"message":"1167","line":40,"column":10,"nodeType":"1077","messageId":"1078","endLine":40,"endColumn":31},{"ruleId":"1089","severity":1,"message":"1090","line":99,"column":33,"nodeType":"1091","messageId":"1092","endLine":99,"endColumn":35},{"ruleId":"1089","severity":1,"message":"1090","line":118,"column":33,"nodeType":"1091","messageId":"1092","endLine":118,"endColumn":35},{"ruleId":"1089","severity":1,"message":"1090","line":136,"column":33,"nodeType":"1091","messageId":"1092","endLine":136,"endColumn":35},{"ruleId":"1089","severity":1,"message":"1090","line":204,"column":33,"nodeType":"1091","messageId":"1092","endLine":204,"endColumn":35},{"ruleId":"1089","severity":1,"message":"1090","line":307,"column":35,"nodeType":"1091","messageId":"1092","endLine":307,"endColumn":37},{"ruleId":"1089","severity":1,"message":"1090","line":319,"column":34,"nodeType":"1091","messageId":"1092","endLine":319,"endColumn":36},{"ruleId":"1089","severity":1,"message":"1090","line":331,"column":32,"nodeType":"1091","messageId":"1092","endLine":331,"endColumn":34},{"ruleId":"1089","severity":1,"message":"1090","line":351,"column":33,"nodeType":"1091","messageId":"1092","endLine":351,"endColumn":35},{"ruleId":"1089","severity":1,"message":"1090","line":363,"column":30,"nodeType":"1091","messageId":"1092","endLine":363,"endColumn":32},{"ruleId":"1089","severity":1,"message":"1090","line":382,"column":37,"nodeType":"1091","messageId":"1092","endLine":382,"endColumn":39},{"ruleId":"1089","severity":1,"message":"1090","line":404,"column":37,"nodeType":"1091","messageId":"1092","endLine":404,"endColumn":39},{"ruleId":"1075","severity":1,"message":"1157","line":3,"column":8,"nodeType":"1077","messageId":"1078","endLine":3,"endColumn":25},{"ruleId":"1075","severity":1,"message":"1158","line":5,"column":5,"nodeType":"1077","messageId":"1078","endLine":5,"endColumn":15},{"ruleId":"1075","severity":1,"message":"1159","line":6,"column":5,"nodeType":"1077","messageId":"1078","endLine":6,"endColumn":15},{"ruleId":"1075","severity":1,"message":"1117","line":9,"column":8,"nodeType":"1077","messageId":"1078","endLine":9,"endColumn":9},{"ruleId":"1075","severity":1,"message":"1180","line":11,"column":8,"nodeType":"1077","messageId":"1078","endLine":11,"endColumn":13},{"ruleId":"1075","severity":1,"message":"1181","line":12,"column":8,"nodeType":"1077","messageId":"1078","endLine":12,"endColumn":13},{"ruleId":"1075","severity":1,"message":"1162","line":33,"column":10,"nodeType":"1077","messageId":"1078","endLine":33,"endColumn":25},{"ruleId":"1075","severity":1,"message":"1163","line":35,"column":10,"nodeType":"1077","messageId":"1078","endLine":35,"endColumn":31},{"ruleId":"1075","severity":1,"message":"1164","line":36,"column":10,"nodeType":"1077","messageId":"1078","endLine":36,"endColumn":33},{"ruleId":"1075","severity":1,"message":"1165","line":37,"column":10,"nodeType":"1077","messageId":"1078","endLine":37,"endColumn":31},{"ruleId":"1075","severity":1,"message":"1167","line":38,"column":10,"nodeType":"1077","messageId":"1078","endLine":38,"endColumn":31},{"ruleId":"1075","severity":1,"message":"1109","line":42,"column":8,"nodeType":"1077","messageId":"1078","endLine":42,"endColumn":26},{"ruleId":"1089","severity":1,"message":"1090","line":99,"column":37,"nodeType":"1091","messageId":"1092","endLine":99,"endColumn":39},{"ruleId":"1089","severity":1,"message":"1090","line":109,"column":37,"nodeType":"1091","messageId":"1092","endLine":109,"endColumn":39},{"ruleId":"1089","severity":1,"message":"1090","line":127,"column":33,"nodeType":"1091","messageId":"1092","endLine":127,"endColumn":35},{"ruleId":"1089","severity":1,"message":"1090","line":192,"column":33,"nodeType":"1091","messageId":"1092","endLine":192,"endColumn":35},{"ruleId":"1089","severity":1,"message":"1090","line":347,"column":34,"nodeType":"1091","messageId":"1092","endLine":347,"endColumn":36},{"ruleId":"1089","severity":1,"message":"1090","line":359,"column":33,"nodeType":"1091","messageId":"1092","endLine":359,"endColumn":35},{"ruleId":"1089","severity":1,"message":"1090","line":371,"column":32,"nodeType":"1091","messageId":"1092","endLine":371,"endColumn":34},{"ruleId":"1089","severity":1,"message":"1090","line":391,"column":33,"nodeType":"1091","messageId":"1092","endLine":391,"endColumn":35},{"ruleId":"1089","severity":1,"message":"1090","line":403,"column":30,"nodeType":"1091","messageId":"1092","endLine":403,"endColumn":32},{"ruleId":"1089","severity":1,"message":"1090","line":436,"column":33,"nodeType":"1091","messageId":"1092","endLine":436,"endColumn":35},{"ruleId":"1075","severity":1,"message":"1099","line":19,"column":11,"nodeType":"1077","messageId":"1078","endLine":19,"endColumn":14},{"ruleId":"1075","severity":1,"message":"1099","line":40,"column":11,"nodeType":"1077","messageId":"1078","endLine":40,"endColumn":14},{"ruleId":"1075","severity":1,"message":"1099","line":61,"column":11,"nodeType":"1077","messageId":"1078","endLine":61,"endColumn":14},{"ruleId":"1075","severity":1,"message":"1099","line":82,"column":11,"nodeType":"1077","messageId":"1078","endLine":82,"endColumn":14},{"ruleId":"1075","severity":1,"message":"1099","line":19,"column":11,"nodeType":"1077","messageId":"1078","endLine":19,"endColumn":14},{"ruleId":"1075","severity":1,"message":"1099","line":41,"column":11,"nodeType":"1077","messageId":"1078","endLine":41,"endColumn":14},{"ruleId":"1075","severity":1,"message":"1099","line":63,"column":11,"nodeType":"1077","messageId":"1078","endLine":63,"endColumn":14},{"ruleId":"1075","severity":1,"message":"1099","line":84,"column":11,"nodeType":"1077","messageId":"1078","endLine":84,"endColumn":14},{"ruleId":"1075","severity":1,"message":"1099","line":19,"column":11,"nodeType":"1077","messageId":"1078","endLine":19,"endColumn":14},{"ruleId":"1075","severity":1,"message":"1099","line":40,"column":11,"nodeType":"1077","messageId":"1078","endLine":40,"endColumn":14},{"ruleId":"1075","severity":1,"message":"1099","line":63,"column":11,"nodeType":"1077","messageId":"1078","endLine":63,"endColumn":14},{"ruleId":"1075","severity":1,"message":"1099","line":84,"column":11,"nodeType":"1077","messageId":"1078","endLine":84,"endColumn":14},{"ruleId":"1075","severity":1,"message":"1099","line":19,"column":11,"nodeType":"1077","messageId":"1078","endLine":19,"endColumn":14},{"ruleId":"1075","severity":1,"message":"1099","line":40,"column":11,"nodeType":"1077","messageId":"1078","endLine":40,"endColumn":14},{"ruleId":"1075","severity":1,"message":"1099","line":63,"column":11,"nodeType":"1077","messageId":"1078","endLine":63,"endColumn":14},{"ruleId":"1075","severity":1,"message":"1099","line":90,"column":11,"nodeType":"1077","messageId":"1078","endLine":90,"endColumn":14},{"ruleId":"1075","severity":1,"message":"1099","line":111,"column":11,"nodeType":"1077","messageId":"1078","endLine":111,"endColumn":14},{"ruleId":"1075","severity":1,"message":"1099","line":19,"column":11,"nodeType":"1077","messageId":"1078","endLine":19,"endColumn":14},{"ruleId":"1075","severity":1,"message":"1099","line":40,"column":11,"nodeType":"1077","messageId":"1078","endLine":40,"endColumn":14},{"ruleId":"1075","severity":1,"message":"1099","line":61,"column":11,"nodeType":"1077","messageId":"1078","endLine":61,"endColumn":14},{"ruleId":"1182","severity":1,"message":"1183","line":10,"column":5,"nodeType":"1184","messageId":"1185","endLine":17,"endColumn":6},{"ruleId":"1075","severity":1,"message":"1099","line":19,"column":11,"nodeType":"1077","messageId":"1078","endLine":19,"endColumn":14},{"ruleId":"1075","severity":1,"message":"1099","line":40,"column":11,"nodeType":"1077","messageId":"1078","endLine":40,"endColumn":14},{"ruleId":"1075","severity":1,"message":"1186","line":12,"column":8,"nodeType":"1077","messageId":"1078","endLine":12,"endColumn":14},{"ruleId":"1075","severity":1,"message":"1187","line":14,"column":7,"nodeType":"1077","messageId":"1078","endLine":14,"endColumn":11},{"ruleId":"1075","severity":1,"message":"1186","line":8,"column":8,"nodeType":"1077","messageId":"1078","endLine":8,"endColumn":14},{"ruleId":"1075","severity":1,"message":"1186","line":13,"column":8,"nodeType":"1077","messageId":"1078","endLine":13,"endColumn":14},{"ruleId":"1075","severity":1,"message":"1186","line":13,"column":8,"nodeType":"1077","messageId":"1078","endLine":13,"endColumn":14},{"ruleId":"1188","severity":1,"message":"1189","line":4,"column":1,"nodeType":"1190","endLine":62,"endColumn":3},{"ruleId":"1075","severity":1,"message":"1191","line":9,"column":66,"nodeType":"1077","messageId":"1078","endLine":9,"endColumn":71},{"ruleId":"1080","replacedBy":"1192"},{"ruleId":"1082","replacedBy":"1193"},{"ruleId":"1075","severity":1,"message":"1099","line":15,"column":11,"nodeType":"1077","messageId":"1078","endLine":15,"endColumn":14},{"ruleId":"1075","severity":1,"message":"1099","line":41,"column":11,"nodeType":"1077","messageId":"1078","endLine":41,"endColumn":14},{"ruleId":"1075","severity":1,"message":"1099","line":66,"column":11,"nodeType":"1077","messageId":"1078","endLine":66,"endColumn":14},{"ruleId":"1075","severity":1,"message":"1099","line":91,"column":11,"nodeType":"1077","messageId":"1078","endLine":91,"endColumn":14},{"ruleId":"1075","severity":1,"message":"1099","line":112,"column":11,"nodeType":"1077","messageId":"1078","endLine":112,"endColumn":14},{"ruleId":"1075","severity":1,"message":"1157","line":3,"column":8,"nodeType":"1077","messageId":"1078","endLine":3,"endColumn":25},{"ruleId":"1075","severity":1,"message":"1158","line":5,"column":5,"nodeType":"1077","messageId":"1078","endLine":5,"endColumn":15},{"ruleId":"1075","severity":1,"message":"1159","line":6,"column":5,"nodeType":"1077","messageId":"1078","endLine":6,"endColumn":15},{"ruleId":"1075","severity":1,"message":"1117","line":9,"column":8,"nodeType":"1077","messageId":"1078","endLine":9,"endColumn":9},{"ruleId":"1075","severity":1,"message":"1160","line":20,"column":5,"nodeType":"1077","messageId":"1078","endLine":20,"endColumn":15},{"ruleId":"1075","severity":1,"message":"1161","line":21,"column":5,"nodeType":"1077","messageId":"1078","endLine":21,"endColumn":20},{"ruleId":"1075","severity":1,"message":"1115","line":25,"column":5,"nodeType":"1077","messageId":"1078","endLine":25,"endColumn":16},{"ruleId":"1075","severity":1,"message":"1162","line":29,"column":10,"nodeType":"1077","messageId":"1078","endLine":29,"endColumn":25},{"ruleId":"1075","severity":1,"message":"1194","line":30,"column":10,"nodeType":"1077","messageId":"1078","endLine":30,"endColumn":22},{"ruleId":"1075","severity":1,"message":"1163","line":31,"column":10,"nodeType":"1077","messageId":"1078","endLine":31,"endColumn":31},{"ruleId":"1075","severity":1,"message":"1164","line":32,"column":10,"nodeType":"1077","messageId":"1078","endLine":32,"endColumn":33},{"ruleId":"1075","severity":1,"message":"1165","line":33,"column":10,"nodeType":"1077","messageId":"1078","endLine":33,"endColumn":31},{"ruleId":"1089","severity":1,"message":"1090","line":109,"column":33,"nodeType":"1091","messageId":"1092","endLine":109,"endColumn":35},{"ruleId":"1089","severity":1,"message":"1090","line":134,"column":33,"nodeType":"1091","messageId":"1092","endLine":134,"endColumn":35},{"ruleId":"1089","severity":1,"message":"1090","line":159,"column":33,"nodeType":"1091","messageId":"1092","endLine":159,"endColumn":35},{"ruleId":"1089","severity":1,"message":"1090","line":177,"column":33,"nodeType":"1091","messageId":"1092","endLine":177,"endColumn":35},{"ruleId":"1089","severity":1,"message":"1090","line":390,"column":33,"nodeType":"1091","messageId":"1092","endLine":390,"endColumn":35},{"ruleId":"1089","severity":1,"message":"1090","line":406,"column":33,"nodeType":"1091","messageId":"1092","endLine":406,"endColumn":35},{"ruleId":"1089","severity":1,"message":"1090","line":423,"column":33,"nodeType":"1091","messageId":"1092","endLine":423,"endColumn":35},{"ruleId":"1089","severity":1,"message":"1090","line":494,"column":33,"nodeType":"1091","messageId":"1092","endLine":494,"endColumn":35},{"ruleId":"1089","severity":1,"message":"1090","line":506,"column":37,"nodeType":"1091","messageId":"1092","endLine":506,"endColumn":39},{"ruleId":"1089","severity":1,"message":"1090","line":518,"column":30,"nodeType":"1091","messageId":"1092","endLine":518,"endColumn":32},{"ruleId":"1089","severity":1,"message":"1090","line":530,"column":30,"nodeType":"1091","messageId":"1092","endLine":530,"endColumn":32},{"ruleId":"1089","severity":1,"message":"1090","line":543,"column":33,"nodeType":"1091","messageId":"1092","endLine":543,"endColumn":35},{"ruleId":"1089","severity":1,"message":"1090","line":556,"column":34,"nodeType":"1091","messageId":"1092","endLine":556,"endColumn":36},{"ruleId":"1089","severity":1,"message":"1090","line":569,"column":29,"nodeType":"1091","messageId":"1092","endLine":569,"endColumn":31},{"ruleId":"1089","severity":1,"message":"1090","line":595,"column":33,"nodeType":"1091","messageId":"1092","endLine":595,"endColumn":35},{"ruleId":"1089","severity":1,"message":"1090","line":633,"column":33,"nodeType":"1091","messageId":"1092","endLine":633,"endColumn":35},{"ruleId":"1089","severity":1,"message":"1090","line":645,"column":37,"nodeType":"1091","messageId":"1092","endLine":645,"endColumn":39},{"ruleId":"1089","severity":1,"message":"1090","line":657,"column":32,"nodeType":"1091","messageId":"1092","endLine":657,"endColumn":34},{"ruleId":"1089","severity":1,"message":"1090","line":669,"column":32,"nodeType":"1091","messageId":"1092","endLine":669,"endColumn":34},{"ruleId":"1089","severity":1,"message":"1090","line":681,"column":33,"nodeType":"1091","messageId":"1092","endLine":681,"endColumn":35},{"ruleId":"1089","severity":1,"message":"1090","line":707,"column":37,"nodeType":"1091","messageId":"1092","endLine":707,"endColumn":39},{"ruleId":"1089","severity":1,"message":"1090","line":733,"column":33,"nodeType":"1091","messageId":"1092","endLine":733,"endColumn":35},{"ruleId":"1089","severity":1,"message":"1090","line":745,"column":37,"nodeType":"1091","messageId":"1092","endLine":745,"endColumn":39},{"ruleId":"1089","severity":1,"message":"1090","line":757,"column":33,"nodeType":"1091","messageId":"1092","endLine":757,"endColumn":35},{"ruleId":"1089","severity":1,"message":"1090","line":783,"column":33,"nodeType":"1091","messageId":"1092","endLine":783,"endColumn":35},{"ruleId":"1075","severity":1,"message":"1099","line":15,"column":11,"nodeType":"1077","messageId":"1078","endLine":15,"endColumn":14},{"ruleId":"1075","severity":1,"message":"1099","line":36,"column":11,"nodeType":"1077","messageId":"1078","endLine":36,"endColumn":14},{"ruleId":"1075","severity":1,"message":"1157","line":3,"column":8,"nodeType":"1077","messageId":"1078","endLine":3,"endColumn":25},{"ruleId":"1075","severity":1,"message":"1158","line":5,"column":5,"nodeType":"1077","messageId":"1078","endLine":5,"endColumn":15},{"ruleId":"1075","severity":1,"message":"1159","line":6,"column":5,"nodeType":"1077","messageId":"1078","endLine":6,"endColumn":15},{"ruleId":"1075","severity":1,"message":"1117","line":9,"column":8,"nodeType":"1077","messageId":"1078","endLine":9,"endColumn":9},{"ruleId":"1075","severity":1,"message":"1195","line":10,"column":8,"nodeType":"1077","messageId":"1078","endLine":10,"endColumn":14},{"ruleId":"1075","severity":1,"message":"1129","line":13,"column":5,"nodeType":"1077","messageId":"1078","endLine":13,"endColumn":11},{"ruleId":"1075","severity":1,"message":"1196","line":14,"column":5,"nodeType":"1077","messageId":"1078","endLine":14,"endColumn":16},{"ruleId":"1075","severity":1,"message":"1197","line":15,"column":5,"nodeType":"1077","messageId":"1078","endLine":15,"endColumn":22},{"ruleId":"1075","severity":1,"message":"1198","line":16,"column":5,"nodeType":"1077","messageId":"1078","endLine":16,"endColumn":16},{"ruleId":"1075","severity":1,"message":"1199","line":17,"column":5,"nodeType":"1077","messageId":"1078","endLine":17,"endColumn":14},{"ruleId":"1075","severity":1,"message":"1128","line":18,"column":5,"nodeType":"1077","messageId":"1078","endLine":18,"endColumn":8},{"ruleId":"1075","severity":1,"message":"1200","line":19,"column":5,"nodeType":"1077","messageId":"1078","endLine":19,"endColumn":10},{"ruleId":"1075","severity":1,"message":"1160","line":20,"column":5,"nodeType":"1077","messageId":"1078","endLine":20,"endColumn":15},{"ruleId":"1075","severity":1,"message":"1161","line":21,"column":5,"nodeType":"1077","messageId":"1078","endLine":21,"endColumn":20},{"ruleId":"1075","severity":1,"message":"1201","line":22,"column":5,"nodeType":"1077","messageId":"1078","endLine":22,"endColumn":13},{"ruleId":"1075","severity":1,"message":"1202","line":23,"column":5,"nodeType":"1077","messageId":"1078","endLine":23,"endColumn":16},{"ruleId":"1075","severity":1,"message":"1203","line":24,"column":5,"nodeType":"1077","messageId":"1078","endLine":24,"endColumn":10},{"ruleId":"1075","severity":1,"message":"1115","line":25,"column":5,"nodeType":"1077","messageId":"1078","endLine":25,"endColumn":16},{"ruleId":"1075","severity":1,"message":"1204","line":26,"column":5,"nodeType":"1077","messageId":"1078","endLine":26,"endColumn":9},{"ruleId":"1075","severity":1,"message":"1205","line":27,"column":5,"nodeType":"1077","messageId":"1078","endLine":27,"endColumn":14},{"ruleId":"1075","severity":1,"message":"1162","line":29,"column":10,"nodeType":"1077","messageId":"1078","endLine":29,"endColumn":25},{"ruleId":"1075","severity":1,"message":"1194","line":30,"column":10,"nodeType":"1077","messageId":"1078","endLine":30,"endColumn":22},{"ruleId":"1075","severity":1,"message":"1163","line":31,"column":10,"nodeType":"1077","messageId":"1078","endLine":31,"endColumn":31},{"ruleId":"1075","severity":1,"message":"1164","line":32,"column":10,"nodeType":"1077","messageId":"1078","endLine":32,"endColumn":33},{"ruleId":"1075","severity":1,"message":"1165","line":33,"column":10,"nodeType":"1077","messageId":"1078","endLine":33,"endColumn":31},{"ruleId":"1075","severity":1,"message":"1174","line":35,"column":8,"nodeType":"1077","messageId":"1078","endLine":35,"endColumn":23},{"ruleId":"1075","severity":1,"message":"1110","line":36,"column":8,"nodeType":"1077","messageId":"1078","endLine":36,"endColumn":29},"no-unused-vars","'reportWebVitals' is defined but never used.","Identifier","unusedVar","'render' is defined but never used.","no-native-reassign",["1206"],"no-negated-in-lhs",["1207"],"'ThemeSelector' is defined but never used.","'PageConfigConsumer' is defined but never used.","'DefaultNavbar' is defined but never used.","'SidebarANavbar' is defined but never used.","'SidebarBottomA' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-script-url","Script URL is a form of eval.","Literal","unexpectedScriptURL","'PropTypes' is defined but never used.","'constant' is defined but never used.","'res' is assigned a value but never used.","'AvatarAddOn' is defined but never used.","'DropdownMenu' is defined but never used.","'DropdownItem' is defined but never used.","'avatarImg' is assigned a value but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'FooterAuth' is defined but never used.","'MenuListingService' is defined but never used.","'AuthenticationService' is defined but never used.","'FlatList' is defined but never used.","'Config' is defined but never used.","'Container' is defined but never used.","'HeaderMain' is defined but never used.","'CustomInput' is defined but never used.","'classNames' is defined but never used.","'_' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-useless-computed-key","Unnecessarily computed property ['float-grid-parent__static'] found.","Property","unnecessarilyComputedProperty",{"range":"1208","text":"1209"},"react/forbid-foreign-prop-types","Using propTypes from another component is not safe because they may be removed in production builds","'Col' is defined but never used.","'Button' is defined but never used.","'HeaderDemo' is defined but never used.","'StackedBarChart' is defined but never used.","'MixBarChart' is defined but never used.","'PositiveAndNegativeBarChart' is defined but never used.","'BarChartStackedBySign' is defined but never used.","'BarChartHasBackground' is defined but never used.","'SimpleLineChart' is defined but never used.","'DashedLineChart' is defined but never used.","'VerticalLineChart' is defined but never used.","'CustomizedLabelLineChart' is defined but never used.","'SimpleAreaChart' is defined but never used.","'StackedAreaChart' is defined but never used.","'PercentAreaChart' is defined but never used.","'AreaChartFillByValue' is defined but never used.","'TwoLevelPieChart' is defined but never used.","'StraightAnglePieChart' is defined but never used.","'PieChartWithCustomizedLabel' is defined but never used.","'PieChartWithPaddingAngle' is defined but never used.","'PieChartWithPaddingAngleHalf' is defined but never used.","'SimpleRadialBarChart' is defined but never used.","'LineBarAreaComposedChart' is defined but never used.","'TinyLineChart' is defined but never used.","'TinyAreaChart' is defined but never used.","'TinyBarChart' is defined but never used.","'TinyPieChart' is defined but never used.","'TinyDonutChart' is defined but never used.","'VerticalComposedChart' is defined but never used.","'paginationFactory' is defined but never used.","'Comparator' is defined but never used.","'dateFilter' is defined but never used.","'InputGroup' is defined but never used.","'InputGroupAddon' is defined but never used.","'CustomExportCSV' is defined but never used.","'CustomPaginationPanel' is defined but never used.","'CustomSizePerPageButton' is defined but never used.","'CustomPaginationTotal' is defined but never used.","'filterFactory' is defined but never used.","'buildCustomTextFilter' is defined but never used.","no-dupe-keys","Duplicate key 'password'.","ObjectExpression","Duplicate key 'name'.","'ButtonInput' is defined but never used.","'ImmunizationsService' is defined but never used.","'VaccinesService' is defined but never used.","'MedicalReportService' is defined but never used.","'DatePicker' is defined but never used.","'Pagination' is defined but never used.","'PaginationItem' is defined but never used.","'PaginationLink' is defined but never used.","'axios' is defined but never used.","'paths' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'colors' is defined but never used.","'data' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'color' is assigned a value but never used.",["1206"],["1207"],"'CustomSearch' is defined but never used.","'moment' is defined but never used.","'ButtonGroup' is defined but never used.","'UncontrolledModal' is defined but never used.","'ModalHeader' is defined but never used.","'ModalBody' is defined but never used.","'Input' is defined but never used.","'FormText' is defined but never used.","'ModalFooter' is defined but never used.","'Label' is defined but never used.","'Form' is defined but never used.","'FormGroup' is defined but never used.","no-global-assign","no-unsafe-negation",[1987,2016],"'float-grid-parent__static'"]